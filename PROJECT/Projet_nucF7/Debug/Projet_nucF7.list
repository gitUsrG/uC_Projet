
Projet_nucF7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800a0d8  0800a0d8  0000b0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a588  0800a588  0000c220  2**0
                  CONTENTS
  4 .ARM          00000008  0800a588  0800a588  0000b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a590  0800a590  0000c220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800a598  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000220  0800a7b8  0000c220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800a7b8  0000c614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e6b  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377f  00000000  00000000  000230bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00026840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f38  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d33  00000000  00000000  00028b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b55c  00000000  00000000  0005187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f40ba  00000000  00000000  0006cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006280  00000000  00000000  00160ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00167154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0c0 	.word	0x0800a0c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800a0c0 	.word	0x0800a0c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b7d      	ldr	r3, [pc, #500]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b7a      	ldr	r3, [pc, #488]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	4b77      	ldr	r3, [pc, #476]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a76      	ldr	r2, [pc, #472]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b74      	ldr	r3, [pc, #464]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b71      	ldr	r3, [pc, #452]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a70      	ldr	r2, [pc, #448]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b6e      	ldr	r3, [pc, #440]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b6b      	ldr	r3, [pc, #428]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a6a      	ldr	r2, [pc, #424]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b68      	ldr	r3, [pc, #416]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b65      	ldr	r3, [pc, #404]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a64      	ldr	r2, [pc, #400]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b62      	ldr	r3, [pc, #392]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b5f      	ldr	r3, [pc, #380]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	4b59      	ldr	r3, [pc, #356]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b56      	ldr	r3, [pc, #344]	@ (80010e4 <MX_GPIO_Init+0x20c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f9c:	4852      	ldr	r0, [pc, #328]	@ (80010e8 <MX_GPIO_Init+0x210>)
 8000f9e:	f001 f9c3 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2140      	movs	r1, #64	@ 0x40
 8000fa6:	4851      	ldr	r0, [pc, #324]	@ (80010ec <MX_GPIO_Init+0x214>)
 8000fa8:	f001 f9be 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	484b      	ldr	r0, [pc, #300]	@ (80010f0 <MX_GPIO_Init+0x218>)
 8000fc4:	f001 f804 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fc8:	2332      	movs	r3, #50	@ 0x32
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd8:	230b      	movs	r3, #11
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <MX_GPIO_Init+0x218>)
 8000fe4:	f000 fff4 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fe8:	2386      	movs	r3, #134	@ 0x86
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	483c      	ldr	r0, [pc, #240]	@ (80010f4 <MX_GPIO_Init+0x21c>)
 8001004:	f000 ffe4 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001008:	f244 0381 	movw	r3, #16513	@ 0x4081
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4831      	ldr	r0, [pc, #196]	@ (80010e8 <MX_GPIO_Init+0x210>)
 8001022:	f000 ffd5 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001038:	230b      	movs	r3, #11
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <MX_GPIO_Init+0x210>)
 8001044:	f000 ffc4 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4823      	ldr	r0, [pc, #140]	@ (80010ec <MX_GPIO_Init+0x214>)
 8001060:	f000 ffb6 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	481d      	ldr	r0, [pc, #116]	@ (80010ec <MX_GPIO_Init+0x214>)
 8001078:	f000 ffaa 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800107c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800108e:	230a      	movs	r3, #10
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <MX_GPIO_Init+0x21c>)
 800109a:	f000 ff99 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800109e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <MX_GPIO_Init+0x21c>)
 80010b4:	f000 ff8c 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ca:	230b      	movs	r3, #11
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_GPIO_Init+0x214>)
 80010d6:	f000 ff7b 	bl	8001fd0 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	@ 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020000 	.word	0x40020000

080010f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_I2C1_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_I2C1_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_I2C1_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <MX_I2C1_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_I2C1_Init+0x74>)
 8001110:	2201      	movs	r2, #1
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_I2C1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	@ (800116c <MX_I2C1_Init+0x74>)
 8001134:	f001 f912 	bl	800235c <HAL_I2C_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800113e:	f000 fa15 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4809      	ldr	r0, [pc, #36]	@ (800116c <MX_I2C1_Init+0x74>)
 8001146:	f001 fe59 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001150:	f000 fa0c 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_I2C1_Init+0x74>)
 8001158:	f001 fe9b 	bl	8002e92 <HAL_I2CEx_ConfigDigitalFilter>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001162:	f000 fa03 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000023c 	.word	0x2000023c
 8001170:	40005400 	.word	0x40005400
 8001174:	20404768 	.word	0x20404768

08001178 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0aa      	sub	sp, #168	@ 0xa8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2284      	movs	r2, #132	@ 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f006 ff49 	bl	8008030 <memset>
  if(i2cHandle->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <HAL_I2C_MspInit+0xb4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13c      	bne.n	8001222 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fbe2 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f000 f9d3 	bl	800156c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_I2C_MspInit+0xbc>)
 8001206:	f000 fee3 	bl	8001fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	37a8      	adds	r7, #168	@ 0xa8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40005400 	.word	0x40005400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Msg form "T235" = Temp 23,5°C
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a34      	ldr	r2, [pc, #208]	@ (8001318 <HAL_UART_RxCpltCallback+0xe0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d161      	bne.n	800130e <HAL_UART_RxCpltCallback+0xd6>
    {
        rxBuffer[sizeof(rxBuffer) - 1] = '\0';  // Ensure the buffer is null-terminated
 800124a:	4b34      	ldr	r3, [pc, #208]	@ (800131c <HAL_UART_RxCpltCallback+0xe4>)
 800124c:	2200      	movs	r2, #0
 800124e:	711a      	strb	r2, [r3, #4]
        char prefix = rxBuffer[0];              // The first character indicates the command type (P or T)
 8001250:	4b32      	ldr	r3, [pc, #200]	@ (800131c <HAL_UART_RxCpltCallback+0xe4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	75fb      	strb	r3, [r7, #23]
        char data[4] = {0};                     // Array to store numeric data
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]

        // Extract numeric data after the prefix
        strncpy(data, (char*)rxBuffer + 1, 3);  // Copy the 3 characters following the prefix
 800125a:	4931      	ldr	r1, [pc, #196]	@ (8001320 <HAL_UART_RxCpltCallback+0xe8>)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2203      	movs	r2, #3
 8001262:	4618      	mov	r0, r3
 8001264:	f006 feec 	bl	8008040 <strncpy>
        data[3] = '\0';                         // Properly terminate the string
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

        char* endPtr;
        float value = strtol(data, &endPtr, 10); // Convert the numeric value
 800126c:	f107 0108 	add.w	r1, r7, #8
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	220a      	movs	r2, #10
 8001276:	4618      	mov	r0, r3
 8001278:	f006 f860 	bl	800733c <strtol>
 800127c:	ee07 0a90 	vmov	s15, r0
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	edc7 7a04 	vstr	s15, [r7, #16]
        value = value / 10.0;
 8001288:	ed97 7a04 	vldr	s14, [r7, #16]
 800128c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	edc7 7a04 	vstr	s15, [r7, #16]
        if (*endPtr == '\0') // Check if the conversion is valid
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d131      	bne.n	8001304 <HAL_UART_RxCpltCallback+0xcc>
        {
            if (prefix == 'P' && value >= 0 && value <= 100)  // PWM command
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b50      	cmp	r3, #80	@ 0x50
 80012a4:	d115      	bne.n	80012d2 <HAL_UART_RxCpltCallback+0x9a>
 80012a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	db0e      	blt.n	80012d2 <HAL_UART_RxCpltCallback+0x9a>
 80012b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001324 <HAL_UART_RxCpltCallback+0xec>
 80012bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d805      	bhi.n	80012d2 <HAL_UART_RxCpltCallback+0x9a>
            {
                PWM_WriteDuty(&PWM1_CH1,  value);    // Apply the PWM command
 80012c6:	ed97 0a04 	vldr	s0, [r7, #16]
 80012ca:	4817      	ldr	r0, [pc, #92]	@ (8001328 <HAL_UART_RxCpltCallback+0xf0>)
 80012cc:	f005 fb6c 	bl	80069a8 <PWM_WriteDuty>
 80012d0:	e018      	b.n	8001304 <HAL_UART_RxCpltCallback+0xcc>

            }
            else if (prefix == 'T' && value >= 0 && value <= 100) // Temperature command
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b54      	cmp	r3, #84	@ 0x54
 80012d6:	d115      	bne.n	8001304 <HAL_UART_RxCpltCallback+0xcc>
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	db0e      	blt.n	8001304 <HAL_UART_RxCpltCallback+0xcc>
 80012e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001324 <HAL_UART_RxCpltCallback+0xec>
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d805      	bhi.n	8001304 <HAL_UART_RxCpltCallback+0xcc>
            {
                setpoint = value;  // Divide by 10 to get the temperature in °C
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <HAL_UART_RxCpltCallback+0xf4>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6013      	str	r3, [r2, #0]
                swv.reference = value;
 80012fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <HAL_UART_RxCpltCallback+0xf8>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6053      	str	r3, [r2, #4]
            }
        }

        // Reactivate UART reception
        HAL_UART_Receive_IT(&huart3, rxBuffer, sizeof(rxBuffer) - 1);
 8001304:	2204      	movs	r2, #4
 8001306:	4905      	ldr	r1, [pc, #20]	@ (800131c <HAL_UART_RxCpltCallback+0xe4>)
 8001308:	480a      	ldr	r0, [pc, #40]	@ (8001334 <HAL_UART_RxCpltCallback+0xfc>)
 800130a:	f004 f866 	bl	80053da <HAL_UART_Receive_IT>
    }
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004800 	.word	0x40004800
 800131c:	20000290 	.word	0x20000290
 8001320:	20000291 	.word	0x20000291
 8001324:	42c80000 	.word	0x42c80000
 8001328:	2000000c 	.word	0x2000000c
 800132c:	20000000 	.word	0x20000000
 8001330:	20000018 	.word	0x20000018
 8001334:	200003e8 	.word	0x200003e8

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b088      	sub	sp, #32
 800133e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f000 fc17 	bl	8001b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f8a4 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f7ff fdc6 	bl	8000ed8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800134c:	f000 fb50 	bl	80019f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001350:	f7ff fed2 	bl	80010f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001354:	f000 fa46 	bl	80017e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  //----------- INITIALISATION -----------//
  HAL_UART_Receive_IT(&huart3, rxBuffer, sizeof(rxBuffer)-1);
 8001358:	2204      	movs	r2, #4
 800135a:	4942      	ldr	r1, [pc, #264]	@ (8001464 <main+0x12c>)
 800135c:	4842      	ldr	r0, [pc, #264]	@ (8001468 <main+0x130>)
 800135e:	f004 f83c 	bl	80053da <HAL_UART_Receive_IT>

  PWM_Init(&PWM1_CH1);
 8001362:	4842      	ldr	r0, [pc, #264]	@ (800146c <main+0x134>)
 8001364:	f005 fb08 	bl	8006978 <PWM_Init>

  PID_Init(&hpid1);
 8001368:	4841      	ldr	r0, [pc, #260]	@ (8001470 <main+0x138>)
 800136a:	f005 fa49 	bl	8006800 <PID_Init>

  sensirion_i2c_init();
 800136e:	f005 fed3 	bl	8007118 <sensirion_i2c_init>
  scd_Setup();
 8001372:	f005 fc4f 	bl	8006c14 <scd_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  float co2_ppm = 0.0f;
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  	  float temperature = 0.0f;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  	  float relative_humidity = 0.0f;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	603b      	str	r3, [r7, #0]

  	  int8_t result = scd_WaitForAndReadSensorData(
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <main+0x13c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	463b      	mov	r3, r7
 8001390:	1d3a      	adds	r2, r7, #4
 8001392:	f107 0108 	add.w	r1, r7, #8
 8001396:	f005 fc65 	bl	8006c64 <scd_WaitForAndReadSensorData>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
  			  interval_in_seconds,
  			  &co2_ppm, &temperature,
  			  &relative_humidity);

  	  if (result != 0) {
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <main+0x8a>
  		  printf("Error: Failed to retrieve sensor data. Retrying...\n");
 80013a6:	4834      	ldr	r0, [pc, #208]	@ (8001478 <main+0x140>)
 80013a8:	f006 fd42 	bl	8007e30 <puts>
  		  HAL_Delay(interval_in_seconds*1000); 				// Wait before retrying
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <main+0x13c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fc36 	bl	8001c2c <HAL_Delay>
 80013c0:	e7d9      	b.n	8001376 <main+0x3e>
  	      continue;
  	  }
  	  //----------- PID COMPUTING -----------//

  	  duty = PID_GetOutput(&hpid1, setpoint, temperature);	// Compute the new PWM value
 80013c2:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <main+0x144>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80013cc:	eef0 0a47 	vmov.f32	s1, s14
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	4826      	ldr	r0, [pc, #152]	@ (8001470 <main+0x138>)
 80013d6:	f005 fa29 	bl	800682c <PID_GetOutput>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
 80013de:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <main+0x148>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
  	  PWM_WriteDuty(&PWM1_CH1, duty);						// Set the new PWM
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <main+0x148>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	481f      	ldr	r0, [pc, #124]	@ (800146c <main+0x134>)
 80013f0:	f005 fada 	bl	80069a8 <PWM_WriteDuty>

  	  //----------- ------------- -----------//

  	  swv.control = duty;
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <main+0x148>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <main+0x14c>)
 80013fa:	6093      	str	r3, [r2, #8]
  	  swv.measurement = temperature;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a21      	ldr	r2, [pc, #132]	@ (8001484 <main+0x14c>)
 8001400:	6013      	str	r3, [r2, #0]

  	  HAL_Delay(10);
 8001402:	200a      	movs	r0, #10
 8001404:	f000 fc12 	bl	8001c2c <HAL_Delay>

  	  sprintf(txBuffer,"Duty : %0.2f, "
  			  "Set point [degC] : %0.2f, "
  			  "Current [degC] : %0.2f\r\n",
  			  swv.control, swv.reference, swv.measurement
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <main+0x14c>)
 800140a:	689b      	ldr	r3, [r3, #8]
  	  sprintf(txBuffer,"Duty : %0.2f, "
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8bb 	bl	8000588 <__aeabi_f2d>
 8001412:	4680      	mov	r8, r0
 8001414:	4689      	mov	r9, r1
  			  swv.control, swv.reference, swv.measurement
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <main+0x14c>)
 8001418:	685b      	ldr	r3, [r3, #4]
  	  sprintf(txBuffer,"Duty : %0.2f, "
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8b4 	bl	8000588 <__aeabi_f2d>
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
  			  swv.control, swv.reference, swv.measurement
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <main+0x14c>)
 8001426:	681b      	ldr	r3, [r3, #0]
  	  sprintf(txBuffer,"Duty : %0.2f, "
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8ad 	bl	8000588 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001436:	e9cd 4500 	strd	r4, r5, [sp]
 800143a:	4642      	mov	r2, r8
 800143c:	464b      	mov	r3, r9
 800143e:	4912      	ldr	r1, [pc, #72]	@ (8001488 <main+0x150>)
 8001440:	4812      	ldr	r0, [pc, #72]	@ (800148c <main+0x154>)
 8001442:	f006 fcfd 	bl	8007e40 <siprintf>
  	   );
  	  //sprintf(txBuffer,"%0.2f", swv.measurement);
  	  UART3_SendString(txBuffer);
 8001446:	4811      	ldr	r0, [pc, #68]	@ (800148c <main+0x154>)
 8001448:	f005 fbce 	bl	8006be8 <UART3_SendString>

  	  HAL_Delay(interval_in_seconds*1000);					// Wait for 1s
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <main+0x13c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fbe6 	bl	8001c2c <HAL_Delay>
    {
 8001460:	e789      	b.n	8001376 <main+0x3e>
 8001462:	bf00      	nop
 8001464:	20000290 	.word	0x20000290
 8001468:	200003e8 	.word	0x200003e8
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000030 	.word	0x20000030
 8001474:	20000008 	.word	0x20000008
 8001478:	0800a0d8 	.word	0x0800a0d8
 800147c:	20000000 	.word	0x20000000
 8001480:	20000004 	.word	0x20000004
 8001484:	20000018 	.word	0x20000018
 8001488:	0800a10c 	.word	0x0800a10c
 800148c:	20000298 	.word	0x20000298

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	@ 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2230      	movs	r2, #48	@ 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 fdc6 	bl	8008030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014b4:	f001 fd3a 	bl	8002f2c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <SystemClock_Config+0xd4>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <SystemClock_Config+0xd4>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <SystemClock_Config+0xd4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <SystemClock_Config+0xd8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a24      	ldr	r2, [pc, #144]	@ (8001568 <SystemClock_Config+0xd8>)
 80014d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <SystemClock_Config+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014fc:	2304      	movs	r3, #4
 80014fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001500:	23d8      	movs	r3, #216	@ 0xd8
 8001502:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001508:	2303      	movs	r3, #3
 800150a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fd6b 	bl	8002fec <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800151c:	f000 f826 	bl	800156c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001520:	f001 fd14 	bl	8002f4c <HAL_PWREx_EnableOverDrive>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800152a:	f000 f81f 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	230f      	movs	r3, #15
 8001530:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001532:	2302      	movs	r3, #2
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800153a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800153e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2107      	movs	r1, #7
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fff1 	bl	8003534 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001558:	f000 f808 	bl	800156c <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	@ 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_MspInit+0x44>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a0e      	ldr	r2, [pc, #56]	@ (80015bc <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_MspInit+0x44>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_MspInit+0x44>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a08      	ldr	r2, [pc, #32]	@ (80015bc <HAL_MspInit+0x44>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_MspInit+0x44>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 fae9 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <USART3_IRQHandler+0x10>)
 8001626:	f003 ff1d 	bl	8005464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003e8 	.word	0x200003e8

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_kill>:

int _kill(int pid, int sig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800164e:	f006 fd55 	bl	80080fc <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2216      	movs	r2, #22
 8001656:	601a      	str	r2, [r3, #0]
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_exit>:

void _exit (int status)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffe7 	bl	8001644 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001676:	bf00      	nop
 8001678:	e7fd      	b.n	8001676 <_exit+0x12>

0800167a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf1      	blt.n	80016c6 <_write+0x12>
  }
  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_close>:

int _close(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_isatty>:

int _isatty(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f006 fcba 	bl	80080fc <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20050000 	.word	0x20050000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000398 	.word	0x20000398
 80017bc:	20000618 	.word	0x20000618

080017c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09a      	sub	sp, #104	@ 0x68
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001804:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	222c      	movs	r2, #44	@ 0x2c
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fc06 	bl	8008030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001824:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001826:	4a45      	ldr	r2, [pc, #276]	@ (800193c <MX_TIM1_Init+0x158>)
 8001828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800182a:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <MX_TIM1_Init+0x154>)
 800182c:	22d7      	movs	r2, #215	@ 0xd7
 800182e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001836:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001844:	4b3c      	ldr	r3, [pc, #240]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <MX_TIM1_Init+0x154>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001850:	4839      	ldr	r0, [pc, #228]	@ (8001938 <MX_TIM1_Init+0x154>)
 8001852:	f002 fc85 	bl	8004160 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800185c:	f7ff fe86 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001864:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800186a:	4619      	mov	r1, r3
 800186c:	4832      	ldr	r0, [pc, #200]	@ (8001938 <MX_TIM1_Init+0x154>)
 800186e:	f002 ff3d 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001878:	f7ff fe78 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800187c:	482e      	ldr	r0, [pc, #184]	@ (8001938 <MX_TIM1_Init+0x154>)
 800187e:	f002 fcc6 	bl	800420e <HAL_TIM_PWM_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001888:	f7ff fe70 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001898:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800189c:	4619      	mov	r1, r3
 800189e:	4826      	ldr	r0, [pc, #152]	@ (8001938 <MX_TIM1_Init+0x154>)
 80018a0:	f003 fbb8 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018aa:	f7ff fe5f 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ae:	2360      	movs	r3, #96	@ 0x60
 80018b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 80018b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d0:	2200      	movs	r2, #0
 80018d2:	4619      	mov	r1, r3
 80018d4:	4818      	ldr	r0, [pc, #96]	@ (8001938 <MX_TIM1_Init+0x154>)
 80018d6:	f002 fdf5 	bl	80044c4 <HAL_TIM_PWM_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018e0:	f7ff fe44 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <MX_TIM1_Init+0x154>)
 800191a:	f003 fc09 	bl	8005130 <HAL_TIMEx_ConfigBreakDeadTime>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001924:	f7ff fe22 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <MX_TIM1_Init+0x154>)
 800192a:	f000 f829 	bl	8001980 <HAL_TIM_MspPostInit>

}
 800192e:	bf00      	nop
 8001930:	3768      	adds	r7, #104	@ 0x68
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000039c 	.word	0x2000039c
 800193c:	40010000 	.word	0x40010000

08001940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_TIM_Base_MspInit+0x38>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10b      	bne.n	800196a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a09      	ldr	r2, [pc, #36]	@ (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40010000 	.word	0x40010000
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <HAL_TIM_MspPostInit+0x64>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11c      	bne.n	80019dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_TIM_MspPostInit+0x68>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <HAL_TIM_MspPostInit+0x68>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_TIM_MspPostInit+0x68>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019d8:	f000 fafa 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40021000 	.word	0x40021000

080019f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 80019f6:	4a15      	ldr	r2, [pc, #84]	@ (8001a4c <MX_USART3_UART_Init+0x5c>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a34:	f003 fbfa 	bl	800522c <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f7ff fd95 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200003e8 	.word	0x200003e8
 8001a4c:	40004800 	.word	0x40004800

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0aa      	sub	sp, #168	@ 0xa8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2284      	movs	r2, #132	@ 0x84
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fadd 	bl	8008030 <memset>
  if(uartHandle->Instance==USART3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a26      	ldr	r2, [pc, #152]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d144      	bne.n	8001b0a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 ff76 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a9a:	f7ff fd67 	bl	800156c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ace:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <HAL_UART_MspInit+0xcc>)
 8001af6:	f000 fa6b 	bl	8001fd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2027      	movs	r0, #39	@ 0x27
 8001b00:	f000 f99d 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b04:	2027      	movs	r0, #39	@ 0x27
 8001b06:	f000 f9b6 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	37a8      	adds	r7, #168	@ 0xa8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40004800 	.word	0x40004800
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b24:	f7ff fe4c 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	@ (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f006 fadb 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff fbf1 	bl	8001338 <main>
  bx  lr    
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001b64:	0800a598 	.word	0x0800a598
  ldr r2, =_sbss
 8001b68:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001b6c:	20000614 	.word	0x20000614

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>

08001b72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f956 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 f805 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b82:	f7ff fcf9 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f971 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 f939 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000024 	.word	0x20000024
 8001be4:	2000002c 	.word	0x2000002c
 8001be8:	20000028 	.word	0x20000028

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	2000002c 	.word	0x2000002c
 8001c10:	20000470 	.word	0x20000470

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000470 	.word	0x20000470

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff ffee 	bl	8001c14 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c52:	bf00      	nop
 8001c54:	f7ff ffde 	bl	8001c14 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000002c 	.word	0x2000002c

08001c74 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8001c78:	4b02      	ldr	r3, [pc, #8]	@ (8001c84 <HAL_GetHalVersion+0x10>)
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	01030100 	.word	0x01030100

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	05fa0000 	.word	0x05fa0000

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff feac 	bl	8001c14 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d008      	beq.n	8001edc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e052      	b.n	8001f82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0216 	bic.w	r2, r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001efa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <HAL_DMA_Abort+0x62>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2c:	e013      	b.n	8001f56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2e:	f7ff fe71 	bl	8001c14 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d90c      	bls.n	8001f56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e015      	b.n	8001f82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e4      	bne.n	8001f2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	223f      	movs	r2, #63	@ 0x3f
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e00c      	b.n	8001fc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2205      	movs	r2, #5
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e175      	b.n	80022dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8164 	bne.w	80022d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x56>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80be 	beq.w	80022d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	4b66      	ldr	r3, [pc, #408]	@ (80022f4 <HAL_GPIO_Init+0x324>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	4a65      	ldr	r2, [pc, #404]	@ (80022f4 <HAL_GPIO_Init+0x324>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002164:	6453      	str	r3, [r2, #68]	@ 0x44
 8002166:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <HAL_GPIO_Init+0x324>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002172:	4a61      	ldr	r2, [pc, #388]	@ (80022f8 <HAL_GPIO_Init+0x328>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a58      	ldr	r2, [pc, #352]	@ (80022fc <HAL_GPIO_Init+0x32c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d037      	beq.n	800220e <HAL_GPIO_Init+0x23e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <HAL_GPIO_Init+0x330>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d031      	beq.n	800220a <HAL_GPIO_Init+0x23a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_GPIO_Init+0x334>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <HAL_GPIO_Init+0x236>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a55      	ldr	r2, [pc, #340]	@ (8002308 <HAL_GPIO_Init+0x338>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d025      	beq.n	8002202 <HAL_GPIO_Init+0x232>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a54      	ldr	r2, [pc, #336]	@ (800230c <HAL_GPIO_Init+0x33c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <HAL_GPIO_Init+0x22e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a53      	ldr	r2, [pc, #332]	@ (8002310 <HAL_GPIO_Init+0x340>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x22a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_GPIO_Init+0x344>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x226>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a51      	ldr	r2, [pc, #324]	@ (8002318 <HAL_GPIO_Init+0x348>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x222>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a50      	ldr	r2, [pc, #320]	@ (800231c <HAL_GPIO_Init+0x34c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x21e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002320 <HAL_GPIO_Init+0x350>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x21a>
 80021e6:	2309      	movs	r3, #9
 80021e8:	e012      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021ea:	230a      	movs	r3, #10
 80021ec:	e010      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021ee:	2308      	movs	r3, #8
 80021f0:	e00e      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00c      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e00a      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e008      	b.n	8002210 <HAL_GPIO_Init+0x240>
 80021fe:	2304      	movs	r3, #4
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x240>
 8002202:	2303      	movs	r3, #3
 8002204:	e004      	b.n	8002210 <HAL_GPIO_Init+0x240>
 8002206:	2302      	movs	r3, #2
 8002208:	e002      	b.n	8002210 <HAL_GPIO_Init+0x240>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_GPIO_Init+0x240>
 800220e:	2300      	movs	r3, #0
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f002 0203 	and.w	r2, r2, #3
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	4093      	lsls	r3, r2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002220:	4935      	ldr	r1, [pc, #212]	@ (80022f8 <HAL_GPIO_Init+0x328>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222e:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <HAL_GPIO_Init+0x354>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002252:	4a34      	ldr	r2, [pc, #208]	@ (8002324 <HAL_GPIO_Init+0x354>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002258:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <HAL_GPIO_Init+0x354>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800227c:	4a29      	ldr	r2, [pc, #164]	@ (8002324 <HAL_GPIO_Init+0x354>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002282:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <HAL_GPIO_Init+0x354>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002324 <HAL_GPIO_Init+0x354>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_GPIO_Init+0x354>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <HAL_GPIO_Init+0x354>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	f67f ae86 	bls.w	8001ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3724      	adds	r7, #36	@ 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40022000 	.word	0x40022000
 8002320:	40022400 	.word	0x40022400
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08b      	b.n	8002486 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fef8 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	@ 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e006      	b.n	80023e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d108      	bne.n	80023fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	e007      	b.n	800240e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_I2C_Init+0x134>)
 800241a:	430b      	orrs	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800242c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69d9      	ldr	r1, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	02008000 	.word	0x02008000

08002494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80fd 	bne.w	80026b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x30>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0f6      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024cc:	f7ff fba2 	bl	8001c14 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fa0a 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0e1      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2221      	movs	r2, #33	@ 0x21
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2210      	movs	r2, #16
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2bff      	cmp	r3, #255	@ 0xff
 800251e:	d906      	bls.n	800252e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	22ff      	movs	r2, #255	@ 0xff
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e007      	b.n	800253e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002538:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <HAL_I2C_Master_Transmit+0x228>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fc05 	bl	8002d98 <I2C_TransferConfig>
 800258e:	e066      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <HAL_I2C_Master_Transmit+0x228>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fbfa 	bl	8002d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025a4:	e05b      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f9fd 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d034      	beq.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d130      	bne.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2200      	movs	r2, #0
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f976 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e04d      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2bff      	cmp	r3, #255	@ 0xff
 800261e:	d90e      	bls.n	800263e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fbae 	bl	8002d98 <I2C_TransferConfig>
 800263c:	e00f      	b.n	800265e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fb9d 	bl	8002d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d19e      	bne.n	80025a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	6a39      	ldr	r1, [r7, #32]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f9e3 	bl	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01a      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2220      	movs	r2, #32
 8002682:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_I2C_Master_Transmit+0x22c>)
 8002690:	400b      	ands	r3, r1
 8002692:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	80002000 	.word	0x80002000
 80026c0:	fe00e800 	.word	0xfe00e800

080026c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	f040 80db 	bne.w	800289c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x30>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0d4      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026fc:	f7ff fa8a 	bl	8001c14 <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2319      	movs	r3, #25
 8002708:	2201      	movs	r2, #1
 800270a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f8f2 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0bf      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2222      	movs	r2, #34	@ 0x22
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2210      	movs	r2, #16
 800272a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	893a      	ldrh	r2, [r7, #8]
 800273e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2bff      	cmp	r3, #255	@ 0xff
 800274e:	d90e      	bls.n	800276e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	b2da      	uxtb	r2, r3
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	4b52      	ldr	r3, [pc, #328]	@ (80028a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fb16 	bl	8002d98 <I2C_TransferConfig>
 800276c:	e06d      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fb05 	bl	8002d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800278e:	e05c      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	6a39      	ldr	r1, [r7, #32]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f993 	bl	8002ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e07c      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d034      	beq.n	800284a <HAL_I2C_Master_Receive+0x186>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d130      	bne.n	800284a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f880 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e04d      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2bff      	cmp	r3, #255	@ 0xff
 800280a:	d90e      	bls.n	800282a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22ff      	movs	r2, #255	@ 0xff
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002816:	b2da      	uxtb	r2, r3
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	2300      	movs	r3, #0
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fab8 	bl	8002d98 <I2C_TransferConfig>
 8002828:	e00f      	b.n	800284a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 faa7 	bl	8002d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d19d      	bne.n	8002790 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f8ed 	bl	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <HAL_I2C_Master_Receive+0x1e8>)
 800287c:	400b      	ands	r3, r1
 800287e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	80002400 	.word	0x80002400
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d103      	bne.n	80028ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d007      	beq.n	80028ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	619a      	str	r2, [r3, #24]
  }
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002908:	e03b      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	6839      	ldr	r1, [r7, #0]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f962 	bl	8002bd8 <I2C_IsErrorOccurred>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e041      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d02d      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff f975 	bl	8001c14 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d122      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d113      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	429a      	cmp	r2, r3
 800299e:	d0b4      	beq.n	800290a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b6:	e033      	b.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f90b 	bl	8002bd8 <I2C_IsErrorOccurred>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e031      	b.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d025      	beq.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7ff f91e 	bl	8001c14 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11a      	bne.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d013      	beq.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e007      	b.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d1c4      	bne.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a44:	e02f      	b.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8c4 	bl	8002bd8 <I2C_IsErrorOccurred>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02d      	b.n	8002ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7ff f8db 	bl	8001c14 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d11a      	bne.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d013      	beq.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d1c8      	bne.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ad0:	e071      	b.n	8002bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f87e 	bl	8002bd8 <I2C_IsErrorOccurred>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d13b      	bne.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d138      	bne.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d105      	bne.n	8002b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d121      	bne.n	8002b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002b44:	400b      	ands	r3, r1
 8002b46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
 8002b64:	e002      	b.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002b6c:	f7ff f852 	bl	8001c14 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d302      	bcc.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00f      	beq.n	8002bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d002      	beq.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d083      	beq.n	8002ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fe00e800 	.word	0xfe00e800

08002bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d068      	beq.n	8002cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c0c:	e049      	b.n	8002ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d045      	beq.n	8002ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe fffd 	bl	8001c14 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_IsErrorOccurred+0x54>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d13a      	bne.n	8002ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4e:	d121      	bne.n	8002c94 <I2C_IsErrorOccurred+0xbc>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c56:	d01d      	beq.n	8002c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d01a      	beq.n	8002c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c6e:	f7fe ffd1 	bl	8001c14 <HAL_GetTick>
 8002c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c74:	e00e      	b.n	8002c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c76:	f7fe ffcd 	bl	8001c14 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b19      	cmp	r3, #25
 8002c82:	d907      	bls.n	8002c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c92:	e006      	b.n	8002ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d1e9      	bne.n	8002c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d003      	beq.n	8002cb8 <I2C_IsErrorOccurred+0xe0>
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0aa      	beq.n	8002c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01c      	beq.n	8002d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fdaf 	bl	80028b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <I2C_IsErrorOccurred+0x1bc>)
 8002d5e:	400b      	ands	r3, r1
 8002d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3728      	adds	r7, #40	@ 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	fe00e800 	.word	0xfe00e800

08002d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	4613      	mov	r3, r2
 8002da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	0d5b      	lsrs	r3, r3, #21
 8002dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <I2C_TransferConfig+0x60>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	ea02 0103 	and.w	r1, r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	03ff63ff 	.word	0x03ff63ff

08002dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d138      	bne.n	8002e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e032      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d139      	bne.n	8002f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e033      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	@ 0x24
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40007000 	.word	0x40007000

08002f4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7a:	f7fe fe4b 	bl	8001c14 <HAL_GetTick>
 8002f7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f80:	e009      	b.n	8002f96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f82:	f7fe fe47 	bl	8001c14 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f90:	d901      	bls.n	8002f96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e022      	b.n	8002fdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb0:	f7fe fe30 	bl	8001c14 <HAL_GetTick>
 8002fb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fb6:	e009      	b.n	8002fcc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fb8:	f7fe fe2c 	bl	8001c14 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fc6:	d901      	bls.n	8002fcc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e007      	b.n	8002fdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd8:	d1ee      	bne.n	8002fb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000

08002fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e291      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8087 	beq.w	800311e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003010:	4b96      	ldr	r3, [pc, #600]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b04      	cmp	r3, #4
 800301a:	d00c      	beq.n	8003036 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301c:	4b93      	ldr	r3, [pc, #588]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d112      	bne.n	800304e <HAL_RCC_OscConfig+0x62>
 8003028:	4b90      	ldr	r3, [pc, #576]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003034:	d10b      	bne.n	800304e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003036:	4b8d      	ldr	r3, [pc, #564]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d06c      	beq.n	800311c <HAL_RCC_OscConfig+0x130>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d168      	bne.n	800311c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e26b      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x7a>
 8003058:	4b84      	ldr	r3, [pc, #528]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a83      	ldr	r2, [pc, #524]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	e02e      	b.n	80030c4 <HAL_RCC_OscConfig+0xd8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x9c>
 800306e:	4b7f      	ldr	r3, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7e      	ldr	r2, [pc, #504]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b7c      	ldr	r3, [pc, #496]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7b      	ldr	r2, [pc, #492]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003080:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e01d      	b.n	80030c4 <HAL_RCC_OscConfig+0xd8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0xc0>
 8003092:	4b76      	ldr	r3, [pc, #472]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a75      	ldr	r2, [pc, #468]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b73      	ldr	r3, [pc, #460]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a72      	ldr	r2, [pc, #456]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0xd8>
 80030ac:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b6c      	ldr	r3, [pc, #432]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a6b      	ldr	r2, [pc, #428]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fda2 	bl	8001c14 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe fd9e 	bl	8001c14 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e21f      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b61      	ldr	r3, [pc, #388]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe8>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fd8e 	bl	8001c14 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe fd8a 	bl	8001c14 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	@ 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e20b      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	4b57      	ldr	r3, [pc, #348]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x110>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d069      	beq.n	80031fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800312a:	4b50      	ldr	r3, [pc, #320]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b4d      	ldr	r3, [pc, #308]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11c      	bne.n	800317c <HAL_RCC_OscConfig+0x190>
 8003142:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	4b47      	ldr	r3, [pc, #284]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x17a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e1df      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b41      	ldr	r3, [pc, #260]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	493d      	ldr	r1, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	e040      	b.n	80031fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d023      	beq.n	80031cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003184:	4b39      	ldr	r3, [pc, #228]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a38      	ldr	r2, [pc, #224]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe fd40 	bl	8001c14 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003198:	f7fe fd3c 	bl	8001c14 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1bd      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4b30      	ldr	r3, [pc, #192]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4929      	ldr	r1, [pc, #164]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
 80031ca:	e018      	b.n	80031fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fd1c 	bl	8001c14 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe fd18 	bl	8001c14 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e199      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d038      	beq.n	800327c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003216:	4a15      	ldr	r2, [pc, #84]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fcf9 	bl	8001c14 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fcf5 	bl	8001c14 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e176      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003238:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x23a>
 8003244:	e01a      	b.n	800327c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 8003248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324a:	4a08      	ldr	r2, [pc, #32]	@ (800326c <HAL_RCC_OscConfig+0x280>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fcdf 	bl	8001c14 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325a:	f7fe fcdb 	bl	8001c14 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d903      	bls.n	8003270 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e15c      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
 800326c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b91      	ldr	r3, [pc, #580]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a4 	beq.w	80033d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b8b      	ldr	r3, [pc, #556]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a87      	ldr	r2, [pc, #540]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b85      	ldr	r3, [pc, #532]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b2:	4b82      	ldr	r3, [pc, #520]	@ (80034bc <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032be:	4b7f      	ldr	r3, [pc, #508]	@ (80034bc <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7e      	ldr	r2, [pc, #504]	@ (80034bc <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7fe fca3 	bl	8001c14 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe fc9f 	bl	8001c14 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	@ 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e120      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	4b75      	ldr	r3, [pc, #468]	@ (80034bc <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x31a>
 80032f8:	4b6f      	ldr	r3, [pc, #444]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a6e      	ldr	r2, [pc, #440]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
 8003304:	e02d      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x33c>
 800330e:	4b6a      	ldr	r3, [pc, #424]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	4a69      	ldr	r2, [pc, #420]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6713      	str	r3, [r2, #112]	@ 0x70
 800331a:	4b67      	ldr	r3, [pc, #412]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331e:	4a66      	ldr	r2, [pc, #408]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	@ 0x70
 8003326:	e01c      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x35e>
 8003330:	4b61      	ldr	r3, [pc, #388]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a60      	ldr	r2, [pc, #384]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
 800333c:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a5d      	ldr	r2, [pc, #372]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
 800334a:	4b5b      	ldr	r3, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a5a      	ldr	r2, [pc, #360]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	@ 0x70
 8003356:	4b58      	ldr	r3, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fc53 	bl	8001c14 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fe fc4f 	bl	8001c14 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0ce      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ee      	beq.n	8003372 <HAL_RCC_OscConfig+0x386>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fe fc3d 	bl	8001c14 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7fe fc39 	bl	8001c14 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	4a3b      	ldr	r2, [pc, #236]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a4 	beq.w	8003524 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033dc:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d06b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d149      	bne.n	8003484 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fc0a 	bl	8001c14 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fc06 	bl	8001c14 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e087      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b28      	ldr	r3, [pc, #160]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	4313      	orrs	r3, r2
 8003448:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800344e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fbda 	bl	8001c14 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fbd6 	bl	8001c14 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e057      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x478>
 8003482:	e04f      	b.n	8003524 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fbc0 	bl	8001c14 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fbbc 	bl	8001c14 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e03d      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCC_OscConfig+0x4cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x4ac>
 80034b6:	e035      	b.n	8003524 <HAL_RCC_OscConfig+0x538>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x544>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d028      	beq.n	8003520 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d121      	bne.n	8003520 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11a      	bne.n	8003520 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d111      	bne.n	8003520 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0d0      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b6a      	ldr	r3, [pc, #424]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b67      	ldr	r3, [pc, #412]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	4965      	ldr	r1, [pc, #404]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d040      	beq.n	8003658 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d115      	bne.n	8003616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e073      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b39      	ldr	r3, [pc, #228]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4936      	ldr	r1, [pc, #216]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fe faf4 	bl	8001c14 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe faf0 	bl	8001c14 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e053      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d210      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	4922      	ldr	r1, [pc, #136]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <HAL_RCC_ClockConfig+0x1cc>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	@ (8003704 <HAL_RCC_ClockConfig+0x1d0>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1d4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fa50 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800a1fc 	.word	0x0800a1fc
 8003704:	20000024 	.word	0x20000024
 8003708:	20000028 	.word	0x20000028

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b094      	sub	sp, #80	@ 0x50
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	647b      	str	r3, [r7, #68]	@ 0x44
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371c:	2300      	movs	r3, #0
 800371e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b79      	ldr	r3, [pc, #484]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80e1 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e0db      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b73      	ldr	r3, [pc, #460]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003744:	e0db      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b73      	ldr	r3, [pc, #460]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x208>)
 8003748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800374a:	e0d8      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003754:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003756:	4b6d      	ldr	r3, [pc, #436]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b6a      	ldr	r3, [pc, #424]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800376c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	633b      	str	r3, [r7, #48]	@ 0x30
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	@ 0x34
 800377a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4621      	mov	r1, r4
 8003798:	1a51      	subs	r1, r2, r1
 800379a:	6139      	str	r1, [r7, #16]
 800379c:	4629      	mov	r1, r5
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b0:	4659      	mov	r1, fp
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ba:	4651      	mov	r1, sl
 80037bc:	018a      	lsls	r2, r1, #6
 80037be:	4651      	mov	r1, sl
 80037c0:	ebb2 0801 	subs.w	r8, r2, r1
 80037c4:	4659      	mov	r1, fp
 80037c6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	462b      	mov	r3, r5
 80037ec:	eb49 0303 	adc.w	r3, r9, r3
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037fe:	4629      	mov	r1, r5
 8003800:	024b      	lsls	r3, r1, #9
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003808:	4621      	mov	r1, r4
 800380a:	024a      	lsls	r2, r1, #9
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003812:	2200      	movs	r2, #0
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800381c:	f7fd f9e4 	bl	8000be8 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4613      	mov	r3, r2
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003828:	e058      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382a:	4b38      	ldr	r3, [pc, #224]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	2200      	movs	r2, #0
 8003832:	4618      	mov	r0, r3
 8003834:	4611      	mov	r1, r2
 8003836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	f04f 0000 	mov.w	r0, #0
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	0159      	lsls	r1, r3, #5
 8003852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003856:	0150      	lsls	r0, r2, #5
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4641      	mov	r1, r8
 800385e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003862:	4649      	mov	r1, r9
 8003864:	eb63 0b01 	sbc.w	fp, r3, r1
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800387c:	ebb2 040a 	subs.w	r4, r2, sl
 8003880:	eb63 050b 	sbc.w	r5, r3, fp
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	00eb      	lsls	r3, r5, #3
 800388e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	4643      	mov	r3, r8
 800389a:	18e3      	adds	r3, r4, r3
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	464b      	mov	r3, r9
 80038a0:	eb45 0303 	adc.w	r3, r5, r3
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038b2:	4629      	mov	r1, r5
 80038b4:	028b      	lsls	r3, r1, #10
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038bc:	4621      	mov	r1, r4
 80038be:	028a      	lsls	r2, r1, #10
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c6:	2200      	movs	r2, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	61fa      	str	r2, [r7, #28]
 80038cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d0:	f7fd f98a 	bl	8000be8 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003900:	4618      	mov	r0, r3
 8003902:	3750      	adds	r7, #80	@ 0x50
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400
 8003914:	007a1200 	.word	0x007a1200

08003918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	@ (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000024 	.word	0x20000024

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	0800a20c 	.word	0x0800a20c

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffdc 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	0800a20c 	.word	0x0800a20c

08003980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d012      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a8:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	4964      	ldr	r1, [pc, #400]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039da:	4b5d      	ldr	r3, [pc, #372]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	4959      	ldr	r1, [pc, #356]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a16:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	494a      	ldr	r1, [pc, #296]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 808b 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b3a      	ldr	r3, [pc, #232]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	4a39      	ldr	r2, [pc, #228]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a70:	4b37      	ldr	r3, [pc, #220]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a7c:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a34      	ldr	r2, [pc, #208]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fe f8c4 	bl	8001c14 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fe f8c0 	bl	8001c14 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e357      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aae:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d035      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d02e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003acc:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	4a1d      	ldr	r2, [pc, #116]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003aee:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003af4:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d114      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe f888 	bl	8001c14 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f884 	bl	8001c14 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e319      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b36:	d111      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b38:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b46:	400b      	ands	r3, r1
 8003b48:	4901      	ldr	r1, [pc, #4]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40007000 	.word	0x40007000
 8003b58:	0ffffcff 	.word	0x0ffffcff
 8003b5c:	4baa      	ldr	r3, [pc, #680]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4aa9      	ldr	r2, [pc, #676]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b66:	6093      	str	r3, [r2, #8]
 8003b68:	4ba7      	ldr	r3, [pc, #668]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	49a4      	ldr	r1, [pc, #656]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b86:	4ba0      	ldr	r3, [pc, #640]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b8c:	4a9e      	ldr	r2, [pc, #632]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b96:	4b9c      	ldr	r3, [pc, #624]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	4999      	ldr	r1, [pc, #612]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb4:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc2:	4991      	ldr	r1, [pc, #580]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003be4:	4988      	ldr	r1, [pc, #544]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bf8:	4b83      	ldr	r3, [pc, #524]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c06:	4980      	ldr	r1, [pc, #512]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4977      	ldr	r1, [pc, #476]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3c:	4b72      	ldr	r3, [pc, #456]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f023 0203 	bic.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	496f      	ldr	r1, [pc, #444]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f023 020c 	bic.w	r2, r3, #12
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6c:	4966      	ldr	r1, [pc, #408]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c80:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	495e      	ldr	r1, [pc, #376]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca2:	4b59      	ldr	r3, [pc, #356]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb0:	4955      	ldr	r1, [pc, #340]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	494d      	ldr	r1, [pc, #308]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ce6:	4b48      	ldr	r3, [pc, #288]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	4944      	ldr	r1, [pc, #272]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d08:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	493c      	ldr	r1, [pc, #240]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d2a:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d38:	4933      	ldr	r1, [pc, #204]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d5a:	492b      	ldr	r1, [pc, #172]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d011      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d6e:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7c:	4922      	ldr	r1, [pc, #136]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dae:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dbc:	4912      	ldr	r1, [pc, #72]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de0:	4909      	ldr	r1, [pc, #36]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d006      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80d9 	beq.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dfc:	4b02      	ldr	r3, [pc, #8]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a01      	ldr	r2, [pc, #4]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0e:	f7fd ff01 	bl	8001c14 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e16:	f7fd fefd 	bl	8001c14 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	@ 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e194      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e28:	4b6c      	ldr	r3, [pc, #432]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d021      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e48:	4b64      	ldr	r3, [pc, #400]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e56:	4b61      	ldr	r3, [pc, #388]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5c:	0e1b      	lsrs	r3, r3, #24
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	019a      	lsls	r2, r3, #6
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	4957      	ldr	r1, [pc, #348]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eae:	d129      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ebe:	4b47      	ldr	r3, [pc, #284]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec4:	0f1b      	lsrs	r3, r3, #28
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	019a      	lsls	r2, r3, #6
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	071b      	lsls	r3, r3, #28
 8003ee4:	493d      	ldr	r1, [pc, #244]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef2:	f023 021f 	bic.w	r2, r3, #31
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4937      	ldr	r1, [pc, #220]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f10:	4b32      	ldr	r3, [pc, #200]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f16:	0e1b      	lsrs	r3, r3, #24
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f24:	0f1b      	lsrs	r3, r3, #28
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	019a      	lsls	r2, r3, #6
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	071b      	lsls	r3, r3, #28
 8003f44:	4925      	ldr	r1, [pc, #148]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	019a      	lsls	r2, r3, #6
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	071b      	lsls	r3, r3, #28
 8003f74:	4919      	ldr	r1, [pc, #100]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd fe44 	bl	8001c14 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f90:	f7fd fe40 	bl	8001c14 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0d7      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80cd 	bne.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fd fe27 	bl	8001c14 <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fca:	f7fd fe23 	bl	8001c14 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	@ 0x64
 8003fd6:	d903      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0ba      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003fdc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fec:	d0ed      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d12a      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004016:	4b51      	ldr	r3, [pc, #324]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004024:	4b4d      	ldr	r3, [pc, #308]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	0f1b      	lsrs	r3, r3, #28
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	061b      	lsls	r3, r3, #24
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	4944      	ldr	r1, [pc, #272]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004052:	4b42      	ldr	r3, [pc, #264]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004058:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	493d      	ldr	r1, [pc, #244]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d022      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004080:	d11d      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004082:	4b36      	ldr	r3, [pc, #216]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	0e1b      	lsrs	r3, r3, #24
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004090:	4b32      	ldr	r3, [pc, #200]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	0f1b      	lsrs	r3, r3, #28
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	019a      	lsls	r2, r3, #6
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	061b      	lsls	r3, r3, #24
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	071b      	lsls	r3, r3, #28
 80040b6:	4929      	ldr	r1, [pc, #164]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d028      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040ca:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	0e1b      	lsrs	r3, r3, #24
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040d8:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	019a      	lsls	r2, r3, #6
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	071b      	lsls	r3, r3, #28
 80040fe:	4917      	ldr	r1, [pc, #92]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004106:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	4911      	ldr	r1, [pc, #68]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0e      	ldr	r2, [pc, #56]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd fd74 	bl	8001c14 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004130:	f7fd fd70 	bl	8001c14 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	@ 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e007      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800414a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800414e:	d1ef      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e049      	b.n	8004206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fbda 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fb6e 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e049      	b.n	80042b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f841 	bl	80042bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 fb17 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_TIM_PWM_Start+0x24>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e03c      	b.n	800436e <HAL_TIM_PWM_Start+0x9e>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d109      	bne.n	800430e <HAL_TIM_PWM_Start+0x3e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e02f      	b.n	800436e <HAL_TIM_PWM_Start+0x9e>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d109      	bne.n	8004328 <HAL_TIM_PWM_Start+0x58>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e022      	b.n	800436e <HAL_TIM_PWM_Start+0x9e>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d109      	bne.n	8004342 <HAL_TIM_PWM_Start+0x72>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e015      	b.n	800436e <HAL_TIM_PWM_Start+0x9e>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b10      	cmp	r3, #16
 8004346:	d109      	bne.n	800435c <HAL_TIM_PWM_Start+0x8c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	bf14      	ite	ne
 8004354:	2301      	movne	r3, #1
 8004356:	2300      	moveq	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e008      	b.n	800436e <HAL_TIM_PWM_Start+0x9e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e092      	b.n	800449c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0xb6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004384:	e023      	b.n	80043ce <HAL_TIM_PWM_Start+0xfe>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0xc6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004394:	e01b      	b.n	80043ce <HAL_TIM_PWM_Start+0xfe>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Start+0xd6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a4:	e013      	b.n	80043ce <HAL_TIM_PWM_Start+0xfe>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0xe6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_PWM_Start+0xfe>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xf6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c4:	e003      	b.n	80043ce <HAL_TIM_PWM_Start+0xfe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fdf6 	bl	8004fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_TIM_PWM_Start+0x1d4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIM_PWM_Start+0x120>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2f      	ldr	r2, [pc, #188]	@ (80044a8 <HAL_TIM_PWM_Start+0x1d8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x124>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_PWM_Start+0x126>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a25      	ldr	r2, [pc, #148]	@ (80044a4 <HAL_TIM_PWM_Start+0x1d4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441c:	d01d      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a22      	ldr	r2, [pc, #136]	@ (80044ac <HAL_TIM_PWM_Start+0x1dc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a20      	ldr	r2, [pc, #128]	@ (80044b0 <HAL_TIM_PWM_Start+0x1e0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_TIM_PWM_Start+0x1e4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <HAL_TIM_PWM_Start+0x1d8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <HAL_TIM_PWM_Start+0x1e8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIM_PWM_Start+0x18a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <HAL_TIM_PWM_Start+0x1ec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d115      	bne.n	8004486 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_TIM_PWM_Start+0x1f0>)
 8004462:	4013      	ands	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d015      	beq.n	8004498 <HAL_TIM_PWM_Start+0x1c8>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004472:	d011      	beq.n	8004498 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	e008      	b.n	8004498 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e000      	b.n	800449a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40001800 	.word	0x40001800
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0ff      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b14      	cmp	r3, #20
 80044ee:	f200 80f0 	bhi.w	80046d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044f2:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	0800454d 	.word	0x0800454d
 80044fc:	080046d3 	.word	0x080046d3
 8004500:	080046d3 	.word	0x080046d3
 8004504:	080046d3 	.word	0x080046d3
 8004508:	0800458d 	.word	0x0800458d
 800450c:	080046d3 	.word	0x080046d3
 8004510:	080046d3 	.word	0x080046d3
 8004514:	080046d3 	.word	0x080046d3
 8004518:	080045cf 	.word	0x080045cf
 800451c:	080046d3 	.word	0x080046d3
 8004520:	080046d3 	.word	0x080046d3
 8004524:	080046d3 	.word	0x080046d3
 8004528:	0800460f 	.word	0x0800460f
 800452c:	080046d3 	.word	0x080046d3
 8004530:	080046d3 	.word	0x080046d3
 8004534:	080046d3 	.word	0x080046d3
 8004538:	08004651 	.word	0x08004651
 800453c:	080046d3 	.word	0x080046d3
 8004540:	080046d3 	.word	0x080046d3
 8004544:	080046d3 	.word	0x080046d3
 8004548:	08004691 	.word	0x08004691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fa40 	bl	80049d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0208 	orr.w	r2, r2, #8
 8004566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6999      	ldr	r1, [r3, #24]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
      break;
 800458a:	e0a5      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa92 	bl	8004abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
      break;
 80045cc:	e084      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fae9 	bl	8004bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0208 	orr.w	r2, r2, #8
 80045e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0204 	bic.w	r2, r2, #4
 80045f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
      break;
 800460c:	e064      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fb3f 	bl	8004c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	021a      	lsls	r2, r3, #8
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	61da      	str	r2, [r3, #28]
      break;
 800464e:	e043      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb76 	bl	8004d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0208 	orr.w	r2, r2, #8
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0204 	bic.w	r2, r2, #4
 800467a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800468e:	e023      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fba8 	bl	8004dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	021a      	lsls	r2, r3, #8
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046d0:	e002      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
      break;
 80046d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIM_ConfigClockSource+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e0b4      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x186>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4b56      	ldr	r3, [pc, #344]	@ (800487c <HAL_TIM_ConfigClockSource+0x190>)
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004740:	d03e      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004746:	f200 8087 	bhi.w	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474e:	f000 8086 	beq.w	800485e <HAL_TIM_ConfigClockSource+0x172>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	d87f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b70      	cmp	r3, #112	@ 0x70
 800475a:	d01a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xa6>
 800475c:	2b70      	cmp	r3, #112	@ 0x70
 800475e:	d87b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b60      	cmp	r3, #96	@ 0x60
 8004762:	d050      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x11a>
 8004764:	2b60      	cmp	r3, #96	@ 0x60
 8004766:	d877      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b50      	cmp	r3, #80	@ 0x50
 800476a:	d03c      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xfa>
 800476c:	2b50      	cmp	r3, #80	@ 0x50
 800476e:	d873      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b40      	cmp	r3, #64	@ 0x40
 8004772:	d058      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x13a>
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d86f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b30      	cmp	r3, #48	@ 0x30
 800477a:	d064      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b30      	cmp	r3, #48	@ 0x30
 800477e:	d86b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d060      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d867      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05c      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d05a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	e062      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	f000 fbf1 	bl	8004f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
      break;
 80047be:	e04f      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	f000 fbda 	bl	8004f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e2:	609a      	str	r2, [r3, #8]
      break;
 80047e4:	e03c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 fb4e 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2150      	movs	r1, #80	@ 0x50
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fba7 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004804:	e02c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	461a      	mov	r2, r3
 8004814:	f000 fb6d 	bl	8004ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2160      	movs	r1, #96	@ 0x60
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fb97 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004824:	e01c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	461a      	mov	r2, r3
 8004834:	f000 fb2e 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2140      	movs	r1, #64	@ 0x40
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb87 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004844:	e00c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 fb7e 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004856:	e003      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e000      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800485e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	fffeff88 	.word	0xfffeff88

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a46      	ldr	r2, [pc, #280]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a43      	ldr	r2, [pc, #268]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a42      	ldr	r2, [pc, #264]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a41      	ldr	r2, [pc, #260]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a32      	ldr	r2, [pc, #200]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a31      	ldr	r2, [pc, #196]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a30      	ldr	r2, [pc, #192]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <TIM_Base_SetConfig+0x140>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <TIM_Base_SetConfig+0x144>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <TIM_Base_SetConfig+0x148>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <TIM_Base_SetConfig+0x14c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <TIM_Base_SetConfig+0x150>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a29      	ldr	r2, [pc, #164]	@ (80049d4 <TIM_Base_SetConfig+0x154>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	611a      	str	r2, [r3, #16]
  }
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	40001800 	.word	0x40001800
 80049d0:	40001c00 	.word	0x40001c00
 80049d4:	40002000 	.word	0x40002000

080049d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0201 	bic.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <TIM_OC1_SetConfig+0xd8>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 0302 	bic.w	r3, r3, #2
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a21      	ldr	r2, [pc, #132]	@ (8004ab4 <TIM_OC1_SetConfig+0xdc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC1_SetConfig+0x64>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a20      	ldr	r2, [pc, #128]	@ (8004ab8 <TIM_OC1_SetConfig+0xe0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10c      	bne.n	8004a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0308 	bic.w	r3, r3, #8
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <TIM_OC1_SetConfig+0xdc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC1_SetConfig+0x8e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a15      	ldr	r2, [pc, #84]	@ (8004ab8 <TIM_OC1_SetConfig+0xe0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d111      	bne.n	8004a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	fffeff8f 	.word	0xfffeff8f
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400

08004abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0210 	bic.w	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba0 <TIM_OC2_SetConfig+0xe4>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0320 	bic.w	r3, r3, #32
 8004b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC2_SetConfig+0x68>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <TIM_OC2_SetConfig+0xec>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10d      	bne.n	8004b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a18      	ldr	r2, [pc, #96]	@ (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC2_SetConfig+0x94>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <TIM_OC2_SetConfig+0xec>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d113      	bne.n	8004b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	feff8fff 	.word	0xfeff8fff
 8004ba4:	40010000 	.word	0x40010000
 8004ba8:	40010400 	.word	0x40010400

08004bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c8c <TIM_OC3_SetConfig+0xe0>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a22      	ldr	r2, [pc, #136]	@ (8004c90 <TIM_OC3_SetConfig+0xe4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC3_SetConfig+0x66>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <TIM_OC3_SetConfig+0xe8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10d      	bne.n	8004c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <TIM_OC3_SetConfig+0xe4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_OC3_SetConfig+0x92>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <TIM_OC3_SetConfig+0xe8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d113      	bne.n	8004c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	fffeff8f 	.word	0xfffeff8f
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <TIM_OC4_SetConfig+0xa4>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a13      	ldr	r2, [pc, #76]	@ (8004d40 <TIM_OC4_SetConfig+0xa8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC4_SetConfig+0x68>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <TIM_OC4_SetConfig+0xac>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	feff8fff 	.word	0xfeff8fff
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40010400 	.word	0x40010400

08004d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <TIM_OC5_SetConfig+0x98>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a12      	ldr	r2, [pc, #72]	@ (8004de4 <TIM_OC5_SetConfig+0x9c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC5_SetConfig+0x5e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a11      	ldr	r2, [pc, #68]	@ (8004de8 <TIM_OC5_SetConfig+0xa0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d109      	bne.n	8004dba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	fffeff8f 	.word	0xfffeff8f
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40010400 	.word	0x40010400

08004dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <TIM_OC6_SetConfig+0x9c>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	051b      	lsls	r3, r3, #20
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <TIM_OC6_SetConfig+0xa0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_OC6_SetConfig+0x60>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <TIM_OC6_SetConfig+0xa4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d109      	bne.n	8004e60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	feff8fff 	.word	0xfeff8fff
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40010400 	.word	0x40010400

08004e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 030a 	bic.w	r3, r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 0210 	bic.w	r2, r3, #16
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f043 0307 	orr.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	609a      	str	r2, [r3, #8]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2201      	movs	r2, #1
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	401a      	ands	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005028:	2302      	movs	r3, #2
 800502a:	e06d      	b.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509e:	d01d      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a15      	ldr	r2, [pc, #84]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10c      	bne.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40001800 	.word	0x40001800

08005130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005148:	2302      	movs	r3, #2
 800514a:	e065      	b.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a16      	ldr	r2, [pc, #88]	@ (8005224 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a14      	ldr	r2, [pc, #80]	@ (8005228 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d115      	bne.n	8005206 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400

0800522c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc fbfe 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	@ 0x24
 8005258:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fe4c 	bl	8005f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fbe5 	bl	8005a48 <UART_SetConfig>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e01b      	b.n	80052c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fecb 	bl	8006054 <UART_CheckIdleState>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	@ 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d177      	bne.n	80053d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x24>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e070      	b.n	80053d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2221      	movs	r2, #33	@ 0x21
 80052fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fc89 	bl	8001c14 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x68>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e02f      	b.n	800539a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	@ 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fedc 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e03b      	b.n	80053d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	3302      	adds	r3, #2
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e007      	b.n	8005388 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3301      	adds	r3, #1
 8005386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1c9      	bne.n	800533a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2140      	movs	r1, #64	@ 0x40
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fea6 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e005      	b.n	80053d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	@ 0x28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d132      	bne.n	8005458 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_UART_Receive_IT+0x24>
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e02b      	b.n	800545a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	613b      	str	r3, [r7, #16]
   return(result);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69f9      	ldr	r1, [r7, #28]
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	61bb      	str	r3, [r7, #24]
   return(result);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	461a      	mov	r2, r3
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fec4 	bl	80061dc <UART_Start_Receive_IT>
 8005454:	4603      	mov	r3, r0
 8005456:	e000      	b.n	800545a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3728      	adds	r7, #40	@ 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b0ba      	sub	sp, #232	@ 0xe8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800548a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800548e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005492:	4013      	ands	r3, r2
 8005494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d115      	bne.n	80054cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00f      	beq.n	80054cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8297 	beq.w	80059f0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
      }
      return;
 80054ca:	e291      	b.n	80059f0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8117 	beq.w	8005704 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80054e6:	4b85      	ldr	r3, [pc, #532]	@ (80056fc <HAL_UART_IRQHandler+0x298>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 810a 	beq.w	8005704 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d011      	beq.n	8005520 <HAL_UART_IRQHandler+0xbc>
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005516:	f043 0201 	orr.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d011      	beq.n	8005550 <HAL_UART_IRQHandler+0xec>
 800552c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2202      	movs	r2, #2
 800553e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005546:	f043 0204 	orr.w	r2, r3, #4
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d011      	beq.n	8005580 <HAL_UART_IRQHandler+0x11c>
 800555c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2204      	movs	r2, #4
 800556e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005576:	f043 0202 	orr.w	r2, r3, #2
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800559c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2208      	movs	r2, #8
 80055aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d012      	beq.n	80055ee <HAL_UART_IRQHandler+0x18a>
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00c      	beq.n	80055ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 81fd 	beq.w	80059f4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005628:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04f      	beq.n	80056e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fe8e 	bl	8006368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d141      	bne.n	80056de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800568a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800569e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1d9      	bne.n	800565a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d013      	beq.n	80056d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	4a13      	ldr	r2, [pc, #76]	@ (8005700 <HAL_UART_IRQHandler+0x29c>)
 80056b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fc fc65 	bl	8001f8a <HAL_DMA_Abort_IT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e00f      	b.n	80056f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9a0 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e00b      	b.n	80056f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f99c 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e007      	b.n	80056f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f998 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80056f4:	e17e      	b.n	80059f4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f6:	bf00      	nop
    return;
 80056f8:	e17c      	b.n	80059f4 <HAL_UART_IRQHandler+0x590>
 80056fa:	bf00      	nop
 80056fc:	04000120 	.word	0x04000120
 8005700:	08006431 	.word	0x08006431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	2b01      	cmp	r3, #1
 800570a:	f040 814c 	bne.w	80059a6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8145 	beq.w	80059a6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 813e 	beq.w	80059a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	f040 80b6 	bne.w	80058ae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800574e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8150 	beq.w	80059f8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800575e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005762:	429a      	cmp	r2, r3
 8005764:	f080 8148 	bcs.w	80059f8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800576e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577c:	f000 8086 	beq.w	800588c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1da      	bne.n	8005780 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3308      	adds	r3, #8
 80057d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e1      	bne.n	80057ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800582a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800582c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e3      	bne.n	8005806 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800585a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800585c:	f023 0310 	bic.w	r3, r3, #16
 8005860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800586e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005870:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800587c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e4      	bne.n	800584c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005886:	4618      	mov	r0, r3
 8005888:	f7fc fb0f 	bl	8001eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8c2 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ac:	e0a4      	b.n	80059f8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8096 	beq.w	80059fc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80058d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8091 	beq.w	80059fc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800590a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	623b      	str	r3, [r7, #32]
   return(result);
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005934:	633a      	str	r2, [r7, #48]	@ 0x30
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800593a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e3      	bne.n	8005910 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	60fb      	str	r3, [r7, #12]
   return(result);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	69b9      	ldr	r1, [r7, #24]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	617b      	str	r3, [r7, #20]
   return(result);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e4      	bne.n	800595c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f846 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059a4:	e02a      	b.n	80059fc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01c      	beq.n	8005a00 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
    }
    return;
 80059ce:	e017      	b.n	8005a00 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_UART_IRQHandler+0x59e>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fd37 	bl	800645c <UART_EndTransmit_IT>
    return;
 80059ee:	e008      	b.n	8005a02 <HAL_UART_IRQHandler+0x59e>
      return;
 80059f0:	bf00      	nop
 80059f2:	e006      	b.n	8005a02 <HAL_UART_IRQHandler+0x59e>
    return;
 80059f4:	bf00      	nop
 80059f6:	e004      	b.n	8005a02 <HAL_UART_IRQHandler+0x59e>
      return;
 80059f8:	bf00      	nop
 80059fa:	e002      	b.n	8005a02 <HAL_UART_IRQHandler+0x59e>
      return;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <HAL_UART_IRQHandler+0x59e>
    return;
 8005a00:	bf00      	nop
  }

}
 8005a02:	37e8      	adds	r7, #232	@ 0xe8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4ba6      	ldr	r3, [pc, #664]	@ (8005d0c <UART_SetConfig+0x2c4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a94      	ldr	r2, [pc, #592]	@ (8005d10 <UART_SetConfig+0x2c8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d120      	bne.n	8005b06 <UART_SetConfig+0xbe>
 8005ac4:	4b93      	ldr	r3, [pc, #588]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d816      	bhi.n	8005b00 <UART_SetConfig+0xb8>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <UART_SetConfig+0x90>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005aef 	.word	0x08005aef
 8005ae4:	08005afb 	.word	0x08005afb
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e150      	b.n	8005d90 <UART_SetConfig+0x348>
 8005aee:	2302      	movs	r3, #2
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e14d      	b.n	8005d90 <UART_SetConfig+0x348>
 8005af4:	2304      	movs	r3, #4
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e14a      	b.n	8005d90 <UART_SetConfig+0x348>
 8005afa:	2308      	movs	r3, #8
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e147      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b00:	2310      	movs	r3, #16
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e144      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a83      	ldr	r2, [pc, #524]	@ (8005d18 <UART_SetConfig+0x2d0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d132      	bne.n	8005b76 <UART_SetConfig+0x12e>
 8005b10:	4b80      	ldr	r3, [pc, #512]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d828      	bhi.n	8005b70 <UART_SetConfig+0x128>
 8005b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <UART_SetConfig+0xdc>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b59 	.word	0x08005b59
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b71 	.word	0x08005b71
 8005b44:	08005b5f 	.word	0x08005b5f
 8005b48:	08005b71 	.word	0x08005b71
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b6b 	.word	0x08005b6b
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e118      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e115      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b64:	2304      	movs	r3, #4
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e112      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e10f      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b70:	2310      	movs	r3, #16
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e10c      	b.n	8005d90 <UART_SetConfig+0x348>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a68      	ldr	r2, [pc, #416]	@ (8005d1c <UART_SetConfig+0x2d4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d120      	bne.n	8005bc2 <UART_SetConfig+0x17a>
 8005b80:	4b64      	ldr	r3, [pc, #400]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b8a:	2b30      	cmp	r3, #48	@ 0x30
 8005b8c:	d013      	beq.n	8005bb6 <UART_SetConfig+0x16e>
 8005b8e:	2b30      	cmp	r3, #48	@ 0x30
 8005b90:	d814      	bhi.n	8005bbc <UART_SetConfig+0x174>
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d009      	beq.n	8005baa <UART_SetConfig+0x162>
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d810      	bhi.n	8005bbc <UART_SetConfig+0x174>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <UART_SetConfig+0x15c>
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d006      	beq.n	8005bb0 <UART_SetConfig+0x168>
 8005ba2:	e00b      	b.n	8005bbc <UART_SetConfig+0x174>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e0f2      	b.n	8005d90 <UART_SetConfig+0x348>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e0ef      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e0ec      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e0e9      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e0e6      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a56      	ldr	r2, [pc, #344]	@ (8005d20 <UART_SetConfig+0x2d8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d120      	bne.n	8005c0e <UART_SetConfig+0x1c6>
 8005bcc:	4b51      	ldr	r3, [pc, #324]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bd8:	d013      	beq.n	8005c02 <UART_SetConfig+0x1ba>
 8005bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bdc:	d814      	bhi.n	8005c08 <UART_SetConfig+0x1c0>
 8005bde:	2b80      	cmp	r3, #128	@ 0x80
 8005be0:	d009      	beq.n	8005bf6 <UART_SetConfig+0x1ae>
 8005be2:	2b80      	cmp	r3, #128	@ 0x80
 8005be4:	d810      	bhi.n	8005c08 <UART_SetConfig+0x1c0>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <UART_SetConfig+0x1a8>
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	d006      	beq.n	8005bfc <UART_SetConfig+0x1b4>
 8005bee:	e00b      	b.n	8005c08 <UART_SetConfig+0x1c0>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e0cc      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e0c9      	b.n	8005d90 <UART_SetConfig+0x348>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e0c6      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c02:	2308      	movs	r3, #8
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e0c3      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e0c0      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a44      	ldr	r2, [pc, #272]	@ (8005d24 <UART_SetConfig+0x2dc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d125      	bne.n	8005c64 <UART_SetConfig+0x21c>
 8005c18:	4b3e      	ldr	r3, [pc, #248]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c26:	d017      	beq.n	8005c58 <UART_SetConfig+0x210>
 8005c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c2c:	d817      	bhi.n	8005c5e <UART_SetConfig+0x216>
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c32:	d00b      	beq.n	8005c4c <UART_SetConfig+0x204>
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c38:	d811      	bhi.n	8005c5e <UART_SetConfig+0x216>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <UART_SetConfig+0x1fe>
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c42:	d006      	beq.n	8005c52 <UART_SetConfig+0x20a>
 8005c44:	e00b      	b.n	8005c5e <UART_SetConfig+0x216>
 8005c46:	2300      	movs	r3, #0
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e0a1      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e09e      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c52:	2304      	movs	r3, #4
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e09b      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e098      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c5e:	2310      	movs	r3, #16
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e095      	b.n	8005d90 <UART_SetConfig+0x348>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2f      	ldr	r2, [pc, #188]	@ (8005d28 <UART_SetConfig+0x2e0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d125      	bne.n	8005cba <UART_SetConfig+0x272>
 8005c6e:	4b29      	ldr	r3, [pc, #164]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c7c:	d017      	beq.n	8005cae <UART_SetConfig+0x266>
 8005c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c82:	d817      	bhi.n	8005cb4 <UART_SetConfig+0x26c>
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c88:	d00b      	beq.n	8005ca2 <UART_SetConfig+0x25a>
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8e:	d811      	bhi.n	8005cb4 <UART_SetConfig+0x26c>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <UART_SetConfig+0x254>
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c98:	d006      	beq.n	8005ca8 <UART_SetConfig+0x260>
 8005c9a:	e00b      	b.n	8005cb4 <UART_SetConfig+0x26c>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e076      	b.n	8005d90 <UART_SetConfig+0x348>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e073      	b.n	8005d90 <UART_SetConfig+0x348>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e070      	b.n	8005d90 <UART_SetConfig+0x348>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e06d      	b.n	8005d90 <UART_SetConfig+0x348>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e06a      	b.n	8005d90 <UART_SetConfig+0x348>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <UART_SetConfig+0x2e4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d138      	bne.n	8005d36 <UART_SetConfig+0x2ee>
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <UART_SetConfig+0x2cc>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cd2:	d017      	beq.n	8005d04 <UART_SetConfig+0x2bc>
 8005cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cd8:	d82a      	bhi.n	8005d30 <UART_SetConfig+0x2e8>
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cde:	d00b      	beq.n	8005cf8 <UART_SetConfig+0x2b0>
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce4:	d824      	bhi.n	8005d30 <UART_SetConfig+0x2e8>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <UART_SetConfig+0x2aa>
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cee:	d006      	beq.n	8005cfe <UART_SetConfig+0x2b6>
 8005cf0:	e01e      	b.n	8005d30 <UART_SetConfig+0x2e8>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e04b      	b.n	8005d90 <UART_SetConfig+0x348>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e048      	b.n	8005d90 <UART_SetConfig+0x348>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e045      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d04:	2308      	movs	r3, #8
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e042      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d0a:	bf00      	nop
 8005d0c:	efff69f3 	.word	0xefff69f3
 8005d10:	40011000 	.word	0x40011000
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	40004800 	.word	0x40004800
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	40005000 	.word	0x40005000
 8005d28:	40011400 	.word	0x40011400
 8005d2c:	40007800 	.word	0x40007800
 8005d30:	2310      	movs	r3, #16
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e02c      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a72      	ldr	r2, [pc, #456]	@ (8005f04 <UART_SetConfig+0x4bc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d125      	bne.n	8005d8c <UART_SetConfig+0x344>
 8005d40:	4b71      	ldr	r3, [pc, #452]	@ (8005f08 <UART_SetConfig+0x4c0>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d4e:	d017      	beq.n	8005d80 <UART_SetConfig+0x338>
 8005d50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d54:	d817      	bhi.n	8005d86 <UART_SetConfig+0x33e>
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5a:	d00b      	beq.n	8005d74 <UART_SetConfig+0x32c>
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d60:	d811      	bhi.n	8005d86 <UART_SetConfig+0x33e>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <UART_SetConfig+0x326>
 8005d66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d6a:	d006      	beq.n	8005d7a <UART_SetConfig+0x332>
 8005d6c:	e00b      	b.n	8005d86 <UART_SetConfig+0x33e>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e00d      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d74:	2302      	movs	r3, #2
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e00a      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	77fb      	strb	r3, [r7, #31]
 8005d7e:	e007      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d80:	2308      	movs	r3, #8
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e004      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d86:	2310      	movs	r3, #16
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e001      	b.n	8005d90 <UART_SetConfig+0x348>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d98:	d15b      	bne.n	8005e52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d828      	bhi.n	8005df2 <UART_SetConfig+0x3aa>
 8005da0:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <UART_SetConfig+0x360>)
 8005da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da6:	bf00      	nop
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fd fdb0 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61b8      	str	r0, [r7, #24]
        break;
 8005dd2:	e013      	b.n	8005dfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fd fdc0 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	61b8      	str	r0, [r7, #24]
        break;
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8005f0c <UART_SetConfig+0x4c4>)
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fd fc93 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8005de6:	61b8      	str	r0, [r7, #24]
        break;
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dee:	61bb      	str	r3, [r7, #24]
        break;
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d074      	beq.n	8005eec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	005a      	lsls	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d916      	bls.n	8005e4c <UART_SetConfig+0x404>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e24:	d212      	bcs.n	8005e4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f023 030f 	bic.w	r3, r3, #15
 8005e2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	89fa      	ldrh	r2, [r7, #14]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	e04f      	b.n	8005eec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77bb      	strb	r3, [r7, #30]
 8005e50:	e04c      	b.n	8005eec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d828      	bhi.n	8005eaa <UART_SetConfig+0x462>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x418>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	08005eab 	.word	0x08005eab
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005eab 	.word	0x08005eab
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005eab 	.word	0x08005eab
 8005e80:	08005ea3 	.word	0x08005ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fd fd54 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e013      	b.n	8005eb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fd fd64 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8005e90:	61b8      	str	r0, [r7, #24]
        break;
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b1d      	ldr	r3, [pc, #116]	@ (8005f0c <UART_SetConfig+0x4c4>)
 8005e96:	61bb      	str	r3, [r7, #24]
        break;
 8005e98:	e00c      	b.n	8005eb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fd fc37 	bl	800370c <HAL_RCC_GetSysClockFreq>
 8005e9e:	61b8      	str	r0, [r7, #24]
        break;
 8005ea0:	e008      	b.n	8005eb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea6:	61bb      	str	r3, [r7, #24]
        break;
 8005ea8:	e004      	b.n	8005eb4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8005eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	085a      	lsrs	r2, r3, #1
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d909      	bls.n	8005ee8 <UART_SetConfig+0x4a0>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eda:	d205      	bcs.n	8005ee8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	e001      	b.n	8005eec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ef8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40007c00 	.word	0x40007c00
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	00f42400 	.word	0x00f42400

08005f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800600e:	d10a      	bne.n	8006026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	@ 0x30
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006064:	f7fb fdd6 	bl	8001c14 <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d12e      	bne.n	80060d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f83b 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d021      	beq.n	80060d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	69b9      	ldr	r1, [r7, #24]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	617b      	str	r3, [r7, #20]
   return(result);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e6      	bne.n	8006092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e011      	b.n	80060fa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3728      	adds	r7, #40	@ 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006112:	e04f      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d04b      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611c:	f7fb fd7a 	bl	8001c14 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <UART_WaitOnFlagUntilTimeout+0x30>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e04e      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d037      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d034      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b40      	cmp	r3, #64	@ 0x40
 800614e:	d031      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b08      	cmp	r3, #8
 800615c:	d110      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2208      	movs	r2, #8
 8006164:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f8fe 	bl	8006368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2208      	movs	r2, #8
 8006170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e029      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800618a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800618e:	d111      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f8e4 	bl	8006368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e00f      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4013      	ands	r3, r2
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d0a0      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b097      	sub	sp, #92	@ 0x5c
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620e:	d10e      	bne.n	800622e <UART_Start_Receive_IT+0x52>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <UART_Start_Receive_IT+0x48>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800621e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006222:	e02d      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	22ff      	movs	r2, #255	@ 0xff
 8006228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800622c:	e028      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10d      	bne.n	8006252 <UART_Start_Receive_IT+0x76>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <UART_Start_Receive_IT+0x6c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22ff      	movs	r2, #255	@ 0xff
 8006242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006246:	e01b      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	227f      	movs	r2, #127	@ 0x7f
 800624c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006250:	e016      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625a:	d10d      	bne.n	8006278 <UART_Start_Receive_IT+0x9c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <UART_Start_Receive_IT+0x92>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	227f      	movs	r2, #127	@ 0x7f
 8006268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800626c:	e008      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	223f      	movs	r2, #63	@ 0x3f
 8006272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006276:	e003      	b.n	8006280 <UART_Start_Receive_IT+0xa4>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2222      	movs	r2, #34	@ 0x22
 800628c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80062b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80062be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e5      	bne.n	8006290 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d107      	bne.n	80062de <UART_Start_Receive_IT+0x102>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a21      	ldr	r2, [pc, #132]	@ (8006360 <UART_Start_Receive_IT+0x184>)
 80062da:	669a      	str	r2, [r3, #104]	@ 0x68
 80062dc:	e002      	b.n	80062e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a20      	ldr	r2, [pc, #128]	@ (8006364 <UART_Start_Receive_IT+0x188>)
 80062e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d019      	beq.n	8006320 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630a:	637b      	str	r3, [r7, #52]	@ 0x34
 800630c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_Start_Receive_IT+0x110>
 800631e:	e018      	b.n	8006352 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	613b      	str	r3, [r7, #16]
   return(result);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f043 0320 	orr.w	r3, r3, #32
 8006334:	653b      	str	r3, [r7, #80]	@ 0x50
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	61bb      	str	r3, [r7, #24]
   return(result);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	375c      	adds	r7, #92	@ 0x5c
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	08006659 	.word	0x08006659
 8006364:	080064b1 	.word	0x080064b1

08006368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b095      	sub	sp, #84	@ 0x54
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006390:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800639c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e5      	bne.n	80063a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d118      	bne.n	8006410 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0310 	bic.w	r3, r3, #16
 80063f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	613b      	str	r3, [r7, #16]
   return(result);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e6      	bne.n	80063de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006424:	bf00      	nop
 8006426:	3754      	adds	r7, #84	@ 0x54
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff fae4 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	60bb      	str	r3, [r7, #8]
   return(result);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6979      	ldr	r1, [r7, #20]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	613b      	str	r3, [r7, #16]
   return(result);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fab0 	bl	8005a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a8:	bf00      	nop
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b09c      	sub	sp, #112	@ 0x70
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c8:	2b22      	cmp	r3, #34	@ 0x22
 80064ca:	f040 80b9 	bne.w	8006640 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80064dc:	b2d9      	uxtb	r1, r3
 80064de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	400a      	ands	r2, r1
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 809c 	bne.w	8006650 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800652c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800653c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800655a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	667b      	str	r3, [r7, #100]	@ 0x64
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800656a:	647a      	str	r2, [r7, #68]	@ 0x44
 800656c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d018      	beq.n	80065d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	623b      	str	r3, [r7, #32]
   return(result);
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e6      	bne.n	80065a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d12e      	bne.n	8006638 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f023 0310 	bic.w	r3, r3, #16
 80065f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	617b      	str	r3, [r7, #20]
   return(result);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e6      	bne.n	80065e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d103      	bne.n	8006628 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2210      	movs	r2, #16
 8006626:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f9fd 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006636:	e00b      	b.n	8006650 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fa fdfd 	bl	8001238 <HAL_UART_RxCpltCallback>
}
 800663e:	e007      	b.n	8006650 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	619a      	str	r2, [r3, #24]
}
 8006650:	bf00      	nop
 8006652:	3770      	adds	r7, #112	@ 0x70
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b09c      	sub	sp, #112	@ 0x70
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006666:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006670:	2b22      	cmp	r3, #34	@ 0x22
 8006672:	f040 80b9 	bne.w	80067e8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006686:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800668a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800668e:	4013      	ands	r3, r2
 8006690:	b29a      	uxth	r2, r3
 8006692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006694:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	1c9a      	adds	r2, r3, #2
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 809c 	bne.w	80067f8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066de:	657b      	str	r3, [r7, #84]	@ 0x54
 80066e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	663b      	str	r3, [r7, #96]	@ 0x60
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006712:	643a      	str	r2, [r7, #64]	@ 0x40
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d018      	beq.n	800677a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	61fb      	str	r3, [r7, #28]
   return(result);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800675c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006768:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800676c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e6      	bne.n	8006748 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677e:	2b01      	cmp	r3, #1
 8006780:	d12e      	bne.n	80067e0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	60bb      	str	r3, [r7, #8]
   return(result);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0310 	bic.w	r3, r3, #16
 800679c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	613b      	str	r3, [r7, #16]
   return(result);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e6      	bne.n	8006788 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d103      	bne.n	80067d0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2210      	movs	r2, #16
 80067ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f929 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067de:	e00b      	b.n	80067f8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fa fd29 	bl	8001238 <HAL_UART_RxCpltCallback>
}
 80067e6:	e007      	b.n	80067f8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	619a      	str	r2, [r3, #24]
}
 80067f8:	bf00      	nop
 80067fa:	3770      	adds	r7, #112	@ 0x70
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <PID_Init>:
/* Private function ----------------------------------------------------------*/

/* Public function -----------------------------------------------------------*/

void PID_Init(PID_HandleTypeDef* hpid)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  hpid->e_prev = 0.0f;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	615a      	str	r2, [r3, #20]
  hpid->e_int = 0.0f;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	619a      	str	r2, [r3, #24]
  hpid->d_prev = 0.0f;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	61da      	str	r2, [r3, #28]
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <PID_GetOutput>:
 
float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 800682c:	b480      	push	{r7}
 800682e:	b089      	sub	sp, #36	@ 0x24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	ed87 0a02 	vstr	s0, [r7, #8]
 8006838:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 800683c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006840:	edd7 7a01 	vldr	s15, [r7, #4]
 8006844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006848:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	ed93 7a06 	vldr	s14, [r3, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	edd3 6a01 	vldr	s13, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	edd3 7a04 	vldr	s15, [r3, #16]
 800685e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006862:	edd7 7a06 	vldr	s15, [r7, #24]
 8006866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800686a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	ed93 7a02 	vldr	s14, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	edd3 7a05 	vldr	s15, [r3, #20]
 800688a:	edd7 6a06 	vldr	s13, [r7, #24]
 800688e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	edd3 6a03 	vldr	s13, [r3, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	edd3 7a04 	vldr	s15, [r3, #16]
 80068a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80068b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	ed93 7a00 	vldr	s14, [r3]
 80068ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80068d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80068dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80068e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ea:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80068f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80068f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006900:	dd03      	ble.n	800690a <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e00f      	b.n	800692a <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006910:	ed97 7a05 	vldr	s14, [r7, #20]
 8006914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691c:	d503      	bpl.n	8006926 <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e001      	b.n	800692a <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 800692a:	ed97 7a05 	vldr	s14, [r7, #20]
 800692e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006932:	eeb4 7a67 	vcmp.f32	s14, s15
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	d013      	beq.n	8006964 <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	ed93 7a06 	vldr	s14, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	edd3 6a01 	vldr	s13, [r3, #4]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	edd3 7a04 	vldr	s15, [r3, #16]
 800694e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006952:	edd7 7a06 	vldr	s15, [r7, #24]
 8006956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	ee07 3a90 	vmov	s15, r3
}
 800696a:	eeb0 0a67 	vmov.f32	s0, s15
 800696e:	3724      	adds	r7, #36	@ 0x24
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	edd3 7a02 	vldr	s15, [r3, #8]
 8006986:	eeb0 0a67 	vmov.f32	s0, s15
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f80c 	bl	80069a8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f7fd fc98 	bl	80042d0 <HAL_TIM_PWM_Start>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80069b4:	edd7 7a00 	vldr	s15, [r7]
 80069b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c0:	d503      	bpl.n	80069ca <PWM_WriteDuty+0x22>
    duty = 0.0;
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e00a      	b.n	80069e0 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80069ca:	edd7 7a00 	vldr	s15, [r7]
 80069ce:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006a8c <PWM_WriteDuty+0xe4>
 80069d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	dd01      	ble.n	80069e0 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80069dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006a90 <PWM_WriteDuty+0xe8>)
 80069de:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	3301      	adds	r3, #1
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069f8:	edd7 7a00 	vldr	s15, [r7]
 80069fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a00:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8006a8c <PWM_WriteDuty+0xe4>
 8006a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a0c:	ee17 3a90 	vmov	r3, s15
 8006a10:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <PWM_WriteDuty+0x7e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006a24:	e02c      	b.n	8006a80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d105      	bne.n	8006a3a <PWM_WriteDuty+0x92>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006a38:	e022      	b.n	8006a80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d105      	bne.n	8006a4e <PWM_WriteDuty+0xa6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006a4c:	e018      	b.n	8006a80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b0c      	cmp	r3, #12
 8006a54:	d105      	bne.n	8006a62 <PWM_WriteDuty+0xba>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8006a60:	e00e      	b.n	8006a80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d105      	bne.n	8006a76 <PWM_WriteDuty+0xce>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8006a74:	e004      	b.n	8006a80 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	42c80000 	.word	0x42c80000
 8006a90:	42c80000 	.word	0x42c80000

08006a94 <scd30_start_periodic_measurement>:

#define SCD30_MAX_BUFFER_WORDS 24
#define SCD30_CMD_SINGLE_WORD_BUF_LEN \
    (SENSIRION_COMMAND_SIZE + SENSIRION_WORD_SIZE + CRC8_LEN)

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure_mbar) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	80fb      	strh	r3, [r7, #6]
    if (ambient_pressure_mbar &&
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <scd30_start_periodic_measurement+0x26>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
    if (ambient_pressure_mbar &&
 8006aa6:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8006aaa:	d303      	bcc.n	8006ab4 <scd30_start_periodic_measurement+0x20>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8006ab2:	d902      	bls.n	8006aba <scd30_start_periodic_measurement+0x26>
        /* out of allowable range */
        return STATUS_FAIL;
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	e006      	b.n	8006ac8 <scd30_start_periodic_measurement+0x34>
    }

    return sensirion_i2c_write_cmd_with_args(
 8006aba:	2061      	movs	r0, #97	@ 0x61
 8006abc:	1dba      	adds	r2, r7, #6
 8006abe:	2301      	movs	r3, #1
 8006ac0:	2110      	movs	r1, #16
 8006ac2:	f000 fad7 	bl	8007074 <sensirion_i2c_write_cmd_with_args>
 8006ac6:	4603      	mov	r3, r0
        SCD30_I2C_ADDRESS, SCD30_CMD_START_PERIODIC_MEASUREMENT,
        &ambient_pressure_mbar, SENSIRION_NUM_WORDS(ambient_pressure_mbar));
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <scd30_read_measurement>:
    return sensirion_i2c_write_cmd(SCD30_I2C_ADDRESS,
                                   SCD30_CMD_STOP_PERIODIC_MEASUREMENT);
}

int16_t scd30_read_measurement(float* co2_ppm, float* temperature,
                               float* humidity) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t data[3][4];

    error =
        sensirion_i2c_write_cmd(SCD30_I2C_ADDRESS, SCD30_CMD_READ_MEASUREMENT);
 8006adc:	2361      	movs	r3, #97	@ 0x61
 8006ade:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 faab 	bl	800703e <sensirion_i2c_write_cmd>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	83fb      	strh	r3, [r7, #30]
    if (error != NO_ERROR)
 8006aec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <scd30_read_measurement+0x2a>
        return error;
 8006af4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006af8:	e030      	b.n	8006b5c <scd30_read_measurement+0x8c>

    error = sensirion_i2c_read_words_as_bytes(SCD30_I2C_ADDRESS, &data[0][0],
 8006afa:	2061      	movs	r0, #97	@ 0x61
 8006afc:	f107 0310 	add.w	r3, r7, #16
 8006b00:	2206      	movs	r2, #6
 8006b02:	4619      	mov	r1, r3
 8006b04:	f000 f9f1 	bl	8006eea <sensirion_i2c_read_words_as_bytes>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	83fb      	strh	r3, [r7, #30]
                                              SENSIRION_NUM_WORDS(data));
    if (error != NO_ERROR)
 8006b0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <scd30_read_measurement+0x4a>
        return error;
 8006b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006b18:	e020      	b.n	8006b5c <scd30_read_measurement+0x8c>

    *co2_ppm = sensirion_bytes_to_float(data[0]);
 8006b1a:	f107 0310 	add.w	r3, r7, #16
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f923 	bl	8006d6a <sensirion_bytes_to_float>
 8006b24:	eef0 7a40 	vmov.f32	s15, s0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_bytes_to_float(data[1]);
 8006b2e:	f107 0310 	add.w	r3, r7, #16
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 f918 	bl	8006d6a <sensirion_bytes_to_float>
 8006b3a:	eef0 7a40 	vmov.f32	s15, s0
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_bytes_to_float(data[2]);
 8006b44:	f107 0310 	add.w	r3, r7, #16
 8006b48:	3308      	adds	r3, #8
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f90d 	bl	8006d6a <sensirion_bytes_to_float>
 8006b50:	eef0 7a40 	vmov.f32	s15, s0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	edc3 7a00 	vstr	s15, [r3]

    return NO_ERROR;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval_sec) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	80fb      	strh	r3, [r7, #6]
    int16_t error;

    if (interval_sec < 2 || interval_sec > 1800) {
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d903      	bls.n	8006b7c <scd30_set_measurement_interval+0x18>
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8006b7a:	d902      	bls.n	8006b82 <scd30_set_measurement_interval+0x1e>
        /* out of allowable range */
        return STATUS_FAIL;
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	e00e      	b.n	8006ba0 <scd30_set_measurement_interval+0x3c>
    }

    error = sensirion_i2c_write_cmd_with_args(
 8006b82:	2061      	movs	r0, #97	@ 0x61
 8006b84:	1dba      	adds	r2, r7, #6
 8006b86:	2301      	movs	r3, #1
 8006b88:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 8006b8c:	f000 fa72 	bl	8007074 <sensirion_i2c_write_cmd_with_args>
 8006b90:	4603      	mov	r3, r0
 8006b92:	81fb      	strh	r3, [r7, #14]
        SCD30_I2C_ADDRESS, SCD30_CMD_SET_MEASUREMENT_INTERVAL, &interval_sec,
        SENSIRION_NUM_WORDS(interval_sec));
    sensirion_sleep_usec(SCD30_WRITE_DELAY_US);
 8006b94:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8006b98:	f000 fb28 	bl	80071ec <sensirion_sleep_usec>

    return error;
 8006b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <scd30_get_data_ready>:

int16_t scd30_get_data_ready(uint16_t* data_ready) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	6078      	str	r0, [r7, #4]
    return sensirion_i2c_delayed_read_cmd(
 8006bb0:	2061      	movs	r0, #97	@ 0x61
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006bbc:	f240 2102 	movw	r1, #514	@ 0x202
 8006bc0:	f000 fa79 	bl	80070b6 <sensirion_i2c_delayed_read_cmd>
 8006bc4:	4603      	mov	r3, r0
        SCD30_I2C_ADDRESS, SCD30_CMD_GET_DATA_READY, 3000, data_ready,
        SENSIRION_NUM_WORDS(*data_ready));
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <scd30_probe>:

uint8_t scd30_get_configured_address() {
    return SCD30_I2C_ADDRESS;
}

int16_t scd30_probe() {
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
    uint16_t data_ready;

    /* try to read data-ready state */
    return scd30_get_data_ready(&data_ready);
 8006bd4:	1dbb      	adds	r3, r7, #6
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff ffe6 	bl	8006ba8 <scd30_get_data_ready>
 8006bdc:	4603      	mov	r3, r0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UART3_SendString>:

/* USER CODE BEGIN V */

/* USER CODE END V */

void UART3_SendString(char* str) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7f9 fb5d 	bl	80002b0 <strlen>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4803      	ldr	r0, [pc, #12]	@ (8006c10 <UART3_SendString+0x28>)
 8006c02:	f7fe fb61 	bl	80052c8 <HAL_UART_Transmit>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200003e8 	.word	0x200003e8

08006c14 <scd_Setup>:



void scd_Setup(void){
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0

    while (scd30_probe() != NO_ERROR) {
 8006c18:	e005      	b.n	8006c26 <scd_Setup+0x12>
    	UART3_SendString("SCD30 sensor probing failed\n");
 8006c1a:	480e      	ldr	r0, [pc, #56]	@ (8006c54 <scd_Setup+0x40>)
 8006c1c:	f7ff ffe4 	bl	8006be8 <UART3_SendString>
        sensirion_sleep_usec(1000000u);
 8006c20:	480d      	ldr	r0, [pc, #52]	@ (8006c58 <scd_Setup+0x44>)
 8006c22:	f000 fae3 	bl	80071ec <sensirion_sleep_usec>
    while (scd30_probe() != NO_ERROR) {
 8006c26:	f7ff ffd2 	bl	8006bce <scd30_probe>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f4      	bne.n	8006c1a <scd_Setup+0x6>
    }
    UART3_SendString("SCD30 sensor probing successful\n");
 8006c30:	480a      	ldr	r0, [pc, #40]	@ (8006c5c <scd_Setup+0x48>)
 8006c32:	f7ff ffd9 	bl	8006be8 <UART3_SendString>

    scd30_set_measurement_interval(interval_in_seconds);
 8006c36:	4b0a      	ldr	r3, [pc, #40]	@ (8006c60 <scd_Setup+0x4c>)
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff ff92 	bl	8006b64 <scd30_set_measurement_interval>
    sensirion_sleep_usec(20000u);
 8006c40:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8006c44:	f000 fad2 	bl	80071ec <sensirion_sleep_usec>
    scd30_start_periodic_measurement(0);
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f7ff ff23 	bl	8006a94 <scd30_start_periodic_measurement>
}
 8006c4e:	bf00      	nop
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	0800a150 	.word	0x0800a150
 8006c58:	000f4240 	.word	0x000f4240
 8006c5c:	0800a170 	.word	0x0800a170
 8006c60:	20000008 	.word	0x20000008

08006c64 <scd_WaitForAndReadSensorData>:

int8_t scd_WaitForAndReadSensorData(uint32_t interval_in_seconds,
                             float* co2_ppm,
                             float* temperature,
                             float* relative_humidity) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
    uint16_t data_ready = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	827b      	strh	r3, [r7, #18]
    uint16_t timeout = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	82fb      	strh	r3, [r7, #22]
    int8_t err;

    /* Poll data_ready flag until data is available. Allow 20% more than
     * the measurement interval to account for clock imprecision of the sensor.
     */
    for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1200000); ++timeout) {
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	82fb      	strh	r3, [r7, #22]
 8006c7e:	e020      	b.n	8006cc2 <scd_WaitForAndReadSensorData+0x5e>
        err = scd30_get_data_ready(&data_ready);
 8006c80:	f107 0312 	add.w	r3, r7, #18
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff ff8f 	bl	8006ba8 <scd30_get_data_ready>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	757b      	strb	r3, [r7, #21]
        if (err != NO_ERROR) {
 8006c8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00c      	beq.n	8006cb0 <scd_WaitForAndReadSensorData+0x4c>
        	sprintf(txBuffer,"Error reading data_ready flag: %i\n", err);
 8006c96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	491f      	ldr	r1, [pc, #124]	@ (8006d1c <scd_WaitForAndReadSensorData+0xb8>)
 8006c9e:	4820      	ldr	r0, [pc, #128]	@ (8006d20 <scd_WaitForAndReadSensorData+0xbc>)
 8006ca0:	f001 f8ce 	bl	8007e40 <siprintf>
        	UART3_SendString(txBuffer);
 8006ca4:	481e      	ldr	r0, [pc, #120]	@ (8006d20 <scd_WaitForAndReadSensorData+0xbc>)
 8006ca6:	f7ff ff9f 	bl	8006be8 <UART3_SendString>
            return err;  // Return error code
 8006caa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006cae:	e030      	b.n	8006d12 <scd_WaitForAndReadSensorData+0xae>
        }
        if (data_ready) {
 8006cb0:	8a7b      	ldrh	r3, [r7, #18]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d111      	bne.n	8006cda <scd_WaitForAndReadSensorData+0x76>
            break;  // Data is ready
        }
        sensirion_sleep_usec(100000);  // Wait for 100 ms
 8006cb6:	481b      	ldr	r0, [pc, #108]	@ (8006d24 <scd_WaitForAndReadSensorData+0xc0>)
 8006cb8:	f000 fa98 	bl	80071ec <sensirion_sleep_usec>
    for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1200000); ++timeout) {
 8006cbc:	8afb      	ldrh	r3, [r7, #22]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	82fb      	strh	r3, [r7, #22]
 8006cc2:	8afb      	ldrh	r3, [r7, #22]
 8006cc4:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <scd_WaitForAndReadSensorData+0xc0>)
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a16      	ldr	r2, [pc, #88]	@ (8006d28 <scd_WaitForAndReadSensorData+0xc4>)
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	4299      	cmp	r1, r3
 8006cd6:	d3d3      	bcc.n	8006c80 <scd_WaitForAndReadSensorData+0x1c>
 8006cd8:	e000      	b.n	8006cdc <scd_WaitForAndReadSensorData+0x78>
            break;  // Data is ready
 8006cda:	bf00      	nop
    }

    if (!data_ready) {
 8006cdc:	8a7b      	ldrh	r3, [r7, #18]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d105      	bne.n	8006cee <scd_WaitForAndReadSensorData+0x8a>
    	UART3_SendString("Timeout waiting for data_ready flag\n");
 8006ce2:	4812      	ldr	r0, [pc, #72]	@ (8006d2c <scd_WaitForAndReadSensorData+0xc8>)
 8006ce4:	f7ff ff80 	bl	8006be8 <UART3_SendString>
        return -1;  // Timeout error
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e011      	b.n	8006d12 <scd_WaitForAndReadSensorData+0xae>
    }

    /* Read CO2, temperature, and relative humidity */
    err = scd30_read_measurement(co2_ppm, temperature, relative_humidity);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f7ff feec 	bl	8006ad0 <scd30_read_measurement>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	757b      	strb	r3, [r7, #21]
    if (err != NO_ERROR) {
 8006cfc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <scd_WaitForAndReadSensorData+0xac>
    	UART3_SendString("Error reading measurement\n");
 8006d04:	480a      	ldr	r0, [pc, #40]	@ (8006d30 <scd_WaitForAndReadSensorData+0xcc>)
 8006d06:	f7ff ff6f 	bl	8006be8 <UART3_SendString>
        return err;  // Return error code
 8006d0a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006d0e:	e000      	b.n	8006d12 <scd_WaitForAndReadSensorData+0xae>
//    sprintf(txBuffer,"Measured CO2 concentration: %0.2f ppm, "
//           "Measured temperature: %0.2f °C, "
//           "Measured humidity: %0.2f %%RH\n",
//           *co2_ppm, *temperature, *relative_humidity);
//    UART2_SendString(txBuffer);
    return 0;  // Success
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	0800a194 	.word	0x0800a194
 8006d20:	20000298 	.word	0x20000298
 8006d24:	000186a0 	.word	0x000186a0
 8006d28:	00124f80 	.word	0x00124f80
 8006d2c:	0800a1b8 	.word	0x0800a1b8
 8006d30:	0800a1e0 	.word	0x0800a1e0

08006d34 <sensirion_bytes_to_uint32_t>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	061a      	lsls	r2, r3, #24
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3301      	adds	r3, #1
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3302      	adds	r3, #2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8006d54:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	3203      	adds	r2, #3
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	4313      	orrs	r3, r2
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <sensirion_bytes_to_float>:

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff ffde 	bl	8006d34 <sensirion_bytes_to_uint32_t>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	ee07 3a90 	vmov	s15, r3
}
 8006d82:	eeb0 0a67 	vmov.f32	s0, s15
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <sensirion_common_generate_crc>:

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8006d98:	23ff      	movs	r3, #255	@ 0xff
 8006d9a:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	81fb      	strh	r3, [r7, #14]
 8006da0:	e021      	b.n	8006de6 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8006da2:	89fb      	ldrh	r3, [r7, #14]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	7b7b      	ldrb	r3, [r7, #13]
 8006dac:	4053      	eors	r3, r2
 8006dae:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006db0:	2308      	movs	r3, #8
 8006db2:	733b      	strb	r3, [r7, #12]
 8006db4:	e011      	b.n	8006dda <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8006db6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da07      	bge.n	8006dce <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8006dbe:	7b7b      	ldrb	r3, [r7, #13]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8006dc8:	b25b      	sxtb	r3, r3
 8006dca:	737b      	strb	r3, [r7, #13]
 8006dcc:	e002      	b.n	8006dd4 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8006dce:	7b7b      	ldrb	r3, [r7, #13]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006dd4:	7b3b      	ldrb	r3, [r7, #12]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	733b      	strb	r3, [r7, #12]
 8006dda:	7b3b      	ldrb	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1ea      	bne.n	8006db6 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8006de0:	89fb      	ldrh	r3, [r7, #14]
 8006de2:	3301      	adds	r3, #1
 8006de4:	81fb      	strh	r3, [r7, #14]
 8006de6:	89fa      	ldrh	r2, [r7, #14]
 8006de8:	887b      	ldrh	r3, [r7, #2]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d3d9      	bcc.n	8006da2 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8006dee:	7b7b      	ldrb	r3, [r7, #13]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	807b      	strh	r3, [r7, #2]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff ffbb 	bl	8006d8c <sensirion_common_generate_crc>
 8006e16:	4603      	mov	r3, r0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	787b      	ldrb	r3, [r7, #1]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d002      	beq.n	8006e26 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	e000      	b.n	8006e28 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	607a      	str	r2, [r7, #4]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	817b      	strh	r3, [r7, #10]
 8006e40:	4613      	mov	r3, r2
 8006e42:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8006e48:	897b      	ldrh	r3, [r7, #10]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	8abb      	ldrh	r3, [r7, #20]
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	82b9      	strh	r1, [r7, #20]
 8006e54:	4619      	mov	r1, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	440b      	add	r3, r1
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8006e5e:	8abb      	ldrh	r3, [r7, #20]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	82ba      	strh	r2, [r7, #20]
 8006e64:	461a      	mov	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	897a      	ldrh	r2, [r7, #10]
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8006e70:	2300      	movs	r3, #0
 8006e72:	75fb      	strb	r3, [r7, #23]
 8006e74:	e030      	b.n	8006ed8 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	8abb      	ldrh	r3, [r7, #20]
 8006e86:	1c59      	adds	r1, r3, #1
 8006e88:	82b9      	strh	r1, [r7, #20]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	440b      	add	r3, r1
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	8abb      	ldrh	r3, [r7, #20]
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	82b9      	strh	r1, [r7, #20]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	440b      	add	r3, r1
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8006eae:	8abb      	ldrh	r3, [r7, #20]
 8006eb0:	3b02      	subs	r3, #2
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ff67 	bl	8006d8c <sensirion_common_generate_crc>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8006ec2:	8abb      	ldrh	r3, [r7, #20]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	82ba      	strh	r2, [r7, #20]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	7cfa      	ldrb	r2, [r7, #19]
 8006ed0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	75fb      	strb	r3, [r7, #23]
 8006ed8:	7dfa      	ldrb	r2, [r7, #23]
 8006eda:	7a7b      	ldrb	r3, [r7, #9]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d3ca      	bcc.n	8006e76 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8006ee0:	8abb      	ldrh	r3, [r7, #20]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b096      	sub	sp, #88	@ 0x58
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	6039      	str	r1, [r7, #0]
 8006ef4:	71fb      	strb	r3, [r7, #7]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8006efa:	88bb      	ldrh	r3, [r7, #4]
 8006efc:	461a      	mov	r2, r3
 8006efe:	0052      	lsls	r2, r2, #1
 8006f00:	4413      	add	r3, r2
 8006f02:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8006f0c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 f931 	bl	800717c <sensirion_i2c_read>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8006f20:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8006f28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f2c:	e047      	b.n	8006fbe <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8006f3a:	e039      	b.n	8006fb0 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8006f3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f42:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8006f44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f48:	3302      	adds	r3, #2
 8006f4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f4c:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	2102      	movs	r1, #2
 8006f54:	f7ff ff52 	bl	8006dfc <sensirion_common_check_crc>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 8006f5e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8006f66:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f6a:	e028      	b.n	8006fbe <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8006f6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f72:	441a      	add	r2, r3
 8006f74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006f78:	1c59      	adds	r1, r3, #1
 8006f7a:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8006f7e:	4619      	mov	r1, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	440b      	add	r3, r1
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8006f88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f90:	441a      	add	r2, r3
 8006f92:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	440b      	add	r3, r1
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8006fa6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006faa:	3303      	adds	r3, #3
 8006fac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006fb0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8006fb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d3bf      	bcc.n	8006f3c <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3758      	adds	r7, #88	@ 0x58
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	6039      	str	r1, [r7, #0]
 8006fd0:	71fb      	strb	r3, [r7, #7]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8006fd6:	88ba      	ldrh	r2, [r7, #4]
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff84 	bl	8006eea <sensirion_i2c_read_words_as_bytes>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8006fe6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <sensirion_i2c_read_words+0x2e>
        return ret;
 8006fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ff2:	e020      	b.n	8007036 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	e017      	b.n	800702a <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	4413      	add	r3, r2
 8007002:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	b21a      	sxth	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3301      	adds	r3, #1
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b21b      	sxth	r3, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	b219      	sxth	r1, r3
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	4413      	add	r3, r2
 8007020:	b28a      	uxth	r2, r1
 8007022:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	3301      	adds	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	b29b      	uxth	r3, r3
 800702e:	88ba      	ldrh	r2, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d8e2      	bhi.n	8006ffa <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	4603      	mov	r3, r0
 8007046:	460a      	mov	r2, r1
 8007048:	71fb      	strb	r3, [r7, #7]
 800704a:	4613      	mov	r3, r2
 800704c:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 800704e:	88b9      	ldrh	r1, [r7, #4]
 8007050:	f107 000c 	add.w	r0, r7, #12
 8007054:	2300      	movs	r3, #0
 8007056:	2200      	movs	r2, #0
 8007058:	f7ff feea 	bl	8006e30 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 800705c:	f107 010c 	add.w	r1, r7, #12
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2202      	movs	r2, #2
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f8a5 	bl	80071b4 <sensirion_i2c_write>
 800706a:	4603      	mov	r3, r0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	@ 0x38
 8007078:	af00      	add	r7, sp, #0
 800707a:	60ba      	str	r2, [r7, #8]
 800707c:	461a      	mov	r2, r3
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	460b      	mov	r3, r1
 8007084:	81bb      	strh	r3, [r7, #12]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	89b9      	ldrh	r1, [r7, #12]
 8007090:	f107 0014 	add.w	r0, r7, #20
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	f7ff fecb 	bl	8006e30 <sensirion_fill_cmd_send_buf>
 800709a:	4603      	mov	r3, r0
 800709c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 800709e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070a0:	f107 0114 	add.w	r1, r7, #20
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f884 	bl	80071b4 <sensirion_i2c_write>
 80070ac:	4603      	mov	r3, r0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3738      	adds	r7, #56	@ 0x38
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b086      	sub	sp, #24
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60ba      	str	r2, [r7, #8]
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	460b      	mov	r3, r1
 80070c6:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 80070c8:	89b9      	ldrh	r1, [r7, #12]
 80070ca:	f107 0014 	add.w	r0, r7, #20
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7ff fead 	bl	8006e30 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80070d6:	f107 0114 	add.w	r1, r7, #20
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2202      	movs	r2, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f868 	bl	80071b4 <sensirion_i2c_write>
 80070e4:	4603      	mov	r3, r0
 80070e6:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 80070e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 80070f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070f4:	e00c      	b.n	8007110 <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 80070fc:	68b8      	ldr	r0, [r7, #8]
 80070fe:	f000 f875 	bl	80071ec <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8007102:	8c3a      	ldrh	r2, [r7, #32]
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ff5c 	bl	8006fc6 <sensirion_i2c_read_words>
 800710e:	4603      	mov	r3, r0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800711e:	4b14      	ldr	r3, [pc, #80]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007120:	4a14      	ldr	r2, [pc, #80]	@ (8007174 <sensirion_i2c_init+0x5c>)
 8007122:	601a      	str	r2, [r3, #0]
//    hi2c1.Init.ClockSpeed = 100000;
//    hi2c1.Init.DutyCycle = 0x00000000U;
    hi2c1.Init.OwnAddress1 = 0;
 8007124:	4b12      	ldr	r3, [pc, #72]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800712a:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <sensirion_i2c_init+0x58>)
 800712c:	2201      	movs	r2, #1
 800712e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007130:	4b0f      	ldr	r3, [pc, #60]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007132:	2200      	movs	r2, #0
 8007134:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8007136:	4b0e      	ldr	r3, [pc, #56]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007138:	2200      	movs	r2, #0
 800713a:	615a      	str	r2, [r3, #20]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <sensirion_i2c_init+0x58>)
 800713e:	2200      	movs	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007142:	4b0b      	ldr	r3, [pc, #44]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007144:	2200      	movs	r2, #0
 8007146:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
//    __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007148:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <sensirion_i2c_init+0x60>)
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	4a0a      	ldr	r2, [pc, #40]	@ (8007178 <sensirion_i2c_init+0x60>)
 800714e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007152:	6413      	str	r3, [r2, #64]	@ 0x40
 8007154:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <sensirion_i2c_init+0x60>)
 8007156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
    HAL_I2C_Init(&hi2c1);
 8007160:	4803      	ldr	r0, [pc, #12]	@ (8007170 <sensirion_i2c_init+0x58>)
 8007162:	f7fb f8fb 	bl	800235c <HAL_I2C_Init>
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000474 	.word	0x20000474
 8007174:	40005400 	.word	0x40005400
 8007178:	40023800 	.word	0x40023800

0800717c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af02      	add	r7, sp, #8
 8007182:	4603      	mov	r3, r0
 8007184:	6039      	str	r1, [r7, #0]
 8007186:	71fb      	strb	r3, [r7, #7]
 8007188:	4613      	mov	r3, r2
 800718a:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	b29b      	uxth	r3, r3
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	b299      	uxth	r1, r3
 8007194:	88bb      	ldrh	r3, [r7, #4]
 8007196:	2264      	movs	r2, #100	@ 0x64
 8007198:	9200      	str	r2, [sp, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4804      	ldr	r0, [pc, #16]	@ (80071b0 <sensirion_i2c_read+0x34>)
 800719e:	f7fb fa91 	bl	80026c4 <HAL_I2C_Master_Receive>
 80071a2:	4603      	mov	r3, r0
 80071a4:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000474 	.word	0x20000474

080071b4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	4603      	mov	r3, r0
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	b299      	uxth	r1, r3
 80071cc:	88bb      	ldrh	r3, [r7, #4]
 80071ce:	2264      	movs	r2, #100	@ 0x64
 80071d0:	9200      	str	r2, [sp, #0]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	4804      	ldr	r0, [pc, #16]	@ (80071e8 <sensirion_i2c_write+0x34>)
 80071d6:	f7fb f95d 	bl	8002494 <HAL_I2C_Master_Transmit>
 80071da:	4603      	mov	r3, r0
 80071dc:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000474 	.word	0x20000474

080071ec <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a12      	ldr	r2, [pc, #72]	@ (8007240 <sensirion_sleep_usec+0x54>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	099b      	lsrs	r3, r3, #6
 80071fe:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4b0f      	ldr	r3, [pc, #60]	@ (8007240 <sensirion_sleep_usec+0x54>)
 8007204:	fba3 1302 	umull	r1, r3, r3, r2
 8007208:	099b      	lsrs	r3, r3, #6
 800720a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <sensirion_sleep_usec+0x32>
        msec++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 800721e:	f7fa fd29 	bl	8001c74 <HAL_GetHalVersion>
 8007222:	4603      	mov	r3, r0
 8007224:	4a07      	ldr	r2, [pc, #28]	@ (8007244 <sensirion_sleep_usec+0x58>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d202      	bcs.n	8007230 <sensirion_sleep_usec+0x44>
        msec++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7fa fcfb 	bl	8001c2c <HAL_Delay>
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	10624dd3 	.word	0x10624dd3
 8007244:	01010100 	.word	0x01010100

08007248 <_strtol_l.constprop.0>:
 8007248:	2b24      	cmp	r3, #36	@ 0x24
 800724a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800724e:	4686      	mov	lr, r0
 8007250:	4690      	mov	r8, r2
 8007252:	d801      	bhi.n	8007258 <_strtol_l.constprop.0+0x10>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d106      	bne.n	8007266 <_strtol_l.constprop.0+0x1e>
 8007258:	f000 ff50 	bl	80080fc <__errno>
 800725c:	2316      	movs	r3, #22
 800725e:	6003      	str	r3, [r0, #0]
 8007260:	2000      	movs	r0, #0
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	4834      	ldr	r0, [pc, #208]	@ (8007338 <_strtol_l.constprop.0+0xf0>)
 8007268:	460d      	mov	r5, r1
 800726a:	462a      	mov	r2, r5
 800726c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007270:	5d06      	ldrb	r6, [r0, r4]
 8007272:	f016 0608 	ands.w	r6, r6, #8
 8007276:	d1f8      	bne.n	800726a <_strtol_l.constprop.0+0x22>
 8007278:	2c2d      	cmp	r4, #45	@ 0x2d
 800727a:	d12d      	bne.n	80072d8 <_strtol_l.constprop.0+0x90>
 800727c:	782c      	ldrb	r4, [r5, #0]
 800727e:	2601      	movs	r6, #1
 8007280:	1c95      	adds	r5, r2, #2
 8007282:	f033 0210 	bics.w	r2, r3, #16
 8007286:	d109      	bne.n	800729c <_strtol_l.constprop.0+0x54>
 8007288:	2c30      	cmp	r4, #48	@ 0x30
 800728a:	d12a      	bne.n	80072e2 <_strtol_l.constprop.0+0x9a>
 800728c:	782a      	ldrb	r2, [r5, #0]
 800728e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007292:	2a58      	cmp	r2, #88	@ 0x58
 8007294:	d125      	bne.n	80072e2 <_strtol_l.constprop.0+0x9a>
 8007296:	786c      	ldrb	r4, [r5, #1]
 8007298:	2310      	movs	r3, #16
 800729a:	3502      	adds	r5, #2
 800729c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072a4:	2200      	movs	r2, #0
 80072a6:	fbbc f9f3 	udiv	r9, ip, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80072b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072b4:	2f09      	cmp	r7, #9
 80072b6:	d81b      	bhi.n	80072f0 <_strtol_l.constprop.0+0xa8>
 80072b8:	463c      	mov	r4, r7
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	dd27      	ble.n	800730e <_strtol_l.constprop.0+0xc6>
 80072be:	1c57      	adds	r7, r2, #1
 80072c0:	d007      	beq.n	80072d2 <_strtol_l.constprop.0+0x8a>
 80072c2:	4581      	cmp	r9, r0
 80072c4:	d320      	bcc.n	8007308 <_strtol_l.constprop.0+0xc0>
 80072c6:	d101      	bne.n	80072cc <_strtol_l.constprop.0+0x84>
 80072c8:	45a2      	cmp	sl, r4
 80072ca:	db1d      	blt.n	8007308 <_strtol_l.constprop.0+0xc0>
 80072cc:	fb00 4003 	mla	r0, r0, r3, r4
 80072d0:	2201      	movs	r2, #1
 80072d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d6:	e7eb      	b.n	80072b0 <_strtol_l.constprop.0+0x68>
 80072d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80072da:	bf04      	itt	eq
 80072dc:	782c      	ldrbeq	r4, [r5, #0]
 80072de:	1c95      	addeq	r5, r2, #2
 80072e0:	e7cf      	b.n	8007282 <_strtol_l.constprop.0+0x3a>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1da      	bne.n	800729c <_strtol_l.constprop.0+0x54>
 80072e6:	2c30      	cmp	r4, #48	@ 0x30
 80072e8:	bf0c      	ite	eq
 80072ea:	2308      	moveq	r3, #8
 80072ec:	230a      	movne	r3, #10
 80072ee:	e7d5      	b.n	800729c <_strtol_l.constprop.0+0x54>
 80072f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072f4:	2f19      	cmp	r7, #25
 80072f6:	d801      	bhi.n	80072fc <_strtol_l.constprop.0+0xb4>
 80072f8:	3c37      	subs	r4, #55	@ 0x37
 80072fa:	e7de      	b.n	80072ba <_strtol_l.constprop.0+0x72>
 80072fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007300:	2f19      	cmp	r7, #25
 8007302:	d804      	bhi.n	800730e <_strtol_l.constprop.0+0xc6>
 8007304:	3c57      	subs	r4, #87	@ 0x57
 8007306:	e7d8      	b.n	80072ba <_strtol_l.constprop.0+0x72>
 8007308:	f04f 32ff 	mov.w	r2, #4294967295
 800730c:	e7e1      	b.n	80072d2 <_strtol_l.constprop.0+0x8a>
 800730e:	1c53      	adds	r3, r2, #1
 8007310:	d108      	bne.n	8007324 <_strtol_l.constprop.0+0xdc>
 8007312:	2322      	movs	r3, #34	@ 0x22
 8007314:	f8ce 3000 	str.w	r3, [lr]
 8007318:	4660      	mov	r0, ip
 800731a:	f1b8 0f00 	cmp.w	r8, #0
 800731e:	d0a0      	beq.n	8007262 <_strtol_l.constprop.0+0x1a>
 8007320:	1e69      	subs	r1, r5, #1
 8007322:	e006      	b.n	8007332 <_strtol_l.constprop.0+0xea>
 8007324:	b106      	cbz	r6, 8007328 <_strtol_l.constprop.0+0xe0>
 8007326:	4240      	negs	r0, r0
 8007328:	f1b8 0f00 	cmp.w	r8, #0
 800732c:	d099      	beq.n	8007262 <_strtol_l.constprop.0+0x1a>
 800732e:	2a00      	cmp	r2, #0
 8007330:	d1f6      	bne.n	8007320 <_strtol_l.constprop.0+0xd8>
 8007332:	f8c8 1000 	str.w	r1, [r8]
 8007336:	e794      	b.n	8007262 <_strtol_l.constprop.0+0x1a>
 8007338:	0800a215 	.word	0x0800a215

0800733c <strtol>:
 800733c:	4613      	mov	r3, r2
 800733e:	460a      	mov	r2, r1
 8007340:	4601      	mov	r1, r0
 8007342:	4802      	ldr	r0, [pc, #8]	@ (800734c <strtol+0x10>)
 8007344:	6800      	ldr	r0, [r0, #0]
 8007346:	f7ff bf7f 	b.w	8007248 <_strtol_l.constprop.0>
 800734a:	bf00      	nop
 800734c:	20000064 	.word	0x20000064

08007350 <__cvt>:
 8007350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	ec57 6b10 	vmov	r6, r7, d0
 8007358:	2f00      	cmp	r7, #0
 800735a:	460c      	mov	r4, r1
 800735c:	4619      	mov	r1, r3
 800735e:	463b      	mov	r3, r7
 8007360:	bfbb      	ittet	lt
 8007362:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007366:	461f      	movlt	r7, r3
 8007368:	2300      	movge	r3, #0
 800736a:	232d      	movlt	r3, #45	@ 0x2d
 800736c:	700b      	strb	r3, [r1, #0]
 800736e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007370:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007374:	4691      	mov	r9, r2
 8007376:	f023 0820 	bic.w	r8, r3, #32
 800737a:	bfbc      	itt	lt
 800737c:	4632      	movlt	r2, r6
 800737e:	4616      	movlt	r6, r2
 8007380:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007384:	d005      	beq.n	8007392 <__cvt+0x42>
 8007386:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800738a:	d100      	bne.n	800738e <__cvt+0x3e>
 800738c:	3401      	adds	r4, #1
 800738e:	2102      	movs	r1, #2
 8007390:	e000      	b.n	8007394 <__cvt+0x44>
 8007392:	2103      	movs	r1, #3
 8007394:	ab03      	add	r3, sp, #12
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	ab02      	add	r3, sp, #8
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	ec47 6b10 	vmov	d0, r6, r7
 80073a0:	4653      	mov	r3, sl
 80073a2:	4622      	mov	r2, r4
 80073a4:	f000 ff60 	bl	8008268 <_dtoa_r>
 80073a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073ac:	4605      	mov	r5, r0
 80073ae:	d119      	bne.n	80073e4 <__cvt+0x94>
 80073b0:	f019 0f01 	tst.w	r9, #1
 80073b4:	d00e      	beq.n	80073d4 <__cvt+0x84>
 80073b6:	eb00 0904 	add.w	r9, r0, r4
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	4630      	mov	r0, r6
 80073c0:	4639      	mov	r1, r7
 80073c2:	f7f9 fba1 	bl	8000b08 <__aeabi_dcmpeq>
 80073c6:	b108      	cbz	r0, 80073cc <__cvt+0x7c>
 80073c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80073cc:	2230      	movs	r2, #48	@ 0x30
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	454b      	cmp	r3, r9
 80073d2:	d31e      	bcc.n	8007412 <__cvt+0xc2>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073d8:	1b5b      	subs	r3, r3, r5
 80073da:	4628      	mov	r0, r5
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	b004      	add	sp, #16
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073e8:	eb00 0904 	add.w	r9, r0, r4
 80073ec:	d1e5      	bne.n	80073ba <__cvt+0x6a>
 80073ee:	7803      	ldrb	r3, [r0, #0]
 80073f0:	2b30      	cmp	r3, #48	@ 0x30
 80073f2:	d10a      	bne.n	800740a <__cvt+0xba>
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f9 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8007400:	b918      	cbnz	r0, 800740a <__cvt+0xba>
 8007402:	f1c4 0401 	rsb	r4, r4, #1
 8007406:	f8ca 4000 	str.w	r4, [sl]
 800740a:	f8da 3000 	ldr.w	r3, [sl]
 800740e:	4499      	add	r9, r3
 8007410:	e7d3      	b.n	80073ba <__cvt+0x6a>
 8007412:	1c59      	adds	r1, r3, #1
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e7d9      	b.n	80073ce <__cvt+0x7e>

0800741a <__exponent>:
 800741a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800741c:	2900      	cmp	r1, #0
 800741e:	bfba      	itte	lt
 8007420:	4249      	neglt	r1, r1
 8007422:	232d      	movlt	r3, #45	@ 0x2d
 8007424:	232b      	movge	r3, #43	@ 0x2b
 8007426:	2909      	cmp	r1, #9
 8007428:	7002      	strb	r2, [r0, #0]
 800742a:	7043      	strb	r3, [r0, #1]
 800742c:	dd29      	ble.n	8007482 <__exponent+0x68>
 800742e:	f10d 0307 	add.w	r3, sp, #7
 8007432:	461d      	mov	r5, r3
 8007434:	270a      	movs	r7, #10
 8007436:	461a      	mov	r2, r3
 8007438:	fbb1 f6f7 	udiv	r6, r1, r7
 800743c:	fb07 1416 	mls	r4, r7, r6, r1
 8007440:	3430      	adds	r4, #48	@ 0x30
 8007442:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007446:	460c      	mov	r4, r1
 8007448:	2c63      	cmp	r4, #99	@ 0x63
 800744a:	f103 33ff 	add.w	r3, r3, #4294967295
 800744e:	4631      	mov	r1, r6
 8007450:	dcf1      	bgt.n	8007436 <__exponent+0x1c>
 8007452:	3130      	adds	r1, #48	@ 0x30
 8007454:	1e94      	subs	r4, r2, #2
 8007456:	f803 1c01 	strb.w	r1, [r3, #-1]
 800745a:	1c41      	adds	r1, r0, #1
 800745c:	4623      	mov	r3, r4
 800745e:	42ab      	cmp	r3, r5
 8007460:	d30a      	bcc.n	8007478 <__exponent+0x5e>
 8007462:	f10d 0309 	add.w	r3, sp, #9
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	42ac      	cmp	r4, r5
 800746a:	bf88      	it	hi
 800746c:	2300      	movhi	r3, #0
 800746e:	3302      	adds	r3, #2
 8007470:	4403      	add	r3, r0
 8007472:	1a18      	subs	r0, r3, r0
 8007474:	b003      	add	sp, #12
 8007476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007478:	f813 6b01 	ldrb.w	r6, [r3], #1
 800747c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007480:	e7ed      	b.n	800745e <__exponent+0x44>
 8007482:	2330      	movs	r3, #48	@ 0x30
 8007484:	3130      	adds	r1, #48	@ 0x30
 8007486:	7083      	strb	r3, [r0, #2]
 8007488:	70c1      	strb	r1, [r0, #3]
 800748a:	1d03      	adds	r3, r0, #4
 800748c:	e7f1      	b.n	8007472 <__exponent+0x58>
	...

08007490 <_printf_float>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	b08d      	sub	sp, #52	@ 0x34
 8007496:	460c      	mov	r4, r1
 8007498:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800749c:	4616      	mov	r6, r2
 800749e:	461f      	mov	r7, r3
 80074a0:	4605      	mov	r5, r0
 80074a2:	f000 fde1 	bl	8008068 <_localeconv_r>
 80074a6:	6803      	ldr	r3, [r0, #0]
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7f8 ff00 	bl	80002b0 <strlen>
 80074b0:	2300      	movs	r3, #0
 80074b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074b4:	f8d8 3000 	ldr.w	r3, [r8]
 80074b8:	9005      	str	r0, [sp, #20]
 80074ba:	3307      	adds	r3, #7
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	f103 0208 	add.w	r2, r3, #8
 80074c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074c8:	f8d4 b000 	ldr.w	fp, [r4]
 80074cc:	f8c8 2000 	str.w	r2, [r8]
 80074d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074d8:	9307      	str	r3, [sp, #28]
 80074da:	f8cd 8018 	str.w	r8, [sp, #24]
 80074de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074e6:	4b9c      	ldr	r3, [pc, #624]	@ (8007758 <_printf_float+0x2c8>)
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	f7f9 fb3e 	bl	8000b6c <__aeabi_dcmpun>
 80074f0:	bb70      	cbnz	r0, 8007550 <_printf_float+0xc0>
 80074f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f6:	4b98      	ldr	r3, [pc, #608]	@ (8007758 <_printf_float+0x2c8>)
 80074f8:	f04f 32ff 	mov.w	r2, #4294967295
 80074fc:	f7f9 fb18 	bl	8000b30 <__aeabi_dcmple>
 8007500:	bb30      	cbnz	r0, 8007550 <_printf_float+0xc0>
 8007502:	2200      	movs	r2, #0
 8007504:	2300      	movs	r3, #0
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	f7f9 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800750e:	b110      	cbz	r0, 8007516 <_printf_float+0x86>
 8007510:	232d      	movs	r3, #45	@ 0x2d
 8007512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007516:	4a91      	ldr	r2, [pc, #580]	@ (800775c <_printf_float+0x2cc>)
 8007518:	4b91      	ldr	r3, [pc, #580]	@ (8007760 <_printf_float+0x2d0>)
 800751a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800751e:	bf94      	ite	ls
 8007520:	4690      	movls	r8, r2
 8007522:	4698      	movhi	r8, r3
 8007524:	2303      	movs	r3, #3
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	f02b 0304 	bic.w	r3, fp, #4
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	f04f 0900 	mov.w	r9, #0
 8007532:	9700      	str	r7, [sp, #0]
 8007534:	4633      	mov	r3, r6
 8007536:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f000 f9d2 	bl	80078e4 <_printf_common>
 8007540:	3001      	adds	r0, #1
 8007542:	f040 808d 	bne.w	8007660 <_printf_float+0x1d0>
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	b00d      	add	sp, #52	@ 0x34
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	f7f9 fb08 	bl	8000b6c <__aeabi_dcmpun>
 800755c:	b140      	cbz	r0, 8007570 <_printf_float+0xe0>
 800755e:	464b      	mov	r3, r9
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfbc      	itt	lt
 8007564:	232d      	movlt	r3, #45	@ 0x2d
 8007566:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800756a:	4a7e      	ldr	r2, [pc, #504]	@ (8007764 <_printf_float+0x2d4>)
 800756c:	4b7e      	ldr	r3, [pc, #504]	@ (8007768 <_printf_float+0x2d8>)
 800756e:	e7d4      	b.n	800751a <_printf_float+0x8a>
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007576:	9206      	str	r2, [sp, #24]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	d13b      	bne.n	80075f4 <_printf_float+0x164>
 800757c:	2306      	movs	r3, #6
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007584:	2300      	movs	r3, #0
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	ab0a      	add	r3, sp, #40	@ 0x28
 800758c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007590:	ab09      	add	r3, sp, #36	@ 0x24
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	ec49 8b10 	vmov	d0, r8, r9
 800759a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800759e:	4628      	mov	r0, r5
 80075a0:	f7ff fed6 	bl	8007350 <__cvt>
 80075a4:	9b06      	ldr	r3, [sp, #24]
 80075a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075a8:	2b47      	cmp	r3, #71	@ 0x47
 80075aa:	4680      	mov	r8, r0
 80075ac:	d129      	bne.n	8007602 <_printf_float+0x172>
 80075ae:	1cc8      	adds	r0, r1, #3
 80075b0:	db02      	blt.n	80075b8 <_printf_float+0x128>
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	4299      	cmp	r1, r3
 80075b6:	dd41      	ble.n	800763c <_printf_float+0x1ac>
 80075b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80075bc:	fa5f fa8a 	uxtb.w	sl, sl
 80075c0:	3901      	subs	r1, #1
 80075c2:	4652      	mov	r2, sl
 80075c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80075c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80075ca:	f7ff ff26 	bl	800741a <__exponent>
 80075ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075d0:	1813      	adds	r3, r2, r0
 80075d2:	2a01      	cmp	r2, #1
 80075d4:	4681      	mov	r9, r0
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	dc02      	bgt.n	80075e0 <_printf_float+0x150>
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	07d2      	lsls	r2, r2, #31
 80075de:	d501      	bpl.n	80075e4 <_printf_float+0x154>
 80075e0:	3301      	adds	r3, #1
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0a2      	beq.n	8007532 <_printf_float+0xa2>
 80075ec:	232d      	movs	r3, #45	@ 0x2d
 80075ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f2:	e79e      	b.n	8007532 <_printf_float+0xa2>
 80075f4:	9a06      	ldr	r2, [sp, #24]
 80075f6:	2a47      	cmp	r2, #71	@ 0x47
 80075f8:	d1c2      	bne.n	8007580 <_printf_float+0xf0>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1c0      	bne.n	8007580 <_printf_float+0xf0>
 80075fe:	2301      	movs	r3, #1
 8007600:	e7bd      	b.n	800757e <_printf_float+0xee>
 8007602:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007606:	d9db      	bls.n	80075c0 <_printf_float+0x130>
 8007608:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800760c:	d118      	bne.n	8007640 <_printf_float+0x1b0>
 800760e:	2900      	cmp	r1, #0
 8007610:	6863      	ldr	r3, [r4, #4]
 8007612:	dd0b      	ble.n	800762c <_printf_float+0x19c>
 8007614:	6121      	str	r1, [r4, #16]
 8007616:	b913      	cbnz	r3, 800761e <_printf_float+0x18e>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	07d0      	lsls	r0, r2, #31
 800761c:	d502      	bpl.n	8007624 <_printf_float+0x194>
 800761e:	3301      	adds	r3, #1
 8007620:	440b      	add	r3, r1
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007626:	f04f 0900 	mov.w	r9, #0
 800762a:	e7db      	b.n	80075e4 <_printf_float+0x154>
 800762c:	b913      	cbnz	r3, 8007634 <_printf_float+0x1a4>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	07d2      	lsls	r2, r2, #31
 8007632:	d501      	bpl.n	8007638 <_printf_float+0x1a8>
 8007634:	3302      	adds	r3, #2
 8007636:	e7f4      	b.n	8007622 <_printf_float+0x192>
 8007638:	2301      	movs	r3, #1
 800763a:	e7f2      	b.n	8007622 <_printf_float+0x192>
 800763c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007642:	4299      	cmp	r1, r3
 8007644:	db05      	blt.n	8007652 <_printf_float+0x1c2>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	6121      	str	r1, [r4, #16]
 800764a:	07d8      	lsls	r0, r3, #31
 800764c:	d5ea      	bpl.n	8007624 <_printf_float+0x194>
 800764e:	1c4b      	adds	r3, r1, #1
 8007650:	e7e7      	b.n	8007622 <_printf_float+0x192>
 8007652:	2900      	cmp	r1, #0
 8007654:	bfd4      	ite	le
 8007656:	f1c1 0202 	rsble	r2, r1, #2
 800765a:	2201      	movgt	r2, #1
 800765c:	4413      	add	r3, r2
 800765e:	e7e0      	b.n	8007622 <_printf_float+0x192>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	055a      	lsls	r2, r3, #21
 8007664:	d407      	bmi.n	8007676 <_printf_float+0x1e6>
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	4642      	mov	r2, r8
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	d12b      	bne.n	80076cc <_printf_float+0x23c>
 8007674:	e767      	b.n	8007546 <_printf_float+0xb6>
 8007676:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800767a:	f240 80dd 	bls.w	8007838 <_printf_float+0x3a8>
 800767e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	f7f9 fa3f 	bl	8000b08 <__aeabi_dcmpeq>
 800768a:	2800      	cmp	r0, #0
 800768c:	d033      	beq.n	80076f6 <_printf_float+0x266>
 800768e:	4a37      	ldr	r2, [pc, #220]	@ (800776c <_printf_float+0x2dc>)
 8007690:	2301      	movs	r3, #1
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f af54 	beq.w	8007546 <_printf_float+0xb6>
 800769e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076a2:	4543      	cmp	r3, r8
 80076a4:	db02      	blt.n	80076ac <_printf_float+0x21c>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	07d8      	lsls	r0, r3, #31
 80076aa:	d50f      	bpl.n	80076cc <_printf_float+0x23c>
 80076ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af45 	beq.w	8007546 <_printf_float+0xb6>
 80076bc:	f04f 0900 	mov.w	r9, #0
 80076c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80076c4:	f104 0a1a 	add.w	sl, r4, #26
 80076c8:	45c8      	cmp	r8, r9
 80076ca:	dc09      	bgt.n	80076e0 <_printf_float+0x250>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	079b      	lsls	r3, r3, #30
 80076d0:	f100 8103 	bmi.w	80078da <_printf_float+0x44a>
 80076d4:	68e0      	ldr	r0, [r4, #12]
 80076d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d8:	4298      	cmp	r0, r3
 80076da:	bfb8      	it	lt
 80076dc:	4618      	movlt	r0, r3
 80076de:	e734      	b.n	800754a <_printf_float+0xba>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4652      	mov	r2, sl
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	f43f af2b 	beq.w	8007546 <_printf_float+0xb6>
 80076f0:	f109 0901 	add.w	r9, r9, #1
 80076f4:	e7e8      	b.n	80076c8 <_printf_float+0x238>
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dc39      	bgt.n	8007770 <_printf_float+0x2e0>
 80076fc:	4a1b      	ldr	r2, [pc, #108]	@ (800776c <_printf_float+0x2dc>)
 80076fe:	2301      	movs	r3, #1
 8007700:	4631      	mov	r1, r6
 8007702:	4628      	mov	r0, r5
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	f43f af1d 	beq.w	8007546 <_printf_float+0xb6>
 800770c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007710:	ea59 0303 	orrs.w	r3, r9, r3
 8007714:	d102      	bne.n	800771c <_printf_float+0x28c>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	07d9      	lsls	r1, r3, #31
 800771a:	d5d7      	bpl.n	80076cc <_printf_float+0x23c>
 800771c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f af0d 	beq.w	8007546 <_printf_float+0xb6>
 800772c:	f04f 0a00 	mov.w	sl, #0
 8007730:	f104 0b1a 	add.w	fp, r4, #26
 8007734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007736:	425b      	negs	r3, r3
 8007738:	4553      	cmp	r3, sl
 800773a:	dc01      	bgt.n	8007740 <_printf_float+0x2b0>
 800773c:	464b      	mov	r3, r9
 800773e:	e793      	b.n	8007668 <_printf_float+0x1d8>
 8007740:	2301      	movs	r3, #1
 8007742:	465a      	mov	r2, fp
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	f43f aefb 	beq.w	8007546 <_printf_float+0xb6>
 8007750:	f10a 0a01 	add.w	sl, sl, #1
 8007754:	e7ee      	b.n	8007734 <_printf_float+0x2a4>
 8007756:	bf00      	nop
 8007758:	7fefffff 	.word	0x7fefffff
 800775c:	0800a315 	.word	0x0800a315
 8007760:	0800a319 	.word	0x0800a319
 8007764:	0800a31d 	.word	0x0800a31d
 8007768:	0800a321 	.word	0x0800a321
 800776c:	0800a325 	.word	0x0800a325
 8007770:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007772:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007776:	4553      	cmp	r3, sl
 8007778:	bfa8      	it	ge
 800777a:	4653      	movge	r3, sl
 800777c:	2b00      	cmp	r3, #0
 800777e:	4699      	mov	r9, r3
 8007780:	dc36      	bgt.n	80077f0 <_printf_float+0x360>
 8007782:	f04f 0b00 	mov.w	fp, #0
 8007786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800778a:	f104 021a 	add.w	r2, r4, #26
 800778e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007790:	9306      	str	r3, [sp, #24]
 8007792:	eba3 0309 	sub.w	r3, r3, r9
 8007796:	455b      	cmp	r3, fp
 8007798:	dc31      	bgt.n	80077fe <_printf_float+0x36e>
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	459a      	cmp	sl, r3
 800779e:	dc3a      	bgt.n	8007816 <_printf_float+0x386>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	07da      	lsls	r2, r3, #31
 80077a4:	d437      	bmi.n	8007816 <_printf_float+0x386>
 80077a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a8:	ebaa 0903 	sub.w	r9, sl, r3
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	ebaa 0303 	sub.w	r3, sl, r3
 80077b2:	4599      	cmp	r9, r3
 80077b4:	bfa8      	it	ge
 80077b6:	4699      	movge	r9, r3
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	dc33      	bgt.n	8007826 <_printf_float+0x396>
 80077be:	f04f 0800 	mov.w	r8, #0
 80077c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077c6:	f104 0b1a 	add.w	fp, r4, #26
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	ebaa 0303 	sub.w	r3, sl, r3
 80077d0:	eba3 0309 	sub.w	r3, r3, r9
 80077d4:	4543      	cmp	r3, r8
 80077d6:	f77f af79 	ble.w	80076cc <_printf_float+0x23c>
 80077da:	2301      	movs	r3, #1
 80077dc:	465a      	mov	r2, fp
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f aeae 	beq.w	8007546 <_printf_float+0xb6>
 80077ea:	f108 0801 	add.w	r8, r8, #1
 80077ee:	e7ec      	b.n	80077ca <_printf_float+0x33a>
 80077f0:	4642      	mov	r2, r8
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	d1c2      	bne.n	8007782 <_printf_float+0x2f2>
 80077fc:	e6a3      	b.n	8007546 <_printf_float+0xb6>
 80077fe:	2301      	movs	r3, #1
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	9206      	str	r2, [sp, #24]
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f ae9c 	beq.w	8007546 <_printf_float+0xb6>
 800780e:	9a06      	ldr	r2, [sp, #24]
 8007810:	f10b 0b01 	add.w	fp, fp, #1
 8007814:	e7bb      	b.n	800778e <_printf_float+0x2fe>
 8007816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	d1c0      	bne.n	80077a6 <_printf_float+0x316>
 8007824:	e68f      	b.n	8007546 <_printf_float+0xb6>
 8007826:	9a06      	ldr	r2, [sp, #24]
 8007828:	464b      	mov	r3, r9
 800782a:	4442      	add	r2, r8
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	d1c3      	bne.n	80077be <_printf_float+0x32e>
 8007836:	e686      	b.n	8007546 <_printf_float+0xb6>
 8007838:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800783c:	f1ba 0f01 	cmp.w	sl, #1
 8007840:	dc01      	bgt.n	8007846 <_printf_float+0x3b6>
 8007842:	07db      	lsls	r3, r3, #31
 8007844:	d536      	bpl.n	80078b4 <_printf_float+0x424>
 8007846:	2301      	movs	r3, #1
 8007848:	4642      	mov	r2, r8
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae78 	beq.w	8007546 <_printf_float+0xb6>
 8007856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f ae70 	beq.w	8007546 <_printf_float+0xb6>
 8007866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007872:	f7f9 f949 	bl	8000b08 <__aeabi_dcmpeq>
 8007876:	b9c0      	cbnz	r0, 80078aa <_printf_float+0x41a>
 8007878:	4653      	mov	r3, sl
 800787a:	f108 0201 	add.w	r2, r8, #1
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	d10c      	bne.n	80078a2 <_printf_float+0x412>
 8007888:	e65d      	b.n	8007546 <_printf_float+0xb6>
 800788a:	2301      	movs	r3, #1
 800788c:	465a      	mov	r2, fp
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f ae56 	beq.w	8007546 <_printf_float+0xb6>
 800789a:	f108 0801 	add.w	r8, r8, #1
 800789e:	45d0      	cmp	r8, sl
 80078a0:	dbf3      	blt.n	800788a <_printf_float+0x3fa>
 80078a2:	464b      	mov	r3, r9
 80078a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078a8:	e6df      	b.n	800766a <_printf_float+0x1da>
 80078aa:	f04f 0800 	mov.w	r8, #0
 80078ae:	f104 0b1a 	add.w	fp, r4, #26
 80078b2:	e7f4      	b.n	800789e <_printf_float+0x40e>
 80078b4:	2301      	movs	r3, #1
 80078b6:	4642      	mov	r2, r8
 80078b8:	e7e1      	b.n	800787e <_printf_float+0x3ee>
 80078ba:	2301      	movs	r3, #1
 80078bc:	464a      	mov	r2, r9
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f ae3e 	beq.w	8007546 <_printf_float+0xb6>
 80078ca:	f108 0801 	add.w	r8, r8, #1
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078d2:	1a5b      	subs	r3, r3, r1
 80078d4:	4543      	cmp	r3, r8
 80078d6:	dcf0      	bgt.n	80078ba <_printf_float+0x42a>
 80078d8:	e6fc      	b.n	80076d4 <_printf_float+0x244>
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	f104 0919 	add.w	r9, r4, #25
 80078e2:	e7f4      	b.n	80078ce <_printf_float+0x43e>

080078e4 <_printf_common>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	4616      	mov	r6, r2
 80078ea:	4698      	mov	r8, r3
 80078ec:	688a      	ldr	r2, [r1, #8]
 80078ee:	690b      	ldr	r3, [r1, #16]
 80078f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	bfb8      	it	lt
 80078f8:	4613      	movlt	r3, r2
 80078fa:	6033      	str	r3, [r6, #0]
 80078fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007900:	4607      	mov	r7, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b10a      	cbz	r2, 800790a <_printf_common+0x26>
 8007906:	3301      	adds	r3, #1
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	0699      	lsls	r1, r3, #26
 800790e:	bf42      	ittt	mi
 8007910:	6833      	ldrmi	r3, [r6, #0]
 8007912:	3302      	addmi	r3, #2
 8007914:	6033      	strmi	r3, [r6, #0]
 8007916:	6825      	ldr	r5, [r4, #0]
 8007918:	f015 0506 	ands.w	r5, r5, #6
 800791c:	d106      	bne.n	800792c <_printf_common+0x48>
 800791e:	f104 0a19 	add.w	sl, r4, #25
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	6832      	ldr	r2, [r6, #0]
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	42ab      	cmp	r3, r5
 800792a:	dc26      	bgt.n	800797a <_printf_common+0x96>
 800792c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	3b00      	subs	r3, #0
 8007934:	bf18      	it	ne
 8007936:	2301      	movne	r3, #1
 8007938:	0692      	lsls	r2, r2, #26
 800793a:	d42b      	bmi.n	8007994 <_printf_common+0xb0>
 800793c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007940:	4641      	mov	r1, r8
 8007942:	4638      	mov	r0, r7
 8007944:	47c8      	blx	r9
 8007946:	3001      	adds	r0, #1
 8007948:	d01e      	beq.n	8007988 <_printf_common+0xa4>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	f003 0306 	and.w	r3, r3, #6
 8007952:	2b04      	cmp	r3, #4
 8007954:	bf02      	ittt	eq
 8007956:	68e5      	ldreq	r5, [r4, #12]
 8007958:	6833      	ldreq	r3, [r6, #0]
 800795a:	1aed      	subeq	r5, r5, r3
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	bf0c      	ite	eq
 8007960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007964:	2500      	movne	r5, #0
 8007966:	4293      	cmp	r3, r2
 8007968:	bfc4      	itt	gt
 800796a:	1a9b      	subgt	r3, r3, r2
 800796c:	18ed      	addgt	r5, r5, r3
 800796e:	2600      	movs	r6, #0
 8007970:	341a      	adds	r4, #26
 8007972:	42b5      	cmp	r5, r6
 8007974:	d11a      	bne.n	80079ac <_printf_common+0xc8>
 8007976:	2000      	movs	r0, #0
 8007978:	e008      	b.n	800798c <_printf_common+0xa8>
 800797a:	2301      	movs	r3, #1
 800797c:	4652      	mov	r2, sl
 800797e:	4641      	mov	r1, r8
 8007980:	4638      	mov	r0, r7
 8007982:	47c8      	blx	r9
 8007984:	3001      	adds	r0, #1
 8007986:	d103      	bne.n	8007990 <_printf_common+0xac>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007990:	3501      	adds	r5, #1
 8007992:	e7c6      	b.n	8007922 <_printf_common+0x3e>
 8007994:	18e1      	adds	r1, r4, r3
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	2030      	movs	r0, #48	@ 0x30
 800799a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800799e:	4422      	add	r2, r4
 80079a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079a8:	3302      	adds	r3, #2
 80079aa:	e7c7      	b.n	800793c <_printf_common+0x58>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4622      	mov	r2, r4
 80079b0:	4641      	mov	r1, r8
 80079b2:	4638      	mov	r0, r7
 80079b4:	47c8      	blx	r9
 80079b6:	3001      	adds	r0, #1
 80079b8:	d0e6      	beq.n	8007988 <_printf_common+0xa4>
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7d9      	b.n	8007972 <_printf_common+0x8e>
	...

080079c0 <_printf_i>:
 80079c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	7e0f      	ldrb	r7, [r1, #24]
 80079c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079c8:	2f78      	cmp	r7, #120	@ 0x78
 80079ca:	4691      	mov	r9, r2
 80079cc:	4680      	mov	r8, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	469a      	mov	sl, r3
 80079d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079d6:	d807      	bhi.n	80079e8 <_printf_i+0x28>
 80079d8:	2f62      	cmp	r7, #98	@ 0x62
 80079da:	d80a      	bhi.n	80079f2 <_printf_i+0x32>
 80079dc:	2f00      	cmp	r7, #0
 80079de:	f000 80d2 	beq.w	8007b86 <_printf_i+0x1c6>
 80079e2:	2f58      	cmp	r7, #88	@ 0x58
 80079e4:	f000 80b9 	beq.w	8007b5a <_printf_i+0x19a>
 80079e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079f0:	e03a      	b.n	8007a68 <_printf_i+0xa8>
 80079f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079f6:	2b15      	cmp	r3, #21
 80079f8:	d8f6      	bhi.n	80079e8 <_printf_i+0x28>
 80079fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007a00 <_printf_i+0x40>)
 80079fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a6d 	.word	0x08007a6d
 8007a08:	080079e9 	.word	0x080079e9
 8007a0c:	080079e9 	.word	0x080079e9
 8007a10:	080079e9 	.word	0x080079e9
 8007a14:	080079e9 	.word	0x080079e9
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	080079e9 	.word	0x080079e9
 8007a20:	080079e9 	.word	0x080079e9
 8007a24:	080079e9 	.word	0x080079e9
 8007a28:	080079e9 	.word	0x080079e9
 8007a2c:	08007b6d 	.word	0x08007b6d
 8007a30:	08007a97 	.word	0x08007a97
 8007a34:	08007b27 	.word	0x08007b27
 8007a38:	080079e9 	.word	0x080079e9
 8007a3c:	080079e9 	.word	0x080079e9
 8007a40:	08007b8f 	.word	0x08007b8f
 8007a44:	080079e9 	.word	0x080079e9
 8007a48:	08007a97 	.word	0x08007a97
 8007a4c:	080079e9 	.word	0x080079e9
 8007a50:	080079e9 	.word	0x080079e9
 8007a54:	08007b2f 	.word	0x08007b2f
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	1d1a      	adds	r2, r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6032      	str	r2, [r6, #0]
 8007a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09d      	b.n	8007ba8 <_printf_i+0x1e8>
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	6820      	ldr	r0, [r4, #0]
 8007a70:	1d19      	adds	r1, r3, #4
 8007a72:	6031      	str	r1, [r6, #0]
 8007a74:	0606      	lsls	r6, r0, #24
 8007a76:	d501      	bpl.n	8007a7c <_printf_i+0xbc>
 8007a78:	681d      	ldr	r5, [r3, #0]
 8007a7a:	e003      	b.n	8007a84 <_printf_i+0xc4>
 8007a7c:	0645      	lsls	r5, r0, #25
 8007a7e:	d5fb      	bpl.n	8007a78 <_printf_i+0xb8>
 8007a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	da03      	bge.n	8007a90 <_printf_i+0xd0>
 8007a88:	232d      	movs	r3, #45	@ 0x2d
 8007a8a:	426d      	negs	r5, r5
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a90:	4859      	ldr	r0, [pc, #356]	@ (8007bf8 <_printf_i+0x238>)
 8007a92:	230a      	movs	r3, #10
 8007a94:	e011      	b.n	8007aba <_printf_i+0xfa>
 8007a96:	6821      	ldr	r1, [r4, #0]
 8007a98:	6833      	ldr	r3, [r6, #0]
 8007a9a:	0608      	lsls	r0, r1, #24
 8007a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007aa0:	d402      	bmi.n	8007aa8 <_printf_i+0xe8>
 8007aa2:	0649      	lsls	r1, r1, #25
 8007aa4:	bf48      	it	mi
 8007aa6:	b2ad      	uxthmi	r5, r5
 8007aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aaa:	4853      	ldr	r0, [pc, #332]	@ (8007bf8 <_printf_i+0x238>)
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	bf14      	ite	ne
 8007ab0:	230a      	movne	r3, #10
 8007ab2:	2308      	moveq	r3, #8
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007aba:	6866      	ldr	r6, [r4, #4]
 8007abc:	60a6      	str	r6, [r4, #8]
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	bfa2      	ittt	ge
 8007ac2:	6821      	ldrge	r1, [r4, #0]
 8007ac4:	f021 0104 	bicge.w	r1, r1, #4
 8007ac8:	6021      	strge	r1, [r4, #0]
 8007aca:	b90d      	cbnz	r5, 8007ad0 <_printf_i+0x110>
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d04b      	beq.n	8007b68 <_printf_i+0x1a8>
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8007ada:	5dc7      	ldrb	r7, [r0, r7]
 8007adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ae0:	462f      	mov	r7, r5
 8007ae2:	42bb      	cmp	r3, r7
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	d9f4      	bls.n	8007ad2 <_printf_i+0x112>
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d10b      	bne.n	8007b04 <_printf_i+0x144>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	07df      	lsls	r7, r3, #31
 8007af0:	d508      	bpl.n	8007b04 <_printf_i+0x144>
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6861      	ldr	r1, [r4, #4]
 8007af6:	4299      	cmp	r1, r3
 8007af8:	bfde      	ittt	le
 8007afa:	2330      	movle	r3, #48	@ 0x30
 8007afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b04:	1b92      	subs	r2, r2, r6
 8007b06:	6122      	str	r2, [r4, #16]
 8007b08:	f8cd a000 	str.w	sl, [sp]
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	aa03      	add	r2, sp, #12
 8007b10:	4621      	mov	r1, r4
 8007b12:	4640      	mov	r0, r8
 8007b14:	f7ff fee6 	bl	80078e4 <_printf_common>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d14a      	bne.n	8007bb2 <_printf_i+0x1f2>
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	b004      	add	sp, #16
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f043 0320 	orr.w	r3, r3, #32
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	4833      	ldr	r0, [pc, #204]	@ (8007bfc <_printf_i+0x23c>)
 8007b30:	2778      	movs	r7, #120	@ 0x78
 8007b32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	6831      	ldr	r1, [r6, #0]
 8007b3a:	061f      	lsls	r7, r3, #24
 8007b3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b40:	d402      	bmi.n	8007b48 <_printf_i+0x188>
 8007b42:	065f      	lsls	r7, r3, #25
 8007b44:	bf48      	it	mi
 8007b46:	b2ad      	uxthmi	r5, r5
 8007b48:	6031      	str	r1, [r6, #0]
 8007b4a:	07d9      	lsls	r1, r3, #31
 8007b4c:	bf44      	itt	mi
 8007b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b52:	6023      	strmi	r3, [r4, #0]
 8007b54:	b11d      	cbz	r5, 8007b5e <_printf_i+0x19e>
 8007b56:	2310      	movs	r3, #16
 8007b58:	e7ac      	b.n	8007ab4 <_printf_i+0xf4>
 8007b5a:	4827      	ldr	r0, [pc, #156]	@ (8007bf8 <_printf_i+0x238>)
 8007b5c:	e7e9      	b.n	8007b32 <_printf_i+0x172>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	f023 0320 	bic.w	r3, r3, #32
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	e7f6      	b.n	8007b56 <_printf_i+0x196>
 8007b68:	4616      	mov	r6, r2
 8007b6a:	e7bd      	b.n	8007ae8 <_printf_i+0x128>
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	6825      	ldr	r5, [r4, #0]
 8007b70:	6961      	ldr	r1, [r4, #20]
 8007b72:	1d18      	adds	r0, r3, #4
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	062e      	lsls	r6, r5, #24
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0x1c0>
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <_printf_i+0x1c6>
 8007b80:	0668      	lsls	r0, r5, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0x1bc>
 8007b84:	8019      	strh	r1, [r3, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	4616      	mov	r6, r2
 8007b8c:	e7bc      	b.n	8007b08 <_printf_i+0x148>
 8007b8e:	6833      	ldr	r3, [r6, #0]
 8007b90:	1d1a      	adds	r2, r3, #4
 8007b92:	6032      	str	r2, [r6, #0]
 8007b94:	681e      	ldr	r6, [r3, #0]
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7f8 fb38 	bl	8000210 <memchr>
 8007ba0:	b108      	cbz	r0, 8007ba6 <_printf_i+0x1e6>
 8007ba2:	1b80      	subs	r0, r0, r6
 8007ba4:	6060      	str	r0, [r4, #4]
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	2300      	movs	r3, #0
 8007bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb0:	e7aa      	b.n	8007b08 <_printf_i+0x148>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	47d0      	blx	sl
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d0ad      	beq.n	8007b1c <_printf_i+0x15c>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	079b      	lsls	r3, r3, #30
 8007bc4:	d413      	bmi.n	8007bee <_printf_i+0x22e>
 8007bc6:	68e0      	ldr	r0, [r4, #12]
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	4298      	cmp	r0, r3
 8007bcc:	bfb8      	it	lt
 8007bce:	4618      	movlt	r0, r3
 8007bd0:	e7a6      	b.n	8007b20 <_printf_i+0x160>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	47d0      	blx	sl
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d09d      	beq.n	8007b1c <_printf_i+0x15c>
 8007be0:	3501      	adds	r5, #1
 8007be2:	68e3      	ldr	r3, [r4, #12]
 8007be4:	9903      	ldr	r1, [sp, #12]
 8007be6:	1a5b      	subs	r3, r3, r1
 8007be8:	42ab      	cmp	r3, r5
 8007bea:	dcf2      	bgt.n	8007bd2 <_printf_i+0x212>
 8007bec:	e7eb      	b.n	8007bc6 <_printf_i+0x206>
 8007bee:	2500      	movs	r5, #0
 8007bf0:	f104 0619 	add.w	r6, r4, #25
 8007bf4:	e7f5      	b.n	8007be2 <_printf_i+0x222>
 8007bf6:	bf00      	nop
 8007bf8:	0800a327 	.word	0x0800a327
 8007bfc:	0800a338 	.word	0x0800a338

08007c00 <std>:
 8007c00:	2300      	movs	r3, #0
 8007c02:	b510      	push	{r4, lr}
 8007c04:	4604      	mov	r4, r0
 8007c06:	e9c0 3300 	strd	r3, r3, [r0]
 8007c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c0e:	6083      	str	r3, [r0, #8]
 8007c10:	8181      	strh	r1, [r0, #12]
 8007c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c14:	81c2      	strh	r2, [r0, #14]
 8007c16:	6183      	str	r3, [r0, #24]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	305c      	adds	r0, #92	@ 0x5c
 8007c1e:	f000 fa07 	bl	8008030 <memset>
 8007c22:	4b0d      	ldr	r3, [pc, #52]	@ (8007c58 <std+0x58>)
 8007c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <std+0x5c>)
 8007c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c60 <std+0x60>)
 8007c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <std+0x64>)
 8007c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c32:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <std+0x68>)
 8007c34:	6224      	str	r4, [r4, #32]
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d006      	beq.n	8007c48 <std+0x48>
 8007c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c3e:	4294      	cmp	r4, r2
 8007c40:	d002      	beq.n	8007c48 <std+0x48>
 8007c42:	33d0      	adds	r3, #208	@ 0xd0
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d105      	bne.n	8007c54 <std+0x54>
 8007c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c50:	f000 ba7e 	b.w	8008150 <__retarget_lock_init_recursive>
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	bf00      	nop
 8007c58:	08007e81 	.word	0x08007e81
 8007c5c:	08007ea3 	.word	0x08007ea3
 8007c60:	08007edb 	.word	0x08007edb
 8007c64:	08007eff 	.word	0x08007eff
 8007c68:	200004c8 	.word	0x200004c8

08007c6c <stdio_exit_handler>:
 8007c6c:	4a02      	ldr	r2, [pc, #8]	@ (8007c78 <stdio_exit_handler+0xc>)
 8007c6e:	4903      	ldr	r1, [pc, #12]	@ (8007c7c <stdio_exit_handler+0x10>)
 8007c70:	4803      	ldr	r0, [pc, #12]	@ (8007c80 <stdio_exit_handler+0x14>)
 8007c72:	f000 b869 	b.w	8007d48 <_fwalk_sglue>
 8007c76:	bf00      	nop
 8007c78:	20000058 	.word	0x20000058
 8007c7c:	08009aad 	.word	0x08009aad
 8007c80:	20000068 	.word	0x20000068

08007c84 <cleanup_stdio>:
 8007c84:	6841      	ldr	r1, [r0, #4]
 8007c86:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb8 <cleanup_stdio+0x34>)
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	d001      	beq.n	8007c94 <cleanup_stdio+0x10>
 8007c90:	f001 ff0c 	bl	8009aac <_fflush_r>
 8007c94:	68a1      	ldr	r1, [r4, #8]
 8007c96:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <cleanup_stdio+0x38>)
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <cleanup_stdio+0x1e>
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f001 ff05 	bl	8009aac <_fflush_r>
 8007ca2:	68e1      	ldr	r1, [r4, #12]
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <cleanup_stdio+0x3c>)
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d004      	beq.n	8007cb4 <cleanup_stdio+0x30>
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f001 befc 	b.w	8009aac <_fflush_r>
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200004c8 	.word	0x200004c8
 8007cbc:	20000530 	.word	0x20000530
 8007cc0:	20000598 	.word	0x20000598

08007cc4 <global_stdio_init.part.0>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <global_stdio_init.part.0+0x30>)
 8007cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8007cf8 <global_stdio_init.part.0+0x34>)
 8007cca:	4a0c      	ldr	r2, [pc, #48]	@ (8007cfc <global_stdio_init.part.0+0x38>)
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	f7ff ff94 	bl	8007c00 <std>
 8007cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cdc:	2201      	movs	r2, #1
 8007cde:	2109      	movs	r1, #9
 8007ce0:	f7ff ff8e 	bl	8007c00 <std>
 8007ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ce8:	2202      	movs	r2, #2
 8007cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cee:	2112      	movs	r1, #18
 8007cf0:	f7ff bf86 	b.w	8007c00 <std>
 8007cf4:	20000600 	.word	0x20000600
 8007cf8:	200004c8 	.word	0x200004c8
 8007cfc:	08007c6d 	.word	0x08007c6d

08007d00 <__sfp_lock_acquire>:
 8007d00:	4801      	ldr	r0, [pc, #4]	@ (8007d08 <__sfp_lock_acquire+0x8>)
 8007d02:	f000 ba26 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8007d06:	bf00      	nop
 8007d08:	20000609 	.word	0x20000609

08007d0c <__sfp_lock_release>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__sfp_lock_release+0x8>)
 8007d0e:	f000 ba21 	b.w	8008154 <__retarget_lock_release_recursive>
 8007d12:	bf00      	nop
 8007d14:	20000609 	.word	0x20000609

08007d18 <__sinit>:
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	f7ff fff0 	bl	8007d00 <__sfp_lock_acquire>
 8007d20:	6a23      	ldr	r3, [r4, #32]
 8007d22:	b11b      	cbz	r3, 8007d2c <__sinit+0x14>
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d28:	f7ff bff0 	b.w	8007d0c <__sfp_lock_release>
 8007d2c:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <__sinit+0x28>)
 8007d2e:	6223      	str	r3, [r4, #32]
 8007d30:	4b04      	ldr	r3, [pc, #16]	@ (8007d44 <__sinit+0x2c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f5      	bne.n	8007d24 <__sinit+0xc>
 8007d38:	f7ff ffc4 	bl	8007cc4 <global_stdio_init.part.0>
 8007d3c:	e7f2      	b.n	8007d24 <__sinit+0xc>
 8007d3e:	bf00      	nop
 8007d40:	08007c85 	.word	0x08007c85
 8007d44:	20000600 	.word	0x20000600

08007d48 <_fwalk_sglue>:
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	4688      	mov	r8, r1
 8007d50:	4614      	mov	r4, r2
 8007d52:	2600      	movs	r6, #0
 8007d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d58:	f1b9 0901 	subs.w	r9, r9, #1
 8007d5c:	d505      	bpl.n	8007d6a <_fwalk_sglue+0x22>
 8007d5e:	6824      	ldr	r4, [r4, #0]
 8007d60:	2c00      	cmp	r4, #0
 8007d62:	d1f7      	bne.n	8007d54 <_fwalk_sglue+0xc>
 8007d64:	4630      	mov	r0, r6
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d907      	bls.n	8007d80 <_fwalk_sglue+0x38>
 8007d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d74:	3301      	adds	r3, #1
 8007d76:	d003      	beq.n	8007d80 <_fwalk_sglue+0x38>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	47c0      	blx	r8
 8007d7e:	4306      	orrs	r6, r0
 8007d80:	3568      	adds	r5, #104	@ 0x68
 8007d82:	e7e9      	b.n	8007d58 <_fwalk_sglue+0x10>

08007d84 <_puts_r>:
 8007d84:	6a03      	ldr	r3, [r0, #32]
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	6884      	ldr	r4, [r0, #8]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	b90b      	cbnz	r3, 8007d94 <_puts_r+0x10>
 8007d90:	f7ff ffc2 	bl	8007d18 <__sinit>
 8007d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d96:	07db      	lsls	r3, r3, #31
 8007d98:	d405      	bmi.n	8007da6 <_puts_r+0x22>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	0598      	lsls	r0, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_puts_r+0x22>
 8007da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007da2:	f000 f9d6 	bl	8008152 <__retarget_lock_acquire_recursive>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d502      	bpl.n	8007db2 <_puts_r+0x2e>
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d135      	bne.n	8007e1e <_puts_r+0x9a>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f8e5 	bl	8007f84 <__swsetup_r>
 8007dba:	b380      	cbz	r0, 8007e1e <_puts_r+0x9a>
 8007dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8007dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dc2:	07da      	lsls	r2, r3, #31
 8007dc4:	d405      	bmi.n	8007dd2 <_puts_r+0x4e>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	059b      	lsls	r3, r3, #22
 8007dca:	d402      	bmi.n	8007dd2 <_puts_r+0x4e>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dce:	f000 f9c1 	bl	8008154 <__retarget_lock_release_recursive>
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da04      	bge.n	8007de4 <_puts_r+0x60>
 8007dda:	69a2      	ldr	r2, [r4, #24]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	dc17      	bgt.n	8007e10 <_puts_r+0x8c>
 8007de0:	290a      	cmp	r1, #10
 8007de2:	d015      	beq.n	8007e10 <_puts_r+0x8c>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	7019      	strb	r1, [r3, #0]
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007df2:	3b01      	subs	r3, #1
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	2900      	cmp	r1, #0
 8007df8:	d1ed      	bne.n	8007dd6 <_puts_r+0x52>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da11      	bge.n	8007e22 <_puts_r+0x9e>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	210a      	movs	r1, #10
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f87f 	bl	8007f06 <__swbuf_r>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d0d7      	beq.n	8007dbc <_puts_r+0x38>
 8007e0c:	250a      	movs	r5, #10
 8007e0e:	e7d7      	b.n	8007dc0 <_puts_r+0x3c>
 8007e10:	4622      	mov	r2, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f877 	bl	8007f06 <__swbuf_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d1e7      	bne.n	8007dec <_puts_r+0x68>
 8007e1c:	e7ce      	b.n	8007dbc <_puts_r+0x38>
 8007e1e:	3e01      	subs	r6, #1
 8007e20:	e7e4      	b.n	8007dec <_puts_r+0x68>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	220a      	movs	r2, #10
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e7ee      	b.n	8007e0c <_puts_r+0x88>
	...

08007e30 <puts>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	@ (8007e3c <puts+0xc>)
 8007e32:	4601      	mov	r1, r0
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f7ff bfa5 	b.w	8007d84 <_puts_r>
 8007e3a:	bf00      	nop
 8007e3c:	20000064 	.word	0x20000064

08007e40 <siprintf>:
 8007e40:	b40e      	push	{r1, r2, r3}
 8007e42:	b500      	push	{lr}
 8007e44:	b09c      	sub	sp, #112	@ 0x70
 8007e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e48:	9002      	str	r0, [sp, #8]
 8007e4a:	9006      	str	r0, [sp, #24]
 8007e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e50:	4809      	ldr	r0, [pc, #36]	@ (8007e78 <siprintf+0x38>)
 8007e52:	9107      	str	r1, [sp, #28]
 8007e54:	9104      	str	r1, [sp, #16]
 8007e56:	4909      	ldr	r1, [pc, #36]	@ (8007e7c <siprintf+0x3c>)
 8007e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5c:	9105      	str	r1, [sp, #20]
 8007e5e:	6800      	ldr	r0, [r0, #0]
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	a902      	add	r1, sp, #8
 8007e64:	f001 fca2 	bl	80097ac <_svfiprintf_r>
 8007e68:	9b02      	ldr	r3, [sp, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	b01c      	add	sp, #112	@ 0x70
 8007e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e74:	b003      	add	sp, #12
 8007e76:	4770      	bx	lr
 8007e78:	20000064 	.word	0x20000064
 8007e7c:	ffff0208 	.word	0xffff0208

08007e80 <__sread>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	460c      	mov	r4, r1
 8007e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e88:	f000 f914 	bl	80080b4 <_read_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	bfab      	itete	ge
 8007e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e92:	89a3      	ldrhlt	r3, [r4, #12]
 8007e94:	181b      	addge	r3, r3, r0
 8007e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e9a:	bfac      	ite	ge
 8007e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e9e:	81a3      	strhlt	r3, [r4, #12]
 8007ea0:	bd10      	pop	{r4, pc}

08007ea2 <__swrite>:
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	898b      	ldrh	r3, [r1, #12]
 8007eaa:	05db      	lsls	r3, r3, #23
 8007eac:	4605      	mov	r5, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	d505      	bpl.n	8007ec0 <__swrite+0x1e>
 8007eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb8:	2302      	movs	r3, #2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f000 f8e8 	bl	8008090 <_lseek_r>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	4632      	mov	r2, r6
 8007ece:	463b      	mov	r3, r7
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed6:	f000 b8ff 	b.w	80080d8 <_write_r>

08007eda <__sseek>:
 8007eda:	b510      	push	{r4, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee2:	f000 f8d5 	bl	8008090 <_lseek_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	bf15      	itete	ne
 8007eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ef6:	81a3      	strheq	r3, [r4, #12]
 8007ef8:	bf18      	it	ne
 8007efa:	81a3      	strhne	r3, [r4, #12]
 8007efc:	bd10      	pop	{r4, pc}

08007efe <__sclose>:
 8007efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f02:	f000 b8b5 	b.w	8008070 <_close_r>

08007f06 <__swbuf_r>:
 8007f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f08:	460e      	mov	r6, r1
 8007f0a:	4614      	mov	r4, r2
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b118      	cbz	r0, 8007f18 <__swbuf_r+0x12>
 8007f10:	6a03      	ldr	r3, [r0, #32]
 8007f12:	b90b      	cbnz	r3, 8007f18 <__swbuf_r+0x12>
 8007f14:	f7ff ff00 	bl	8007d18 <__sinit>
 8007f18:	69a3      	ldr	r3, [r4, #24]
 8007f1a:	60a3      	str	r3, [r4, #8]
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	071a      	lsls	r2, r3, #28
 8007f20:	d501      	bpl.n	8007f26 <__swbuf_r+0x20>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	b943      	cbnz	r3, 8007f38 <__swbuf_r+0x32>
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f000 f82b 	bl	8007f84 <__swsetup_r>
 8007f2e:	b118      	cbz	r0, 8007f38 <__swbuf_r+0x32>
 8007f30:	f04f 37ff 	mov.w	r7, #4294967295
 8007f34:	4638      	mov	r0, r7
 8007f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	1a98      	subs	r0, r3, r2
 8007f3e:	6963      	ldr	r3, [r4, #20]
 8007f40:	b2f6      	uxtb	r6, r6
 8007f42:	4283      	cmp	r3, r0
 8007f44:	4637      	mov	r7, r6
 8007f46:	dc05      	bgt.n	8007f54 <__swbuf_r+0x4e>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f001 fdae 	bl	8009aac <_fflush_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d1ed      	bne.n	8007f30 <__swbuf_r+0x2a>
 8007f54:	68a3      	ldr	r3, [r4, #8]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	60a3      	str	r3, [r4, #8]
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	701e      	strb	r6, [r3, #0]
 8007f62:	6962      	ldr	r2, [r4, #20]
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d004      	beq.n	8007f74 <__swbuf_r+0x6e>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	07db      	lsls	r3, r3, #31
 8007f6e:	d5e1      	bpl.n	8007f34 <__swbuf_r+0x2e>
 8007f70:	2e0a      	cmp	r6, #10
 8007f72:	d1df      	bne.n	8007f34 <__swbuf_r+0x2e>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4628      	mov	r0, r5
 8007f78:	f001 fd98 	bl	8009aac <_fflush_r>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d0d9      	beq.n	8007f34 <__swbuf_r+0x2e>
 8007f80:	e7d6      	b.n	8007f30 <__swbuf_r+0x2a>
	...

08007f84 <__swsetup_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4b29      	ldr	r3, [pc, #164]	@ (800802c <__swsetup_r+0xa8>)
 8007f88:	4605      	mov	r5, r0
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	b118      	cbz	r0, 8007f98 <__swsetup_r+0x14>
 8007f90:	6a03      	ldr	r3, [r0, #32]
 8007f92:	b90b      	cbnz	r3, 8007f98 <__swsetup_r+0x14>
 8007f94:	f7ff fec0 	bl	8007d18 <__sinit>
 8007f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9c:	0719      	lsls	r1, r3, #28
 8007f9e:	d422      	bmi.n	8007fe6 <__swsetup_r+0x62>
 8007fa0:	06da      	lsls	r2, r3, #27
 8007fa2:	d407      	bmi.n	8007fb4 <__swsetup_r+0x30>
 8007fa4:	2209      	movs	r2, #9
 8007fa6:	602a      	str	r2, [r5, #0]
 8007fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	e033      	b.n	800801c <__swsetup_r+0x98>
 8007fb4:	0758      	lsls	r0, r3, #29
 8007fb6:	d512      	bpl.n	8007fde <__swsetup_r+0x5a>
 8007fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fba:	b141      	cbz	r1, 8007fce <__swsetup_r+0x4a>
 8007fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fc0:	4299      	cmp	r1, r3
 8007fc2:	d002      	beq.n	8007fca <__swsetup_r+0x46>
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f000 ff13 	bl	8008df0 <_free_r>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6063      	str	r3, [r4, #4]
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f043 0308 	orr.w	r3, r3, #8
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	b94b      	cbnz	r3, 8007ffe <__swsetup_r+0x7a>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff4:	d003      	beq.n	8007ffe <__swsetup_r+0x7a>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f001 fda5 	bl	8009b48 <__smakebuf_r>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	f013 0201 	ands.w	r2, r3, #1
 8008006:	d00a      	beq.n	800801e <__swsetup_r+0x9a>
 8008008:	2200      	movs	r2, #0
 800800a:	60a2      	str	r2, [r4, #8]
 800800c:	6962      	ldr	r2, [r4, #20]
 800800e:	4252      	negs	r2, r2
 8008010:	61a2      	str	r2, [r4, #24]
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	b942      	cbnz	r2, 8008028 <__swsetup_r+0xa4>
 8008016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800801a:	d1c5      	bne.n	8007fa8 <__swsetup_r+0x24>
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	0799      	lsls	r1, r3, #30
 8008020:	bf58      	it	pl
 8008022:	6962      	ldrpl	r2, [r4, #20]
 8008024:	60a2      	str	r2, [r4, #8]
 8008026:	e7f4      	b.n	8008012 <__swsetup_r+0x8e>
 8008028:	2000      	movs	r0, #0
 800802a:	e7f7      	b.n	800801c <__swsetup_r+0x98>
 800802c:	20000064 	.word	0x20000064

08008030 <memset>:
 8008030:	4402      	add	r2, r0
 8008032:	4603      	mov	r3, r0
 8008034:	4293      	cmp	r3, r2
 8008036:	d100      	bne.n	800803a <memset+0xa>
 8008038:	4770      	bx	lr
 800803a:	f803 1b01 	strb.w	r1, [r3], #1
 800803e:	e7f9      	b.n	8008034 <memset+0x4>

08008040 <strncpy>:
 8008040:	b510      	push	{r4, lr}
 8008042:	3901      	subs	r1, #1
 8008044:	4603      	mov	r3, r0
 8008046:	b132      	cbz	r2, 8008056 <strncpy+0x16>
 8008048:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800804c:	f803 4b01 	strb.w	r4, [r3], #1
 8008050:	3a01      	subs	r2, #1
 8008052:	2c00      	cmp	r4, #0
 8008054:	d1f7      	bne.n	8008046 <strncpy+0x6>
 8008056:	441a      	add	r2, r3
 8008058:	2100      	movs	r1, #0
 800805a:	4293      	cmp	r3, r2
 800805c:	d100      	bne.n	8008060 <strncpy+0x20>
 800805e:	bd10      	pop	{r4, pc}
 8008060:	f803 1b01 	strb.w	r1, [r3], #1
 8008064:	e7f9      	b.n	800805a <strncpy+0x1a>
	...

08008068 <_localeconv_r>:
 8008068:	4800      	ldr	r0, [pc, #0]	@ (800806c <_localeconv_r+0x4>)
 800806a:	4770      	bx	lr
 800806c:	200001a4 	.word	0x200001a4

08008070 <_close_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d06      	ldr	r5, [pc, #24]	@ (800808c <_close_r+0x1c>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f9 fb36 	bl	80016ec <_close>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_close_r+0x1a>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_close_r+0x1a>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20000604 	.word	0x20000604

08008090 <_lseek_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	@ (80080b0 <_lseek_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f9 fb4b 	bl	800173a <_lseek>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_lseek_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_lseek_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	20000604 	.word	0x20000604

080080b4 <_read_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	@ (80080d4 <_read_r+0x20>)
 80080b8:	4604      	mov	r4, r0
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	602a      	str	r2, [r5, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f7f9 fad9 	bl	800167a <_read>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_read_r+0x1e>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_read_r+0x1e>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000604 	.word	0x20000604

080080d8 <_write_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	@ (80080f8 <_write_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7f9 fae4 	bl	80016b4 <_write>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_write_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_write_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	20000604 	.word	0x20000604

080080fc <__errno>:
 80080fc:	4b01      	ldr	r3, [pc, #4]	@ (8008104 <__errno+0x8>)
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000064 	.word	0x20000064

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	@ (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	@ (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	@ (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	@ (800814c <__libc_init_array+0x44>)
 800811c:	f001 ffd0 	bl	800a0c0 <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	0800a590 	.word	0x0800a590
 8008144:	0800a590 	.word	0x0800a590
 8008148:	0800a590 	.word	0x0800a590
 800814c:	0800a594 	.word	0x0800a594

08008150 <__retarget_lock_init_recursive>:
 8008150:	4770      	bx	lr

08008152 <__retarget_lock_acquire_recursive>:
 8008152:	4770      	bx	lr

08008154 <__retarget_lock_release_recursive>:
 8008154:	4770      	bx	lr

08008156 <quorem>:
 8008156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	6903      	ldr	r3, [r0, #16]
 800815c:	690c      	ldr	r4, [r1, #16]
 800815e:	42a3      	cmp	r3, r4
 8008160:	4607      	mov	r7, r0
 8008162:	db7e      	blt.n	8008262 <quorem+0x10c>
 8008164:	3c01      	subs	r4, #1
 8008166:	f101 0814 	add.w	r8, r1, #20
 800816a:	00a3      	lsls	r3, r4, #2
 800816c:	f100 0514 	add.w	r5, r0, #20
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800817c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008180:	3301      	adds	r3, #1
 8008182:	429a      	cmp	r2, r3
 8008184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008188:	fbb2 f6f3 	udiv	r6, r2, r3
 800818c:	d32e      	bcc.n	80081ec <quorem+0x96>
 800818e:	f04f 0a00 	mov.w	sl, #0
 8008192:	46c4      	mov	ip, r8
 8008194:	46ae      	mov	lr, r5
 8008196:	46d3      	mov	fp, sl
 8008198:	f85c 3b04 	ldr.w	r3, [ip], #4
 800819c:	b298      	uxth	r0, r3
 800819e:	fb06 a000 	mla	r0, r6, r0, sl
 80081a2:	0c02      	lsrs	r2, r0, #16
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	fb06 2303 	mla	r3, r6, r3, r2
 80081aa:	f8de 2000 	ldr.w	r2, [lr]
 80081ae:	b280      	uxth	r0, r0
 80081b0:	b292      	uxth	r2, r2
 80081b2:	1a12      	subs	r2, r2, r0
 80081b4:	445a      	add	r2, fp
 80081b6:	f8de 0000 	ldr.w	r0, [lr]
 80081ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80081c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80081c8:	b292      	uxth	r2, r2
 80081ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081ce:	45e1      	cmp	r9, ip
 80081d0:	f84e 2b04 	str.w	r2, [lr], #4
 80081d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081d8:	d2de      	bcs.n	8008198 <quorem+0x42>
 80081da:	9b00      	ldr	r3, [sp, #0]
 80081dc:	58eb      	ldr	r3, [r5, r3]
 80081de:	b92b      	cbnz	r3, 80081ec <quorem+0x96>
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	3b04      	subs	r3, #4
 80081e4:	429d      	cmp	r5, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	d32f      	bcc.n	800824a <quorem+0xf4>
 80081ea:	613c      	str	r4, [r7, #16]
 80081ec:	4638      	mov	r0, r7
 80081ee:	f001 f979 	bl	80094e4 <__mcmp>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	db25      	blt.n	8008242 <quorem+0xec>
 80081f6:	4629      	mov	r1, r5
 80081f8:	2000      	movs	r0, #0
 80081fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80081fe:	f8d1 c000 	ldr.w	ip, [r1]
 8008202:	fa1f fe82 	uxth.w	lr, r2
 8008206:	fa1f f38c 	uxth.w	r3, ip
 800820a:	eba3 030e 	sub.w	r3, r3, lr
 800820e:	4403      	add	r3, r0
 8008210:	0c12      	lsrs	r2, r2, #16
 8008212:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008216:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800821a:	b29b      	uxth	r3, r3
 800821c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008220:	45c1      	cmp	r9, r8
 8008222:	f841 3b04 	str.w	r3, [r1], #4
 8008226:	ea4f 4022 	mov.w	r0, r2, asr #16
 800822a:	d2e6      	bcs.n	80081fa <quorem+0xa4>
 800822c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008234:	b922      	cbnz	r2, 8008240 <quorem+0xea>
 8008236:	3b04      	subs	r3, #4
 8008238:	429d      	cmp	r5, r3
 800823a:	461a      	mov	r2, r3
 800823c:	d30b      	bcc.n	8008256 <quorem+0x100>
 800823e:	613c      	str	r4, [r7, #16]
 8008240:	3601      	adds	r6, #1
 8008242:	4630      	mov	r0, r6
 8008244:	b003      	add	sp, #12
 8008246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	3b04      	subs	r3, #4
 800824e:	2a00      	cmp	r2, #0
 8008250:	d1cb      	bne.n	80081ea <quorem+0x94>
 8008252:	3c01      	subs	r4, #1
 8008254:	e7c6      	b.n	80081e4 <quorem+0x8e>
 8008256:	6812      	ldr	r2, [r2, #0]
 8008258:	3b04      	subs	r3, #4
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1ef      	bne.n	800823e <quorem+0xe8>
 800825e:	3c01      	subs	r4, #1
 8008260:	e7ea      	b.n	8008238 <quorem+0xe2>
 8008262:	2000      	movs	r0, #0
 8008264:	e7ee      	b.n	8008244 <quorem+0xee>
	...

08008268 <_dtoa_r>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	69c7      	ldr	r7, [r0, #28]
 800826e:	b099      	sub	sp, #100	@ 0x64
 8008270:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008274:	ec55 4b10 	vmov	r4, r5, d0
 8008278:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800827a:	9109      	str	r1, [sp, #36]	@ 0x24
 800827c:	4683      	mov	fp, r0
 800827e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008280:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008282:	b97f      	cbnz	r7, 80082a4 <_dtoa_r+0x3c>
 8008284:	2010      	movs	r0, #16
 8008286:	f000 fdfd 	bl	8008e84 <malloc>
 800828a:	4602      	mov	r2, r0
 800828c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008290:	b920      	cbnz	r0, 800829c <_dtoa_r+0x34>
 8008292:	4ba7      	ldr	r3, [pc, #668]	@ (8008530 <_dtoa_r+0x2c8>)
 8008294:	21ef      	movs	r1, #239	@ 0xef
 8008296:	48a7      	ldr	r0, [pc, #668]	@ (8008534 <_dtoa_r+0x2cc>)
 8008298:	f001 fcec 	bl	8009c74 <__assert_func>
 800829c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082a0:	6007      	str	r7, [r0, #0]
 80082a2:	60c7      	str	r7, [r0, #12]
 80082a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082a8:	6819      	ldr	r1, [r3, #0]
 80082aa:	b159      	cbz	r1, 80082c4 <_dtoa_r+0x5c>
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	604a      	str	r2, [r1, #4]
 80082b0:	2301      	movs	r3, #1
 80082b2:	4093      	lsls	r3, r2
 80082b4:	608b      	str	r3, [r1, #8]
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 feda 	bl	8009070 <_Bfree>
 80082bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	1e2b      	subs	r3, r5, #0
 80082c6:	bfb9      	ittee	lt
 80082c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082cc:	9303      	strlt	r3, [sp, #12]
 80082ce:	2300      	movge	r3, #0
 80082d0:	6033      	strge	r3, [r6, #0]
 80082d2:	9f03      	ldr	r7, [sp, #12]
 80082d4:	4b98      	ldr	r3, [pc, #608]	@ (8008538 <_dtoa_r+0x2d0>)
 80082d6:	bfbc      	itt	lt
 80082d8:	2201      	movlt	r2, #1
 80082da:	6032      	strlt	r2, [r6, #0]
 80082dc:	43bb      	bics	r3, r7
 80082de:	d112      	bne.n	8008306 <_dtoa_r+0x9e>
 80082e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082ec:	4323      	orrs	r3, r4
 80082ee:	f000 854d 	beq.w	8008d8c <_dtoa_r+0xb24>
 80082f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800854c <_dtoa_r+0x2e4>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 854f 	beq.w	8008d9c <_dtoa_r+0xb34>
 80082fe:	f10a 0303 	add.w	r3, sl, #3
 8008302:	f000 bd49 	b.w	8008d98 <_dtoa_r+0xb30>
 8008306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	ec51 0b17 	vmov	r0, r1, d7
 8008310:	2300      	movs	r3, #0
 8008312:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008316:	f7f8 fbf7 	bl	8000b08 <__aeabi_dcmpeq>
 800831a:	4680      	mov	r8, r0
 800831c:	b158      	cbz	r0, 8008336 <_dtoa_r+0xce>
 800831e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008320:	2301      	movs	r3, #1
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008326:	b113      	cbz	r3, 800832e <_dtoa_r+0xc6>
 8008328:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800832a:	4b84      	ldr	r3, [pc, #528]	@ (800853c <_dtoa_r+0x2d4>)
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008550 <_dtoa_r+0x2e8>
 8008332:	f000 bd33 	b.w	8008d9c <_dtoa_r+0xb34>
 8008336:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800833a:	aa16      	add	r2, sp, #88	@ 0x58
 800833c:	a917      	add	r1, sp, #92	@ 0x5c
 800833e:	4658      	mov	r0, fp
 8008340:	f001 f980 	bl	8009644 <__d2b>
 8008344:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008348:	4681      	mov	r9, r0
 800834a:	2e00      	cmp	r6, #0
 800834c:	d077      	beq.n	800843e <_dtoa_r+0x1d6>
 800834e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008350:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800835c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008360:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008364:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008368:	4619      	mov	r1, r3
 800836a:	2200      	movs	r2, #0
 800836c:	4b74      	ldr	r3, [pc, #464]	@ (8008540 <_dtoa_r+0x2d8>)
 800836e:	f7f7 ffab 	bl	80002c8 <__aeabi_dsub>
 8008372:	a369      	add	r3, pc, #420	@ (adr r3, 8008518 <_dtoa_r+0x2b0>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f8 f95e 	bl	8000638 <__aeabi_dmul>
 800837c:	a368      	add	r3, pc, #416	@ (adr r3, 8008520 <_dtoa_r+0x2b8>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f7 ffa3 	bl	80002cc <__adddf3>
 8008386:	4604      	mov	r4, r0
 8008388:	4630      	mov	r0, r6
 800838a:	460d      	mov	r5, r1
 800838c:	f7f8 f8ea 	bl	8000564 <__aeabi_i2d>
 8008390:	a365      	add	r3, pc, #404	@ (adr r3, 8008528 <_dtoa_r+0x2c0>)
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f7f8 f94f 	bl	8000638 <__aeabi_dmul>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f7 ff93 	bl	80002cc <__adddf3>
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	f7f8 fbf5 	bl	8000b98 <__aeabi_d2iz>
 80083ae:	2200      	movs	r2, #0
 80083b0:	4607      	mov	r7, r0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f8 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80083bc:	b140      	cbz	r0, 80083d0 <_dtoa_r+0x168>
 80083be:	4638      	mov	r0, r7
 80083c0:	f7f8 f8d0 	bl	8000564 <__aeabi_i2d>
 80083c4:	4622      	mov	r2, r4
 80083c6:	462b      	mov	r3, r5
 80083c8:	f7f8 fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 80083cc:	b900      	cbnz	r0, 80083d0 <_dtoa_r+0x168>
 80083ce:	3f01      	subs	r7, #1
 80083d0:	2f16      	cmp	r7, #22
 80083d2:	d851      	bhi.n	8008478 <_dtoa_r+0x210>
 80083d4:	4b5b      	ldr	r3, [pc, #364]	@ (8008544 <_dtoa_r+0x2dc>)
 80083d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e2:	f7f8 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d048      	beq.n	800847c <_dtoa_r+0x214>
 80083ea:	3f01      	subs	r7, #1
 80083ec:	2300      	movs	r3, #0
 80083ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80083f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083f2:	1b9b      	subs	r3, r3, r6
 80083f4:	1e5a      	subs	r2, r3, #1
 80083f6:	bf44      	itt	mi
 80083f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80083fc:	2300      	movmi	r3, #0
 80083fe:	9208      	str	r2, [sp, #32]
 8008400:	bf54      	ite	pl
 8008402:	f04f 0800 	movpl.w	r8, #0
 8008406:	9308      	strmi	r3, [sp, #32]
 8008408:	2f00      	cmp	r7, #0
 800840a:	db39      	blt.n	8008480 <_dtoa_r+0x218>
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008410:	443b      	add	r3, r7
 8008412:	9308      	str	r3, [sp, #32]
 8008414:	2300      	movs	r3, #0
 8008416:	930a      	str	r3, [sp, #40]	@ 0x28
 8008418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841a:	2b09      	cmp	r3, #9
 800841c:	d864      	bhi.n	80084e8 <_dtoa_r+0x280>
 800841e:	2b05      	cmp	r3, #5
 8008420:	bfc4      	itt	gt
 8008422:	3b04      	subgt	r3, #4
 8008424:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008428:	f1a3 0302 	sub.w	r3, r3, #2
 800842c:	bfcc      	ite	gt
 800842e:	2400      	movgt	r4, #0
 8008430:	2401      	movle	r4, #1
 8008432:	2b03      	cmp	r3, #3
 8008434:	d863      	bhi.n	80084fe <_dtoa_r+0x296>
 8008436:	e8df f003 	tbb	[pc, r3]
 800843a:	372a      	.short	0x372a
 800843c:	5535      	.short	0x5535
 800843e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008442:	441e      	add	r6, r3
 8008444:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008448:	2b20      	cmp	r3, #32
 800844a:	bfc1      	itttt	gt
 800844c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008450:	409f      	lslgt	r7, r3
 8008452:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008456:	fa24 f303 	lsrgt.w	r3, r4, r3
 800845a:	bfd6      	itet	le
 800845c:	f1c3 0320 	rsble	r3, r3, #32
 8008460:	ea47 0003 	orrgt.w	r0, r7, r3
 8008464:	fa04 f003 	lslle.w	r0, r4, r3
 8008468:	f7f8 f86c 	bl	8000544 <__aeabi_ui2d>
 800846c:	2201      	movs	r2, #1
 800846e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008472:	3e01      	subs	r6, #1
 8008474:	9214      	str	r2, [sp, #80]	@ 0x50
 8008476:	e777      	b.n	8008368 <_dtoa_r+0x100>
 8008478:	2301      	movs	r3, #1
 800847a:	e7b8      	b.n	80083ee <_dtoa_r+0x186>
 800847c:	9012      	str	r0, [sp, #72]	@ 0x48
 800847e:	e7b7      	b.n	80083f0 <_dtoa_r+0x188>
 8008480:	427b      	negs	r3, r7
 8008482:	930a      	str	r3, [sp, #40]	@ 0x28
 8008484:	2300      	movs	r3, #0
 8008486:	eba8 0807 	sub.w	r8, r8, r7
 800848a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800848c:	e7c4      	b.n	8008418 <_dtoa_r+0x1b0>
 800848e:	2300      	movs	r3, #0
 8008490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	dc35      	bgt.n	8008504 <_dtoa_r+0x29c>
 8008498:	2301      	movs	r3, #1
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	461a      	mov	r2, r3
 80084a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084a2:	e00b      	b.n	80084bc <_dtoa_r+0x254>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e7f3      	b.n	8008490 <_dtoa_r+0x228>
 80084a8:	2300      	movs	r3, #0
 80084aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	bfb8      	it	lt
 80084ba:	2301      	movlt	r3, #1
 80084bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80084c0:	2100      	movs	r1, #0
 80084c2:	2204      	movs	r2, #4
 80084c4:	f102 0514 	add.w	r5, r2, #20
 80084c8:	429d      	cmp	r5, r3
 80084ca:	d91f      	bls.n	800850c <_dtoa_r+0x2a4>
 80084cc:	6041      	str	r1, [r0, #4]
 80084ce:	4658      	mov	r0, fp
 80084d0:	f000 fd8e 	bl	8008ff0 <_Balloc>
 80084d4:	4682      	mov	sl, r0
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d13c      	bne.n	8008554 <_dtoa_r+0x2ec>
 80084da:	4b1b      	ldr	r3, [pc, #108]	@ (8008548 <_dtoa_r+0x2e0>)
 80084dc:	4602      	mov	r2, r0
 80084de:	f240 11af 	movw	r1, #431	@ 0x1af
 80084e2:	e6d8      	b.n	8008296 <_dtoa_r+0x2e>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7e0      	b.n	80084aa <_dtoa_r+0x242>
 80084e8:	2401      	movs	r4, #1
 80084ea:	2300      	movs	r3, #0
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084f0:	f04f 33ff 	mov.w	r3, #4294967295
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	2200      	movs	r2, #0
 80084fa:	2312      	movs	r3, #18
 80084fc:	e7d0      	b.n	80084a0 <_dtoa_r+0x238>
 80084fe:	2301      	movs	r3, #1
 8008500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008502:	e7f5      	b.n	80084f0 <_dtoa_r+0x288>
 8008504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	9307      	str	r3, [sp, #28]
 800850a:	e7d7      	b.n	80084bc <_dtoa_r+0x254>
 800850c:	3101      	adds	r1, #1
 800850e:	0052      	lsls	r2, r2, #1
 8008510:	e7d8      	b.n	80084c4 <_dtoa_r+0x25c>
 8008512:	bf00      	nop
 8008514:	f3af 8000 	nop.w
 8008518:	636f4361 	.word	0x636f4361
 800851c:	3fd287a7 	.word	0x3fd287a7
 8008520:	8b60c8b3 	.word	0x8b60c8b3
 8008524:	3fc68a28 	.word	0x3fc68a28
 8008528:	509f79fb 	.word	0x509f79fb
 800852c:	3fd34413 	.word	0x3fd34413
 8008530:	0800a356 	.word	0x0800a356
 8008534:	0800a36d 	.word	0x0800a36d
 8008538:	7ff00000 	.word	0x7ff00000
 800853c:	0800a326 	.word	0x0800a326
 8008540:	3ff80000 	.word	0x3ff80000
 8008544:	0800a468 	.word	0x0800a468
 8008548:	0800a3c5 	.word	0x0800a3c5
 800854c:	0800a352 	.word	0x0800a352
 8008550:	0800a325 	.word	0x0800a325
 8008554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008558:	6018      	str	r0, [r3, #0]
 800855a:	9b07      	ldr	r3, [sp, #28]
 800855c:	2b0e      	cmp	r3, #14
 800855e:	f200 80a4 	bhi.w	80086aa <_dtoa_r+0x442>
 8008562:	2c00      	cmp	r4, #0
 8008564:	f000 80a1 	beq.w	80086aa <_dtoa_r+0x442>
 8008568:	2f00      	cmp	r7, #0
 800856a:	dd33      	ble.n	80085d4 <_dtoa_r+0x36c>
 800856c:	4bad      	ldr	r3, [pc, #692]	@ (8008824 <_dtoa_r+0x5bc>)
 800856e:	f007 020f 	and.w	r2, r7, #15
 8008572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008576:	ed93 7b00 	vldr	d7, [r3]
 800857a:	05f8      	lsls	r0, r7, #23
 800857c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008580:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008584:	d516      	bpl.n	80085b4 <_dtoa_r+0x34c>
 8008586:	4ba8      	ldr	r3, [pc, #672]	@ (8008828 <_dtoa_r+0x5c0>)
 8008588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800858c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008590:	f7f8 f97c 	bl	800088c <__aeabi_ddiv>
 8008594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008598:	f004 040f 	and.w	r4, r4, #15
 800859c:	2603      	movs	r6, #3
 800859e:	4da2      	ldr	r5, [pc, #648]	@ (8008828 <_dtoa_r+0x5c0>)
 80085a0:	b954      	cbnz	r4, 80085b8 <_dtoa_r+0x350>
 80085a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085aa:	f7f8 f96f 	bl	800088c <__aeabi_ddiv>
 80085ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b2:	e028      	b.n	8008606 <_dtoa_r+0x39e>
 80085b4:	2602      	movs	r6, #2
 80085b6:	e7f2      	b.n	800859e <_dtoa_r+0x336>
 80085b8:	07e1      	lsls	r1, r4, #31
 80085ba:	d508      	bpl.n	80085ce <_dtoa_r+0x366>
 80085bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085c4:	f7f8 f838 	bl	8000638 <__aeabi_dmul>
 80085c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085cc:	3601      	adds	r6, #1
 80085ce:	1064      	asrs	r4, r4, #1
 80085d0:	3508      	adds	r5, #8
 80085d2:	e7e5      	b.n	80085a0 <_dtoa_r+0x338>
 80085d4:	f000 80d2 	beq.w	800877c <_dtoa_r+0x514>
 80085d8:	427c      	negs	r4, r7
 80085da:	4b92      	ldr	r3, [pc, #584]	@ (8008824 <_dtoa_r+0x5bc>)
 80085dc:	4d92      	ldr	r5, [pc, #584]	@ (8008828 <_dtoa_r+0x5c0>)
 80085de:	f004 020f 	and.w	r2, r4, #15
 80085e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ee:	f7f8 f823 	bl	8000638 <__aeabi_dmul>
 80085f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f6:	1124      	asrs	r4, r4, #4
 80085f8:	2300      	movs	r3, #0
 80085fa:	2602      	movs	r6, #2
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	f040 80b2 	bne.w	8008766 <_dtoa_r+0x4fe>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1d3      	bne.n	80085ae <_dtoa_r+0x346>
 8008606:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008608:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80b7 	beq.w	8008780 <_dtoa_r+0x518>
 8008612:	4b86      	ldr	r3, [pc, #536]	@ (800882c <_dtoa_r+0x5c4>)
 8008614:	2200      	movs	r2, #0
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	f000 80ae 	beq.w	8008780 <_dtoa_r+0x518>
 8008624:	9b07      	ldr	r3, [sp, #28]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80aa 	beq.w	8008780 <_dtoa_r+0x518>
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dd37      	ble.n	80086a2 <_dtoa_r+0x43a>
 8008632:	1e7b      	subs	r3, r7, #1
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	4620      	mov	r0, r4
 8008638:	4b7d      	ldr	r3, [pc, #500]	@ (8008830 <_dtoa_r+0x5c8>)
 800863a:	2200      	movs	r2, #0
 800863c:	4629      	mov	r1, r5
 800863e:	f7f7 fffb 	bl	8000638 <__aeabi_dmul>
 8008642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008646:	9c00      	ldr	r4, [sp, #0]
 8008648:	3601      	adds	r6, #1
 800864a:	4630      	mov	r0, r6
 800864c:	f7f7 ff8a 	bl	8000564 <__aeabi_i2d>
 8008650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008654:	f7f7 fff0 	bl	8000638 <__aeabi_dmul>
 8008658:	4b76      	ldr	r3, [pc, #472]	@ (8008834 <_dtoa_r+0x5cc>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 fe36 	bl	80002cc <__adddf3>
 8008660:	4605      	mov	r5, r0
 8008662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008666:	2c00      	cmp	r4, #0
 8008668:	f040 808d 	bne.w	8008786 <_dtoa_r+0x51e>
 800866c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008670:	4b71      	ldr	r3, [pc, #452]	@ (8008838 <_dtoa_r+0x5d0>)
 8008672:	2200      	movs	r2, #0
 8008674:	f7f7 fe28 	bl	80002c8 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008680:	462a      	mov	r2, r5
 8008682:	4633      	mov	r3, r6
 8008684:	f7f8 fa68 	bl	8000b58 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	f040 828b 	bne.w	8008ba4 <_dtoa_r+0x93c>
 800868e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008692:	462a      	mov	r2, r5
 8008694:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008698:	f7f8 fa40 	bl	8000b1c <__aeabi_dcmplt>
 800869c:	2800      	cmp	r0, #0
 800869e:	f040 8128 	bne.w	80088f2 <_dtoa_r+0x68a>
 80086a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80086a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80086aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f2c0 815a 	blt.w	8008966 <_dtoa_r+0x6fe>
 80086b2:	2f0e      	cmp	r7, #14
 80086b4:	f300 8157 	bgt.w	8008966 <_dtoa_r+0x6fe>
 80086b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008824 <_dtoa_r+0x5bc>)
 80086ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086be:	ed93 7b00 	vldr	d7, [r3]
 80086c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	ed8d 7b00 	vstr	d7, [sp]
 80086ca:	da03      	bge.n	80086d4 <_dtoa_r+0x46c>
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f340 8101 	ble.w	80088d6 <_dtoa_r+0x66e>
 80086d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086d8:	4656      	mov	r6, sl
 80086da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f8 f8d3 	bl	800088c <__aeabi_ddiv>
 80086e6:	f7f8 fa57 	bl	8000b98 <__aeabi_d2iz>
 80086ea:	4680      	mov	r8, r0
 80086ec:	f7f7 ff3a 	bl	8000564 <__aeabi_i2d>
 80086f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086f4:	f7f7 ffa0 	bl	8000638 <__aeabi_dmul>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4620      	mov	r0, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008704:	f7f7 fde0 	bl	80002c8 <__aeabi_dsub>
 8008708:	f806 4b01 	strb.w	r4, [r6], #1
 800870c:	9d07      	ldr	r5, [sp, #28]
 800870e:	eba6 040a 	sub.w	r4, r6, sl
 8008712:	42a5      	cmp	r5, r4
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	f040 8117 	bne.w	800894a <_dtoa_r+0x6e2>
 800871c:	f7f7 fdd6 	bl	80002cc <__adddf3>
 8008720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	f7f8 fa16 	bl	8000b58 <__aeabi_dcmpgt>
 800872c:	2800      	cmp	r0, #0
 800872e:	f040 80f9 	bne.w	8008924 <_dtoa_r+0x6bc>
 8008732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800873e:	b118      	cbz	r0, 8008748 <_dtoa_r+0x4e0>
 8008740:	f018 0f01 	tst.w	r8, #1
 8008744:	f040 80ee 	bne.w	8008924 <_dtoa_r+0x6bc>
 8008748:	4649      	mov	r1, r9
 800874a:	4658      	mov	r0, fp
 800874c:	f000 fc90 	bl	8009070 <_Bfree>
 8008750:	2300      	movs	r3, #0
 8008752:	7033      	strb	r3, [r6, #0]
 8008754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008756:	3701      	adds	r7, #1
 8008758:	601f      	str	r7, [r3, #0]
 800875a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 831d 	beq.w	8008d9c <_dtoa_r+0xb34>
 8008762:	601e      	str	r6, [r3, #0]
 8008764:	e31a      	b.n	8008d9c <_dtoa_r+0xb34>
 8008766:	07e2      	lsls	r2, r4, #31
 8008768:	d505      	bpl.n	8008776 <_dtoa_r+0x50e>
 800876a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800876e:	f7f7 ff63 	bl	8000638 <__aeabi_dmul>
 8008772:	3601      	adds	r6, #1
 8008774:	2301      	movs	r3, #1
 8008776:	1064      	asrs	r4, r4, #1
 8008778:	3508      	adds	r5, #8
 800877a:	e73f      	b.n	80085fc <_dtoa_r+0x394>
 800877c:	2602      	movs	r6, #2
 800877e:	e742      	b.n	8008606 <_dtoa_r+0x39e>
 8008780:	9c07      	ldr	r4, [sp, #28]
 8008782:	9704      	str	r7, [sp, #16]
 8008784:	e761      	b.n	800864a <_dtoa_r+0x3e2>
 8008786:	4b27      	ldr	r3, [pc, #156]	@ (8008824 <_dtoa_r+0x5bc>)
 8008788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800878a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800878e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008792:	4454      	add	r4, sl
 8008794:	2900      	cmp	r1, #0
 8008796:	d053      	beq.n	8008840 <_dtoa_r+0x5d8>
 8008798:	4928      	ldr	r1, [pc, #160]	@ (800883c <_dtoa_r+0x5d4>)
 800879a:	2000      	movs	r0, #0
 800879c:	f7f8 f876 	bl	800088c <__aeabi_ddiv>
 80087a0:	4633      	mov	r3, r6
 80087a2:	462a      	mov	r2, r5
 80087a4:	f7f7 fd90 	bl	80002c8 <__aeabi_dsub>
 80087a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087ac:	4656      	mov	r6, sl
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	f7f8 f9f1 	bl	8000b98 <__aeabi_d2iz>
 80087b6:	4605      	mov	r5, r0
 80087b8:	f7f7 fed4 	bl	8000564 <__aeabi_i2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c4:	f7f7 fd80 	bl	80002c8 <__aeabi_dsub>
 80087c8:	3530      	adds	r5, #48	@ 0x30
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d2:	f806 5b01 	strb.w	r5, [r6], #1
 80087d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087da:	f7f8 f99f 	bl	8000b1c <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d171      	bne.n	80088c6 <_dtoa_r+0x65e>
 80087e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e6:	4911      	ldr	r1, [pc, #68]	@ (800882c <_dtoa_r+0x5c4>)
 80087e8:	2000      	movs	r0, #0
 80087ea:	f7f7 fd6d 	bl	80002c8 <__aeabi_dsub>
 80087ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087f2:	f7f8 f993 	bl	8000b1c <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f040 8095 	bne.w	8008926 <_dtoa_r+0x6be>
 80087fc:	42a6      	cmp	r6, r4
 80087fe:	f43f af50 	beq.w	80086a2 <_dtoa_r+0x43a>
 8008802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008806:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <_dtoa_r+0x5c8>)
 8008808:	2200      	movs	r2, #0
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	4b08      	ldr	r3, [pc, #32]	@ (8008830 <_dtoa_r+0x5c8>)
 8008810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008814:	2200      	movs	r2, #0
 8008816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881a:	f7f7 ff0d 	bl	8000638 <__aeabi_dmul>
 800881e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008822:	e7c4      	b.n	80087ae <_dtoa_r+0x546>
 8008824:	0800a468 	.word	0x0800a468
 8008828:	0800a440 	.word	0x0800a440
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	40240000 	.word	0x40240000
 8008834:	401c0000 	.word	0x401c0000
 8008838:	40140000 	.word	0x40140000
 800883c:	3fe00000 	.word	0x3fe00000
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	f7f7 fef8 	bl	8000638 <__aeabi_dmul>
 8008848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800884c:	9415      	str	r4, [sp, #84]	@ 0x54
 800884e:	4656      	mov	r6, sl
 8008850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008854:	f7f8 f9a0 	bl	8000b98 <__aeabi_d2iz>
 8008858:	4605      	mov	r5, r0
 800885a:	f7f7 fe83 	bl	8000564 <__aeabi_i2d>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008866:	f7f7 fd2f 	bl	80002c8 <__aeabi_dsub>
 800886a:	3530      	adds	r5, #48	@ 0x30
 800886c:	f806 5b01 	strb.w	r5, [r6], #1
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	42a6      	cmp	r6, r4
 8008876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	d124      	bne.n	80088ca <_dtoa_r+0x662>
 8008880:	4bac      	ldr	r3, [pc, #688]	@ (8008b34 <_dtoa_r+0x8cc>)
 8008882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008886:	f7f7 fd21 	bl	80002cc <__adddf3>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008892:	f7f8 f961 	bl	8000b58 <__aeabi_dcmpgt>
 8008896:	2800      	cmp	r0, #0
 8008898:	d145      	bne.n	8008926 <_dtoa_r+0x6be>
 800889a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800889e:	49a5      	ldr	r1, [pc, #660]	@ (8008b34 <_dtoa_r+0x8cc>)
 80088a0:	2000      	movs	r0, #0
 80088a2:	f7f7 fd11 	bl	80002c8 <__aeabi_dsub>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ae:	f7f8 f935 	bl	8000b1c <__aeabi_dcmplt>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f43f aef5 	beq.w	80086a2 <_dtoa_r+0x43a>
 80088b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80088ba:	1e73      	subs	r3, r6, #1
 80088bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80088be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088c2:	2b30      	cmp	r3, #48	@ 0x30
 80088c4:	d0f8      	beq.n	80088b8 <_dtoa_r+0x650>
 80088c6:	9f04      	ldr	r7, [sp, #16]
 80088c8:	e73e      	b.n	8008748 <_dtoa_r+0x4e0>
 80088ca:	4b9b      	ldr	r3, [pc, #620]	@ (8008b38 <_dtoa_r+0x8d0>)
 80088cc:	f7f7 feb4 	bl	8000638 <__aeabi_dmul>
 80088d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d4:	e7bc      	b.n	8008850 <_dtoa_r+0x5e8>
 80088d6:	d10c      	bne.n	80088f2 <_dtoa_r+0x68a>
 80088d8:	4b98      	ldr	r3, [pc, #608]	@ (8008b3c <_dtoa_r+0x8d4>)
 80088da:	2200      	movs	r2, #0
 80088dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088e0:	f7f7 feaa 	bl	8000638 <__aeabi_dmul>
 80088e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088e8:	f7f8 f92c 	bl	8000b44 <__aeabi_dcmpge>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f000 8157 	beq.w	8008ba0 <_dtoa_r+0x938>
 80088f2:	2400      	movs	r4, #0
 80088f4:	4625      	mov	r5, r4
 80088f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f8:	43db      	mvns	r3, r3
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	4656      	mov	r6, sl
 80088fe:	2700      	movs	r7, #0
 8008900:	4621      	mov	r1, r4
 8008902:	4658      	mov	r0, fp
 8008904:	f000 fbb4 	bl	8009070 <_Bfree>
 8008908:	2d00      	cmp	r5, #0
 800890a:	d0dc      	beq.n	80088c6 <_dtoa_r+0x65e>
 800890c:	b12f      	cbz	r7, 800891a <_dtoa_r+0x6b2>
 800890e:	42af      	cmp	r7, r5
 8008910:	d003      	beq.n	800891a <_dtoa_r+0x6b2>
 8008912:	4639      	mov	r1, r7
 8008914:	4658      	mov	r0, fp
 8008916:	f000 fbab 	bl	8009070 <_Bfree>
 800891a:	4629      	mov	r1, r5
 800891c:	4658      	mov	r0, fp
 800891e:	f000 fba7 	bl	8009070 <_Bfree>
 8008922:	e7d0      	b.n	80088c6 <_dtoa_r+0x65e>
 8008924:	9704      	str	r7, [sp, #16]
 8008926:	4633      	mov	r3, r6
 8008928:	461e      	mov	r6, r3
 800892a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800892e:	2a39      	cmp	r2, #57	@ 0x39
 8008930:	d107      	bne.n	8008942 <_dtoa_r+0x6da>
 8008932:	459a      	cmp	sl, r3
 8008934:	d1f8      	bne.n	8008928 <_dtoa_r+0x6c0>
 8008936:	9a04      	ldr	r2, [sp, #16]
 8008938:	3201      	adds	r2, #1
 800893a:	9204      	str	r2, [sp, #16]
 800893c:	2230      	movs	r2, #48	@ 0x30
 800893e:	f88a 2000 	strb.w	r2, [sl]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	3201      	adds	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	e7bd      	b.n	80088c6 <_dtoa_r+0x65e>
 800894a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b38 <_dtoa_r+0x8d0>)
 800894c:	2200      	movs	r2, #0
 800894e:	f7f7 fe73 	bl	8000638 <__aeabi_dmul>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	f7f8 f8d5 	bl	8000b08 <__aeabi_dcmpeq>
 800895e:	2800      	cmp	r0, #0
 8008960:	f43f aebb 	beq.w	80086da <_dtoa_r+0x472>
 8008964:	e6f0      	b.n	8008748 <_dtoa_r+0x4e0>
 8008966:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008968:	2a00      	cmp	r2, #0
 800896a:	f000 80db 	beq.w	8008b24 <_dtoa_r+0x8bc>
 800896e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008970:	2a01      	cmp	r2, #1
 8008972:	f300 80bf 	bgt.w	8008af4 <_dtoa_r+0x88c>
 8008976:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008978:	2a00      	cmp	r2, #0
 800897a:	f000 80b7 	beq.w	8008aec <_dtoa_r+0x884>
 800897e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008982:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008984:	4646      	mov	r6, r8
 8008986:	9a08      	ldr	r2, [sp, #32]
 8008988:	2101      	movs	r1, #1
 800898a:	441a      	add	r2, r3
 800898c:	4658      	mov	r0, fp
 800898e:	4498      	add	r8, r3
 8008990:	9208      	str	r2, [sp, #32]
 8008992:	f000 fc21 	bl	80091d8 <__i2b>
 8008996:	4605      	mov	r5, r0
 8008998:	b15e      	cbz	r6, 80089b2 <_dtoa_r+0x74a>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd08      	ble.n	80089b2 <_dtoa_r+0x74a>
 80089a0:	42b3      	cmp	r3, r6
 80089a2:	9a08      	ldr	r2, [sp, #32]
 80089a4:	bfa8      	it	ge
 80089a6:	4633      	movge	r3, r6
 80089a8:	eba8 0803 	sub.w	r8, r8, r3
 80089ac:	1af6      	subs	r6, r6, r3
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089b4:	b1f3      	cbz	r3, 80089f4 <_dtoa_r+0x78c>
 80089b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80b7 	beq.w	8008b2c <_dtoa_r+0x8c4>
 80089be:	b18c      	cbz	r4, 80089e4 <_dtoa_r+0x77c>
 80089c0:	4629      	mov	r1, r5
 80089c2:	4622      	mov	r2, r4
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fcc7 	bl	8009358 <__pow5mult>
 80089ca:	464a      	mov	r2, r9
 80089cc:	4601      	mov	r1, r0
 80089ce:	4605      	mov	r5, r0
 80089d0:	4658      	mov	r0, fp
 80089d2:	f000 fc17 	bl	8009204 <__multiply>
 80089d6:	4649      	mov	r1, r9
 80089d8:	9004      	str	r0, [sp, #16]
 80089da:	4658      	mov	r0, fp
 80089dc:	f000 fb48 	bl	8009070 <_Bfree>
 80089e0:	9b04      	ldr	r3, [sp, #16]
 80089e2:	4699      	mov	r9, r3
 80089e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e6:	1b1a      	subs	r2, r3, r4
 80089e8:	d004      	beq.n	80089f4 <_dtoa_r+0x78c>
 80089ea:	4649      	mov	r1, r9
 80089ec:	4658      	mov	r0, fp
 80089ee:	f000 fcb3 	bl	8009358 <__pow5mult>
 80089f2:	4681      	mov	r9, r0
 80089f4:	2101      	movs	r1, #1
 80089f6:	4658      	mov	r0, fp
 80089f8:	f000 fbee 	bl	80091d8 <__i2b>
 80089fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fe:	4604      	mov	r4, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 81cf 	beq.w	8008da4 <_dtoa_r+0xb3c>
 8008a06:	461a      	mov	r2, r3
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4658      	mov	r0, fp
 8008a0c:	f000 fca4 	bl	8009358 <__pow5mult>
 8008a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	4604      	mov	r4, r0
 8008a16:	f300 8095 	bgt.w	8008b44 <_dtoa_r+0x8dc>
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 8087 	bne.w	8008b30 <_dtoa_r+0x8c8>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 8089 	bne.w	8008b40 <_dtoa_r+0x8d8>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a34:	0d1b      	lsrs	r3, r3, #20
 8008a36:	051b      	lsls	r3, r3, #20
 8008a38:	b12b      	cbz	r3, 8008a46 <_dtoa_r+0x7de>
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	f108 0801 	add.w	r8, r8, #1
 8008a44:	2301      	movs	r3, #1
 8008a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 81b0 	beq.w	8008db0 <_dtoa_r+0xb48>
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a56:	6918      	ldr	r0, [r3, #16]
 8008a58:	f000 fb72 	bl	8009140 <__hi0bits>
 8008a5c:	f1c0 0020 	rsb	r0, r0, #32
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	4418      	add	r0, r3
 8008a64:	f010 001f 	ands.w	r0, r0, #31
 8008a68:	d077      	beq.n	8008b5a <_dtoa_r+0x8f2>
 8008a6a:	f1c0 0320 	rsb	r3, r0, #32
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	dd6b      	ble.n	8008b4a <_dtoa_r+0x8e2>
 8008a72:	9b08      	ldr	r3, [sp, #32]
 8008a74:	f1c0 001c 	rsb	r0, r0, #28
 8008a78:	4403      	add	r3, r0
 8008a7a:	4480      	add	r8, r0
 8008a7c:	4406      	add	r6, r0
 8008a7e:	9308      	str	r3, [sp, #32]
 8008a80:	f1b8 0f00 	cmp.w	r8, #0
 8008a84:	dd05      	ble.n	8008a92 <_dtoa_r+0x82a>
 8008a86:	4649      	mov	r1, r9
 8008a88:	4642      	mov	r2, r8
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f000 fcbe 	bl	800940c <__lshift>
 8008a90:	4681      	mov	r9, r0
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dd05      	ble.n	8008aa4 <_dtoa_r+0x83c>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4658      	mov	r0, fp
 8008a9e:	f000 fcb5 	bl	800940c <__lshift>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d059      	beq.n	8008b5e <_dtoa_r+0x8f6>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4648      	mov	r0, r9
 8008aae:	f000 fd19 	bl	80094e4 <__mcmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	da53      	bge.n	8008b5e <_dtoa_r+0x8f6>
 8008ab6:	1e7b      	subs	r3, r7, #1
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	4649      	mov	r1, r9
 8008abc:	2300      	movs	r3, #0
 8008abe:	220a      	movs	r2, #10
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	f000 faf7 	bl	80090b4 <__multadd>
 8008ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ac8:	4681      	mov	r9, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8172 	beq.w	8008db4 <_dtoa_r+0xb4c>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	220a      	movs	r2, #10
 8008ad6:	4658      	mov	r0, fp
 8008ad8:	f000 faec 	bl	80090b4 <__multadd>
 8008adc:	9b00      	ldr	r3, [sp, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	dc67      	bgt.n	8008bb4 <_dtoa_r+0x94c>
 8008ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	dc41      	bgt.n	8008b6e <_dtoa_r+0x906>
 8008aea:	e063      	b.n	8008bb4 <_dtoa_r+0x94c>
 8008aec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008aee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008af2:	e746      	b.n	8008982 <_dtoa_r+0x71a>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	1e5c      	subs	r4, r3, #1
 8008af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	bfbf      	itttt	lt
 8008afe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008b02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b04:	1ae3      	sublt	r3, r4, r3
 8008b06:	bfb4      	ite	lt
 8008b08:	18d2      	addlt	r2, r2, r3
 8008b0a:	1b1c      	subge	r4, r3, r4
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	bfbc      	itt	lt
 8008b10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008b12:	2400      	movlt	r4, #0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfb5      	itete	lt
 8008b18:	eba8 0603 	sublt.w	r6, r8, r3
 8008b1c:	9b07      	ldrge	r3, [sp, #28]
 8008b1e:	2300      	movlt	r3, #0
 8008b20:	4646      	movge	r6, r8
 8008b22:	e730      	b.n	8008986 <_dtoa_r+0x71e>
 8008b24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b28:	4646      	mov	r6, r8
 8008b2a:	e735      	b.n	8008998 <_dtoa_r+0x730>
 8008b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b2e:	e75c      	b.n	80089ea <_dtoa_r+0x782>
 8008b30:	2300      	movs	r3, #0
 8008b32:	e788      	b.n	8008a46 <_dtoa_r+0x7de>
 8008b34:	3fe00000 	.word	0x3fe00000
 8008b38:	40240000 	.word	0x40240000
 8008b3c:	40140000 	.word	0x40140000
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	e780      	b.n	8008a46 <_dtoa_r+0x7de>
 8008b44:	2300      	movs	r3, #0
 8008b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b48:	e782      	b.n	8008a50 <_dtoa_r+0x7e8>
 8008b4a:	d099      	beq.n	8008a80 <_dtoa_r+0x818>
 8008b4c:	9a08      	ldr	r2, [sp, #32]
 8008b4e:	331c      	adds	r3, #28
 8008b50:	441a      	add	r2, r3
 8008b52:	4498      	add	r8, r3
 8008b54:	441e      	add	r6, r3
 8008b56:	9208      	str	r2, [sp, #32]
 8008b58:	e792      	b.n	8008a80 <_dtoa_r+0x818>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	e7f6      	b.n	8008b4c <_dtoa_r+0x8e4>
 8008b5e:	9b07      	ldr	r3, [sp, #28]
 8008b60:	9704      	str	r7, [sp, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dc20      	bgt.n	8008ba8 <_dtoa_r+0x940>
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	dd1e      	ble.n	8008bac <_dtoa_r+0x944>
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f aec0 	bne.w	80088f6 <_dtoa_r+0x68e>
 8008b76:	4621      	mov	r1, r4
 8008b78:	2205      	movs	r2, #5
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f000 fa9a 	bl	80090b4 <__multadd>
 8008b80:	4601      	mov	r1, r0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fcad 	bl	80094e4 <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f77f aeb3 	ble.w	80088f6 <_dtoa_r+0x68e>
 8008b90:	4656      	mov	r6, sl
 8008b92:	2331      	movs	r3, #49	@ 0x31
 8008b94:	f806 3b01 	strb.w	r3, [r6], #1
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	e6ae      	b.n	80088fe <_dtoa_r+0x696>
 8008ba0:	9c07      	ldr	r4, [sp, #28]
 8008ba2:	9704      	str	r7, [sp, #16]
 8008ba4:	4625      	mov	r5, r4
 8008ba6:	e7f3      	b.n	8008b90 <_dtoa_r+0x928>
 8008ba8:	9b07      	ldr	r3, [sp, #28]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 8104 	beq.w	8008dbc <_dtoa_r+0xb54>
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	dd05      	ble.n	8008bc4 <_dtoa_r+0x95c>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4632      	mov	r2, r6
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f000 fc25 	bl	800940c <__lshift>
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d05a      	beq.n	8008c80 <_dtoa_r+0xa18>
 8008bca:	6869      	ldr	r1, [r5, #4]
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f000 fa0f 	bl	8008ff0 <_Balloc>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	b928      	cbnz	r0, 8008be2 <_dtoa_r+0x97a>
 8008bd6:	4b84      	ldr	r3, [pc, #528]	@ (8008de8 <_dtoa_r+0xb80>)
 8008bd8:	4602      	mov	r2, r0
 8008bda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bde:	f7ff bb5a 	b.w	8008296 <_dtoa_r+0x2e>
 8008be2:	692a      	ldr	r2, [r5, #16]
 8008be4:	3202      	adds	r2, #2
 8008be6:	0092      	lsls	r2, r2, #2
 8008be8:	f105 010c 	add.w	r1, r5, #12
 8008bec:	300c      	adds	r0, #12
 8008bee:	f001 f833 	bl	8009c58 <memcpy>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 fc08 	bl	800940c <__lshift>
 8008bfc:	f10a 0301 	add.w	r3, sl, #1
 8008c00:	9307      	str	r3, [sp, #28]
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	4453      	add	r3, sl
 8008c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	462f      	mov	r7, r5
 8008c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c12:	4605      	mov	r5, r0
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	4621      	mov	r1, r4
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	4648      	mov	r0, r9
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	f7ff fa9a 	bl	8008156 <quorem>
 8008c22:	4639      	mov	r1, r7
 8008c24:	9002      	str	r0, [sp, #8]
 8008c26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c2a:	4648      	mov	r0, r9
 8008c2c:	f000 fc5a 	bl	80094e4 <__mcmp>
 8008c30:	462a      	mov	r2, r5
 8008c32:	9008      	str	r0, [sp, #32]
 8008c34:	4621      	mov	r1, r4
 8008c36:	4658      	mov	r0, fp
 8008c38:	f000 fc70 	bl	800951c <__mdiff>
 8008c3c:	68c2      	ldr	r2, [r0, #12]
 8008c3e:	4606      	mov	r6, r0
 8008c40:	bb02      	cbnz	r2, 8008c84 <_dtoa_r+0xa1c>
 8008c42:	4601      	mov	r1, r0
 8008c44:	4648      	mov	r0, r9
 8008c46:	f000 fc4d 	bl	80094e4 <__mcmp>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4658      	mov	r0, fp
 8008c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c52:	f000 fa0d 	bl	8009070 <_Bfree>
 8008c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c5a:	9e07      	ldr	r6, [sp, #28]
 8008c5c:	ea43 0102 	orr.w	r1, r3, r2
 8008c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c62:	4319      	orrs	r1, r3
 8008c64:	d110      	bne.n	8008c88 <_dtoa_r+0xa20>
 8008c66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c6a:	d029      	beq.n	8008cc0 <_dtoa_r+0xa58>
 8008c6c:	9b08      	ldr	r3, [sp, #32]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	dd02      	ble.n	8008c78 <_dtoa_r+0xa10>
 8008c72:	9b02      	ldr	r3, [sp, #8]
 8008c74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c78:	9b00      	ldr	r3, [sp, #0]
 8008c7a:	f883 8000 	strb.w	r8, [r3]
 8008c7e:	e63f      	b.n	8008900 <_dtoa_r+0x698>
 8008c80:	4628      	mov	r0, r5
 8008c82:	e7bb      	b.n	8008bfc <_dtoa_r+0x994>
 8008c84:	2201      	movs	r2, #1
 8008c86:	e7e1      	b.n	8008c4c <_dtoa_r+0x9e4>
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	db04      	blt.n	8008c98 <_dtoa_r+0xa30>
 8008c8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c90:	430b      	orrs	r3, r1
 8008c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c94:	430b      	orrs	r3, r1
 8008c96:	d120      	bne.n	8008cda <_dtoa_r+0xa72>
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	dded      	ble.n	8008c78 <_dtoa_r+0xa10>
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	f000 fbb3 	bl	800940c <__lshift>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4681      	mov	r9, r0
 8008caa:	f000 fc1b 	bl	80094e4 <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	dc03      	bgt.n	8008cba <_dtoa_r+0xa52>
 8008cb2:	d1e1      	bne.n	8008c78 <_dtoa_r+0xa10>
 8008cb4:	f018 0f01 	tst.w	r8, #1
 8008cb8:	d0de      	beq.n	8008c78 <_dtoa_r+0xa10>
 8008cba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cbe:	d1d8      	bne.n	8008c72 <_dtoa_r+0xa0a>
 8008cc0:	9a00      	ldr	r2, [sp, #0]
 8008cc2:	2339      	movs	r3, #57	@ 0x39
 8008cc4:	7013      	strb	r3, [r2, #0]
 8008cc6:	4633      	mov	r3, r6
 8008cc8:	461e      	mov	r6, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008cd0:	2a39      	cmp	r2, #57	@ 0x39
 8008cd2:	d052      	beq.n	8008d7a <_dtoa_r+0xb12>
 8008cd4:	3201      	adds	r2, #1
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	e612      	b.n	8008900 <_dtoa_r+0x698>
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	dd07      	ble.n	8008cee <_dtoa_r+0xa86>
 8008cde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ce2:	d0ed      	beq.n	8008cc0 <_dtoa_r+0xa58>
 8008ce4:	9a00      	ldr	r2, [sp, #0]
 8008ce6:	f108 0301 	add.w	r3, r8, #1
 8008cea:	7013      	strb	r3, [r2, #0]
 8008cec:	e608      	b.n	8008900 <_dtoa_r+0x698>
 8008cee:	9b07      	ldr	r3, [sp, #28]
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d028      	beq.n	8008d4e <_dtoa_r+0xae6>
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 f9d6 	bl	80090b4 <__multadd>
 8008d08:	42af      	cmp	r7, r5
 8008d0a:	4681      	mov	r9, r0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	f04f 020a 	mov.w	r2, #10
 8008d14:	4639      	mov	r1, r7
 8008d16:	4658      	mov	r0, fp
 8008d18:	d107      	bne.n	8008d2a <_dtoa_r+0xac2>
 8008d1a:	f000 f9cb 	bl	80090b4 <__multadd>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	4605      	mov	r5, r0
 8008d22:	9b07      	ldr	r3, [sp, #28]
 8008d24:	3301      	adds	r3, #1
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	e774      	b.n	8008c14 <_dtoa_r+0x9ac>
 8008d2a:	f000 f9c3 	bl	80090b4 <__multadd>
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4607      	mov	r7, r0
 8008d32:	2300      	movs	r3, #0
 8008d34:	220a      	movs	r2, #10
 8008d36:	4658      	mov	r0, fp
 8008d38:	f000 f9bc 	bl	80090b4 <__multadd>
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	e7f0      	b.n	8008d22 <_dtoa_r+0xaba>
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bfcc      	ite	gt
 8008d46:	461e      	movgt	r6, r3
 8008d48:	2601      	movle	r6, #1
 8008d4a:	4456      	add	r6, sl
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	4649      	mov	r1, r9
 8008d50:	2201      	movs	r2, #1
 8008d52:	4658      	mov	r0, fp
 8008d54:	f000 fb5a 	bl	800940c <__lshift>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4681      	mov	r9, r0
 8008d5c:	f000 fbc2 	bl	80094e4 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dcb0      	bgt.n	8008cc6 <_dtoa_r+0xa5e>
 8008d64:	d102      	bne.n	8008d6c <_dtoa_r+0xb04>
 8008d66:	f018 0f01 	tst.w	r8, #1
 8008d6a:	d1ac      	bne.n	8008cc6 <_dtoa_r+0xa5e>
 8008d6c:	4633      	mov	r3, r6
 8008d6e:	461e      	mov	r6, r3
 8008d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d74:	2a30      	cmp	r2, #48	@ 0x30
 8008d76:	d0fa      	beq.n	8008d6e <_dtoa_r+0xb06>
 8008d78:	e5c2      	b.n	8008900 <_dtoa_r+0x698>
 8008d7a:	459a      	cmp	sl, r3
 8008d7c:	d1a4      	bne.n	8008cc8 <_dtoa_r+0xa60>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	2331      	movs	r3, #49	@ 0x31
 8008d86:	f88a 3000 	strb.w	r3, [sl]
 8008d8a:	e5b9      	b.n	8008900 <_dtoa_r+0x698>
 8008d8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008dec <_dtoa_r+0xb84>
 8008d92:	b11b      	cbz	r3, 8008d9c <_dtoa_r+0xb34>
 8008d94:	f10a 0308 	add.w	r3, sl, #8
 8008d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	b019      	add	sp, #100	@ 0x64
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	f77f ae37 	ble.w	8008a1a <_dtoa_r+0x7b2>
 8008dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db0:	2001      	movs	r0, #1
 8008db2:	e655      	b.n	8008a60 <_dtoa_r+0x7f8>
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f77f aed6 	ble.w	8008b68 <_dtoa_r+0x900>
 8008dbc:	4656      	mov	r6, sl
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4648      	mov	r0, r9
 8008dc2:	f7ff f9c8 	bl	8008156 <quorem>
 8008dc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008dca:	f806 8b01 	strb.w	r8, [r6], #1
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	eba6 020a 	sub.w	r2, r6, sl
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	ddb3      	ble.n	8008d40 <_dtoa_r+0xad8>
 8008dd8:	4649      	mov	r1, r9
 8008dda:	2300      	movs	r3, #0
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4658      	mov	r0, fp
 8008de0:	f000 f968 	bl	80090b4 <__multadd>
 8008de4:	4681      	mov	r9, r0
 8008de6:	e7ea      	b.n	8008dbe <_dtoa_r+0xb56>
 8008de8:	0800a3c5 	.word	0x0800a3c5
 8008dec:	0800a349 	.word	0x0800a349

08008df0 <_free_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4605      	mov	r5, r0
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d041      	beq.n	8008e7c <_free_r+0x8c>
 8008df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfc:	1f0c      	subs	r4, r1, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfb8      	it	lt
 8008e02:	18e4      	addlt	r4, r4, r3
 8008e04:	f000 f8e8 	bl	8008fd8 <__malloc_lock>
 8008e08:	4a1d      	ldr	r2, [pc, #116]	@ (8008e80 <_free_r+0x90>)
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	b933      	cbnz	r3, 8008e1c <_free_r+0x2c>
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6014      	str	r4, [r2, #0]
 8008e12:	4628      	mov	r0, r5
 8008e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e18:	f000 b8e4 	b.w	8008fe4 <__malloc_unlock>
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d908      	bls.n	8008e32 <_free_r+0x42>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	1821      	adds	r1, r4, r0
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf01      	itttt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	1809      	addeq	r1, r1, r0
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	e7ed      	b.n	8008e0e <_free_r+0x1e>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x4c>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x42>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1850      	adds	r0, r2, r1
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x6c>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	4401      	add	r1, r0
 8008e48:	1850      	adds	r0, r2, r1
 8008e4a:	4283      	cmp	r3, r0
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1e0      	bne.n	8008e12 <_free_r+0x22>
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	6053      	str	r3, [r2, #4]
 8008e56:	4408      	add	r0, r1
 8008e58:	6010      	str	r0, [r2, #0]
 8008e5a:	e7da      	b.n	8008e12 <_free_r+0x22>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x74>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	e7d6      	b.n	8008e12 <_free_r+0x22>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	1821      	adds	r1, r4, r0
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1809      	addeq	r1, r1, r0
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6054      	str	r4, [r2, #4]
 8008e7a:	e7ca      	b.n	8008e12 <_free_r+0x22>
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000610 	.word	0x20000610

08008e84 <malloc>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <malloc+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f000 b825 	b.w	8008ed8 <_malloc_r>
 8008e8e:	bf00      	nop
 8008e90:	20000064 	.word	0x20000064

08008e94 <sbrk_aligned>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4e0f      	ldr	r6, [pc, #60]	@ (8008ed4 <sbrk_aligned+0x40>)
 8008e98:	460c      	mov	r4, r1
 8008e9a:	6831      	ldr	r1, [r6, #0]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	b911      	cbnz	r1, 8008ea6 <sbrk_aligned+0x12>
 8008ea0:	f000 feca 	bl	8009c38 <_sbrk_r>
 8008ea4:	6030      	str	r0, [r6, #0]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 fec5 	bl	8009c38 <_sbrk_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d103      	bne.n	8008eba <sbrk_aligned+0x26>
 8008eb2:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	1cc4      	adds	r4, r0, #3
 8008ebc:	f024 0403 	bic.w	r4, r4, #3
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d0f8      	beq.n	8008eb6 <sbrk_aligned+0x22>
 8008ec4:	1a21      	subs	r1, r4, r0
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 feb6 	bl	8009c38 <_sbrk_r>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d1f2      	bne.n	8008eb6 <sbrk_aligned+0x22>
 8008ed0:	e7ef      	b.n	8008eb2 <sbrk_aligned+0x1e>
 8008ed2:	bf00      	nop
 8008ed4:	2000060c 	.word	0x2000060c

08008ed8 <_malloc_r>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	1ccd      	adds	r5, r1, #3
 8008ede:	f025 0503 	bic.w	r5, r5, #3
 8008ee2:	3508      	adds	r5, #8
 8008ee4:	2d0c      	cmp	r5, #12
 8008ee6:	bf38      	it	cc
 8008ee8:	250c      	movcc	r5, #12
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	4606      	mov	r6, r0
 8008eee:	db01      	blt.n	8008ef4 <_malloc_r+0x1c>
 8008ef0:	42a9      	cmp	r1, r5
 8008ef2:	d904      	bls.n	8008efe <_malloc_r+0x26>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	6033      	str	r3, [r6, #0]
 8008ef8:	2000      	movs	r0, #0
 8008efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fd4 <_malloc_r+0xfc>
 8008f02:	f000 f869 	bl	8008fd8 <__malloc_lock>
 8008f06:	f8d8 3000 	ldr.w	r3, [r8]
 8008f0a:	461c      	mov	r4, r3
 8008f0c:	bb44      	cbnz	r4, 8008f60 <_malloc_r+0x88>
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff ffbf 	bl	8008e94 <sbrk_aligned>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	4604      	mov	r4, r0
 8008f1a:	d158      	bne.n	8008fce <_malloc_r+0xf6>
 8008f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f20:	4627      	mov	r7, r4
 8008f22:	2f00      	cmp	r7, #0
 8008f24:	d143      	bne.n	8008fae <_malloc_r+0xd6>
 8008f26:	2c00      	cmp	r4, #0
 8008f28:	d04b      	beq.n	8008fc2 <_malloc_r+0xea>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	4630      	mov	r0, r6
 8008f30:	eb04 0903 	add.w	r9, r4, r3
 8008f34:	f000 fe80 	bl	8009c38 <_sbrk_r>
 8008f38:	4581      	cmp	r9, r0
 8008f3a:	d142      	bne.n	8008fc2 <_malloc_r+0xea>
 8008f3c:	6821      	ldr	r1, [r4, #0]
 8008f3e:	1a6d      	subs	r5, r5, r1
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ffa6 	bl	8008e94 <sbrk_aligned>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d03a      	beq.n	8008fc2 <_malloc_r+0xea>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	442b      	add	r3, r5
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	f8d8 3000 	ldr.w	r3, [r8]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	bb62      	cbnz	r2, 8008fb4 <_malloc_r+0xdc>
 8008f5a:	f8c8 7000 	str.w	r7, [r8]
 8008f5e:	e00f      	b.n	8008f80 <_malloc_r+0xa8>
 8008f60:	6822      	ldr	r2, [r4, #0]
 8008f62:	1b52      	subs	r2, r2, r5
 8008f64:	d420      	bmi.n	8008fa8 <_malloc_r+0xd0>
 8008f66:	2a0b      	cmp	r2, #11
 8008f68:	d917      	bls.n	8008f9a <_malloc_r+0xc2>
 8008f6a:	1961      	adds	r1, r4, r5
 8008f6c:	42a3      	cmp	r3, r4
 8008f6e:	6025      	str	r5, [r4, #0]
 8008f70:	bf18      	it	ne
 8008f72:	6059      	strne	r1, [r3, #4]
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	bf08      	it	eq
 8008f78:	f8c8 1000 	streq.w	r1, [r8]
 8008f7c:	5162      	str	r2, [r4, r5]
 8008f7e:	604b      	str	r3, [r1, #4]
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 f82f 	bl	8008fe4 <__malloc_unlock>
 8008f86:	f104 000b 	add.w	r0, r4, #11
 8008f8a:	1d23      	adds	r3, r4, #4
 8008f8c:	f020 0007 	bic.w	r0, r0, #7
 8008f90:	1ac2      	subs	r2, r0, r3
 8008f92:	bf1c      	itt	ne
 8008f94:	1a1b      	subne	r3, r3, r0
 8008f96:	50a3      	strne	r3, [r4, r2]
 8008f98:	e7af      	b.n	8008efa <_malloc_r+0x22>
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	bf0c      	ite	eq
 8008fa0:	f8c8 2000 	streq.w	r2, [r8]
 8008fa4:	605a      	strne	r2, [r3, #4]
 8008fa6:	e7eb      	b.n	8008f80 <_malloc_r+0xa8>
 8008fa8:	4623      	mov	r3, r4
 8008faa:	6864      	ldr	r4, [r4, #4]
 8008fac:	e7ae      	b.n	8008f0c <_malloc_r+0x34>
 8008fae:	463c      	mov	r4, r7
 8008fb0:	687f      	ldr	r7, [r7, #4]
 8008fb2:	e7b6      	b.n	8008f22 <_malloc_r+0x4a>
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d1fb      	bne.n	8008fb4 <_malloc_r+0xdc>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	6053      	str	r3, [r2, #4]
 8008fc0:	e7de      	b.n	8008f80 <_malloc_r+0xa8>
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 f80c 	bl	8008fe4 <__malloc_unlock>
 8008fcc:	e794      	b.n	8008ef8 <_malloc_r+0x20>
 8008fce:	6005      	str	r5, [r0, #0]
 8008fd0:	e7d6      	b.n	8008f80 <_malloc_r+0xa8>
 8008fd2:	bf00      	nop
 8008fd4:	20000610 	.word	0x20000610

08008fd8 <__malloc_lock>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	@ (8008fe0 <__malloc_lock+0x8>)
 8008fda:	f7ff b8ba 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8008fde:	bf00      	nop
 8008fe0:	20000608 	.word	0x20000608

08008fe4 <__malloc_unlock>:
 8008fe4:	4801      	ldr	r0, [pc, #4]	@ (8008fec <__malloc_unlock+0x8>)
 8008fe6:	f7ff b8b5 	b.w	8008154 <__retarget_lock_release_recursive>
 8008fea:	bf00      	nop
 8008fec:	20000608 	.word	0x20000608

08008ff0 <_Balloc>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	69c6      	ldr	r6, [r0, #28]
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	b976      	cbnz	r6, 8009018 <_Balloc+0x28>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7ff ff42 	bl	8008e84 <malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	61e0      	str	r0, [r4, #28]
 8009004:	b920      	cbnz	r0, 8009010 <_Balloc+0x20>
 8009006:	4b18      	ldr	r3, [pc, #96]	@ (8009068 <_Balloc+0x78>)
 8009008:	4818      	ldr	r0, [pc, #96]	@ (800906c <_Balloc+0x7c>)
 800900a:	216b      	movs	r1, #107	@ 0x6b
 800900c:	f000 fe32 	bl	8009c74 <__assert_func>
 8009010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009014:	6006      	str	r6, [r0, #0]
 8009016:	60c6      	str	r6, [r0, #12]
 8009018:	69e6      	ldr	r6, [r4, #28]
 800901a:	68f3      	ldr	r3, [r6, #12]
 800901c:	b183      	cbz	r3, 8009040 <_Balloc+0x50>
 800901e:	69e3      	ldr	r3, [r4, #28]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009026:	b9b8      	cbnz	r0, 8009058 <_Balloc+0x68>
 8009028:	2101      	movs	r1, #1
 800902a:	fa01 f605 	lsl.w	r6, r1, r5
 800902e:	1d72      	adds	r2, r6, #5
 8009030:	0092      	lsls	r2, r2, #2
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fe3c 	bl	8009cb0 <_calloc_r>
 8009038:	b160      	cbz	r0, 8009054 <_Balloc+0x64>
 800903a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800903e:	e00e      	b.n	800905e <_Balloc+0x6e>
 8009040:	2221      	movs	r2, #33	@ 0x21
 8009042:	2104      	movs	r1, #4
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fe33 	bl	8009cb0 <_calloc_r>
 800904a:	69e3      	ldr	r3, [r4, #28]
 800904c:	60f0      	str	r0, [r6, #12]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e4      	bne.n	800901e <_Balloc+0x2e>
 8009054:	2000      	movs	r0, #0
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	6802      	ldr	r2, [r0, #0]
 800905a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800905e:	2300      	movs	r3, #0
 8009060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009064:	e7f7      	b.n	8009056 <_Balloc+0x66>
 8009066:	bf00      	nop
 8009068:	0800a356 	.word	0x0800a356
 800906c:	0800a3d6 	.word	0x0800a3d6

08009070 <_Bfree>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	69c6      	ldr	r6, [r0, #28]
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	b976      	cbnz	r6, 8009098 <_Bfree+0x28>
 800907a:	2010      	movs	r0, #16
 800907c:	f7ff ff02 	bl	8008e84 <malloc>
 8009080:	4602      	mov	r2, r0
 8009082:	61e8      	str	r0, [r5, #28]
 8009084:	b920      	cbnz	r0, 8009090 <_Bfree+0x20>
 8009086:	4b09      	ldr	r3, [pc, #36]	@ (80090ac <_Bfree+0x3c>)
 8009088:	4809      	ldr	r0, [pc, #36]	@ (80090b0 <_Bfree+0x40>)
 800908a:	218f      	movs	r1, #143	@ 0x8f
 800908c:	f000 fdf2 	bl	8009c74 <__assert_func>
 8009090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009094:	6006      	str	r6, [r0, #0]
 8009096:	60c6      	str	r6, [r0, #12]
 8009098:	b13c      	cbz	r4, 80090aa <_Bfree+0x3a>
 800909a:	69eb      	ldr	r3, [r5, #28]
 800909c:	6862      	ldr	r2, [r4, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090a4:	6021      	str	r1, [r4, #0]
 80090a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	0800a356 	.word	0x0800a356
 80090b0:	0800a3d6 	.word	0x0800a3d6

080090b4 <__multadd>:
 80090b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b8:	690d      	ldr	r5, [r1, #16]
 80090ba:	4607      	mov	r7, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	461e      	mov	r6, r3
 80090c0:	f101 0c14 	add.w	ip, r1, #20
 80090c4:	2000      	movs	r0, #0
 80090c6:	f8dc 3000 	ldr.w	r3, [ip]
 80090ca:	b299      	uxth	r1, r3
 80090cc:	fb02 6101 	mla	r1, r2, r1, r6
 80090d0:	0c1e      	lsrs	r6, r3, #16
 80090d2:	0c0b      	lsrs	r3, r1, #16
 80090d4:	fb02 3306 	mla	r3, r2, r6, r3
 80090d8:	b289      	uxth	r1, r1
 80090da:	3001      	adds	r0, #1
 80090dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090e0:	4285      	cmp	r5, r0
 80090e2:	f84c 1b04 	str.w	r1, [ip], #4
 80090e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ea:	dcec      	bgt.n	80090c6 <__multadd+0x12>
 80090ec:	b30e      	cbz	r6, 8009132 <__multadd+0x7e>
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dc19      	bgt.n	8009128 <__multadd+0x74>
 80090f4:	6861      	ldr	r1, [r4, #4]
 80090f6:	4638      	mov	r0, r7
 80090f8:	3101      	adds	r1, #1
 80090fa:	f7ff ff79 	bl	8008ff0 <_Balloc>
 80090fe:	4680      	mov	r8, r0
 8009100:	b928      	cbnz	r0, 800910e <__multadd+0x5a>
 8009102:	4602      	mov	r2, r0
 8009104:	4b0c      	ldr	r3, [pc, #48]	@ (8009138 <__multadd+0x84>)
 8009106:	480d      	ldr	r0, [pc, #52]	@ (800913c <__multadd+0x88>)
 8009108:	21ba      	movs	r1, #186	@ 0xba
 800910a:	f000 fdb3 	bl	8009c74 <__assert_func>
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	3202      	adds	r2, #2
 8009112:	f104 010c 	add.w	r1, r4, #12
 8009116:	0092      	lsls	r2, r2, #2
 8009118:	300c      	adds	r0, #12
 800911a:	f000 fd9d 	bl	8009c58 <memcpy>
 800911e:	4621      	mov	r1, r4
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff ffa5 	bl	8009070 <_Bfree>
 8009126:	4644      	mov	r4, r8
 8009128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800912c:	3501      	adds	r5, #1
 800912e:	615e      	str	r6, [r3, #20]
 8009130:	6125      	str	r5, [r4, #16]
 8009132:	4620      	mov	r0, r4
 8009134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009138:	0800a3c5 	.word	0x0800a3c5
 800913c:	0800a3d6 	.word	0x0800a3d6

08009140 <__hi0bits>:
 8009140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009144:	4603      	mov	r3, r0
 8009146:	bf36      	itet	cc
 8009148:	0403      	lslcc	r3, r0, #16
 800914a:	2000      	movcs	r0, #0
 800914c:	2010      	movcc	r0, #16
 800914e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009152:	bf3c      	itt	cc
 8009154:	021b      	lslcc	r3, r3, #8
 8009156:	3008      	addcc	r0, #8
 8009158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800915c:	bf3c      	itt	cc
 800915e:	011b      	lslcc	r3, r3, #4
 8009160:	3004      	addcc	r0, #4
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009166:	bf3c      	itt	cc
 8009168:	009b      	lslcc	r3, r3, #2
 800916a:	3002      	addcc	r0, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	db05      	blt.n	800917c <__hi0bits+0x3c>
 8009170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009174:	f100 0001 	add.w	r0, r0, #1
 8009178:	bf08      	it	eq
 800917a:	2020      	moveq	r0, #32
 800917c:	4770      	bx	lr

0800917e <__lo0bits>:
 800917e:	6803      	ldr	r3, [r0, #0]
 8009180:	4602      	mov	r2, r0
 8009182:	f013 0007 	ands.w	r0, r3, #7
 8009186:	d00b      	beq.n	80091a0 <__lo0bits+0x22>
 8009188:	07d9      	lsls	r1, r3, #31
 800918a:	d421      	bmi.n	80091d0 <__lo0bits+0x52>
 800918c:	0798      	lsls	r0, r3, #30
 800918e:	bf49      	itett	mi
 8009190:	085b      	lsrmi	r3, r3, #1
 8009192:	089b      	lsrpl	r3, r3, #2
 8009194:	2001      	movmi	r0, #1
 8009196:	6013      	strmi	r3, [r2, #0]
 8009198:	bf5c      	itt	pl
 800919a:	6013      	strpl	r3, [r2, #0]
 800919c:	2002      	movpl	r0, #2
 800919e:	4770      	bx	lr
 80091a0:	b299      	uxth	r1, r3
 80091a2:	b909      	cbnz	r1, 80091a8 <__lo0bits+0x2a>
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	2010      	movs	r0, #16
 80091a8:	b2d9      	uxtb	r1, r3
 80091aa:	b909      	cbnz	r1, 80091b0 <__lo0bits+0x32>
 80091ac:	3008      	adds	r0, #8
 80091ae:	0a1b      	lsrs	r3, r3, #8
 80091b0:	0719      	lsls	r1, r3, #28
 80091b2:	bf04      	itt	eq
 80091b4:	091b      	lsreq	r3, r3, #4
 80091b6:	3004      	addeq	r0, #4
 80091b8:	0799      	lsls	r1, r3, #30
 80091ba:	bf04      	itt	eq
 80091bc:	089b      	lsreq	r3, r3, #2
 80091be:	3002      	addeq	r0, #2
 80091c0:	07d9      	lsls	r1, r3, #31
 80091c2:	d403      	bmi.n	80091cc <__lo0bits+0x4e>
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	f100 0001 	add.w	r0, r0, #1
 80091ca:	d003      	beq.n	80091d4 <__lo0bits+0x56>
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4770      	bx	lr
 80091d0:	2000      	movs	r0, #0
 80091d2:	4770      	bx	lr
 80091d4:	2020      	movs	r0, #32
 80091d6:	4770      	bx	lr

080091d8 <__i2b>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	460c      	mov	r4, r1
 80091dc:	2101      	movs	r1, #1
 80091de:	f7ff ff07 	bl	8008ff0 <_Balloc>
 80091e2:	4602      	mov	r2, r0
 80091e4:	b928      	cbnz	r0, 80091f2 <__i2b+0x1a>
 80091e6:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <__i2b+0x24>)
 80091e8:	4805      	ldr	r0, [pc, #20]	@ (8009200 <__i2b+0x28>)
 80091ea:	f240 1145 	movw	r1, #325	@ 0x145
 80091ee:	f000 fd41 	bl	8009c74 <__assert_func>
 80091f2:	2301      	movs	r3, #1
 80091f4:	6144      	str	r4, [r0, #20]
 80091f6:	6103      	str	r3, [r0, #16]
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	0800a3c5 	.word	0x0800a3c5
 8009200:	0800a3d6 	.word	0x0800a3d6

08009204 <__multiply>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	4614      	mov	r4, r2
 800920a:	690a      	ldr	r2, [r1, #16]
 800920c:	6923      	ldr	r3, [r4, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	bfa8      	it	ge
 8009212:	4623      	movge	r3, r4
 8009214:	460f      	mov	r7, r1
 8009216:	bfa4      	itt	ge
 8009218:	460c      	movge	r4, r1
 800921a:	461f      	movge	r7, r3
 800921c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009220:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	6861      	ldr	r1, [r4, #4]
 8009228:	eb0a 0609 	add.w	r6, sl, r9
 800922c:	42b3      	cmp	r3, r6
 800922e:	b085      	sub	sp, #20
 8009230:	bfb8      	it	lt
 8009232:	3101      	addlt	r1, #1
 8009234:	f7ff fedc 	bl	8008ff0 <_Balloc>
 8009238:	b930      	cbnz	r0, 8009248 <__multiply+0x44>
 800923a:	4602      	mov	r2, r0
 800923c:	4b44      	ldr	r3, [pc, #272]	@ (8009350 <__multiply+0x14c>)
 800923e:	4845      	ldr	r0, [pc, #276]	@ (8009354 <__multiply+0x150>)
 8009240:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009244:	f000 fd16 	bl	8009c74 <__assert_func>
 8009248:	f100 0514 	add.w	r5, r0, #20
 800924c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009250:	462b      	mov	r3, r5
 8009252:	2200      	movs	r2, #0
 8009254:	4543      	cmp	r3, r8
 8009256:	d321      	bcc.n	800929c <__multiply+0x98>
 8009258:	f107 0114 	add.w	r1, r7, #20
 800925c:	f104 0214 	add.w	r2, r4, #20
 8009260:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009264:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	1b13      	subs	r3, r2, r4
 800926c:	3b15      	subs	r3, #21
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	3304      	adds	r3, #4
 8009274:	f104 0715 	add.w	r7, r4, #21
 8009278:	42ba      	cmp	r2, r7
 800927a:	bf38      	it	cc
 800927c:	2304      	movcc	r3, #4
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	9b02      	ldr	r3, [sp, #8]
 8009282:	9103      	str	r1, [sp, #12]
 8009284:	428b      	cmp	r3, r1
 8009286:	d80c      	bhi.n	80092a2 <__multiply+0x9e>
 8009288:	2e00      	cmp	r6, #0
 800928a:	dd03      	ble.n	8009294 <__multiply+0x90>
 800928c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05b      	beq.n	800934c <__multiply+0x148>
 8009294:	6106      	str	r6, [r0, #16]
 8009296:	b005      	add	sp, #20
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	f843 2b04 	str.w	r2, [r3], #4
 80092a0:	e7d8      	b.n	8009254 <__multiply+0x50>
 80092a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80092a6:	f1ba 0f00 	cmp.w	sl, #0
 80092aa:	d024      	beq.n	80092f6 <__multiply+0xf2>
 80092ac:	f104 0e14 	add.w	lr, r4, #20
 80092b0:	46a9      	mov	r9, r5
 80092b2:	f04f 0c00 	mov.w	ip, #0
 80092b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ba:	f8d9 3000 	ldr.w	r3, [r9]
 80092be:	fa1f fb87 	uxth.w	fp, r7
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80092c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80092cc:	f8d9 7000 	ldr.w	r7, [r9]
 80092d0:	4463      	add	r3, ip
 80092d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80092da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092e4:	4572      	cmp	r2, lr
 80092e6:	f849 3b04 	str.w	r3, [r9], #4
 80092ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092ee:	d8e2      	bhi.n	80092b6 <__multiply+0xb2>
 80092f0:	9b01      	ldr	r3, [sp, #4]
 80092f2:	f845 c003 	str.w	ip, [r5, r3]
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092fc:	3104      	adds	r1, #4
 80092fe:	f1b9 0f00 	cmp.w	r9, #0
 8009302:	d021      	beq.n	8009348 <__multiply+0x144>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	f104 0c14 	add.w	ip, r4, #20
 800930a:	46ae      	mov	lr, r5
 800930c:	f04f 0a00 	mov.w	sl, #0
 8009310:	f8bc b000 	ldrh.w	fp, [ip]
 8009314:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009318:	fb09 770b 	mla	r7, r9, fp, r7
 800931c:	4457      	add	r7, sl
 800931e:	b29b      	uxth	r3, r3
 8009320:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009324:	f84e 3b04 	str.w	r3, [lr], #4
 8009328:	f85c 3b04 	ldr.w	r3, [ip], #4
 800932c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009330:	f8be 3000 	ldrh.w	r3, [lr]
 8009334:	fb09 330a 	mla	r3, r9, sl, r3
 8009338:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800933c:	4562      	cmp	r2, ip
 800933e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009342:	d8e5      	bhi.n	8009310 <__multiply+0x10c>
 8009344:	9f01      	ldr	r7, [sp, #4]
 8009346:	51eb      	str	r3, [r5, r7]
 8009348:	3504      	adds	r5, #4
 800934a:	e799      	b.n	8009280 <__multiply+0x7c>
 800934c:	3e01      	subs	r6, #1
 800934e:	e79b      	b.n	8009288 <__multiply+0x84>
 8009350:	0800a3c5 	.word	0x0800a3c5
 8009354:	0800a3d6 	.word	0x0800a3d6

08009358 <__pow5mult>:
 8009358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800935c:	4615      	mov	r5, r2
 800935e:	f012 0203 	ands.w	r2, r2, #3
 8009362:	4607      	mov	r7, r0
 8009364:	460e      	mov	r6, r1
 8009366:	d007      	beq.n	8009378 <__pow5mult+0x20>
 8009368:	4c25      	ldr	r4, [pc, #148]	@ (8009400 <__pow5mult+0xa8>)
 800936a:	3a01      	subs	r2, #1
 800936c:	2300      	movs	r3, #0
 800936e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009372:	f7ff fe9f 	bl	80090b4 <__multadd>
 8009376:	4606      	mov	r6, r0
 8009378:	10ad      	asrs	r5, r5, #2
 800937a:	d03d      	beq.n	80093f8 <__pow5mult+0xa0>
 800937c:	69fc      	ldr	r4, [r7, #28]
 800937e:	b97c      	cbnz	r4, 80093a0 <__pow5mult+0x48>
 8009380:	2010      	movs	r0, #16
 8009382:	f7ff fd7f 	bl	8008e84 <malloc>
 8009386:	4602      	mov	r2, r0
 8009388:	61f8      	str	r0, [r7, #28]
 800938a:	b928      	cbnz	r0, 8009398 <__pow5mult+0x40>
 800938c:	4b1d      	ldr	r3, [pc, #116]	@ (8009404 <__pow5mult+0xac>)
 800938e:	481e      	ldr	r0, [pc, #120]	@ (8009408 <__pow5mult+0xb0>)
 8009390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009394:	f000 fc6e 	bl	8009c74 <__assert_func>
 8009398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800939c:	6004      	str	r4, [r0, #0]
 800939e:	60c4      	str	r4, [r0, #12]
 80093a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093a8:	b94c      	cbnz	r4, 80093be <__pow5mult+0x66>
 80093aa:	f240 2171 	movw	r1, #625	@ 0x271
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7ff ff12 	bl	80091d8 <__i2b>
 80093b4:	2300      	movs	r3, #0
 80093b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ba:	4604      	mov	r4, r0
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	f04f 0900 	mov.w	r9, #0
 80093c2:	07eb      	lsls	r3, r5, #31
 80093c4:	d50a      	bpl.n	80093dc <__pow5mult+0x84>
 80093c6:	4631      	mov	r1, r6
 80093c8:	4622      	mov	r2, r4
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7ff ff1a 	bl	8009204 <__multiply>
 80093d0:	4631      	mov	r1, r6
 80093d2:	4680      	mov	r8, r0
 80093d4:	4638      	mov	r0, r7
 80093d6:	f7ff fe4b 	bl	8009070 <_Bfree>
 80093da:	4646      	mov	r6, r8
 80093dc:	106d      	asrs	r5, r5, #1
 80093de:	d00b      	beq.n	80093f8 <__pow5mult+0xa0>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	b938      	cbnz	r0, 80093f4 <__pow5mult+0x9c>
 80093e4:	4622      	mov	r2, r4
 80093e6:	4621      	mov	r1, r4
 80093e8:	4638      	mov	r0, r7
 80093ea:	f7ff ff0b 	bl	8009204 <__multiply>
 80093ee:	6020      	str	r0, [r4, #0]
 80093f0:	f8c0 9000 	str.w	r9, [r0]
 80093f4:	4604      	mov	r4, r0
 80093f6:	e7e4      	b.n	80093c2 <__pow5mult+0x6a>
 80093f8:	4630      	mov	r0, r6
 80093fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fe:	bf00      	nop
 8009400:	0800a430 	.word	0x0800a430
 8009404:	0800a356 	.word	0x0800a356
 8009408:	0800a3d6 	.word	0x0800a3d6

0800940c <__lshift>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	6849      	ldr	r1, [r1, #4]
 8009414:	6923      	ldr	r3, [r4, #16]
 8009416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	4607      	mov	r7, r0
 800941e:	4691      	mov	r9, r2
 8009420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009424:	f108 0601 	add.w	r6, r8, #1
 8009428:	42b3      	cmp	r3, r6
 800942a:	db0b      	blt.n	8009444 <__lshift+0x38>
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff fddf 	bl	8008ff0 <_Balloc>
 8009432:	4605      	mov	r5, r0
 8009434:	b948      	cbnz	r0, 800944a <__lshift+0x3e>
 8009436:	4602      	mov	r2, r0
 8009438:	4b28      	ldr	r3, [pc, #160]	@ (80094dc <__lshift+0xd0>)
 800943a:	4829      	ldr	r0, [pc, #164]	@ (80094e0 <__lshift+0xd4>)
 800943c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009440:	f000 fc18 	bl	8009c74 <__assert_func>
 8009444:	3101      	adds	r1, #1
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	e7ee      	b.n	8009428 <__lshift+0x1c>
 800944a:	2300      	movs	r3, #0
 800944c:	f100 0114 	add.w	r1, r0, #20
 8009450:	f100 0210 	add.w	r2, r0, #16
 8009454:	4618      	mov	r0, r3
 8009456:	4553      	cmp	r3, sl
 8009458:	db33      	blt.n	80094c2 <__lshift+0xb6>
 800945a:	6920      	ldr	r0, [r4, #16]
 800945c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009460:	f104 0314 	add.w	r3, r4, #20
 8009464:	f019 091f 	ands.w	r9, r9, #31
 8009468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800946c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009470:	d02b      	beq.n	80094ca <__lshift+0xbe>
 8009472:	f1c9 0e20 	rsb	lr, r9, #32
 8009476:	468a      	mov	sl, r1
 8009478:	2200      	movs	r2, #0
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	fa00 f009 	lsl.w	r0, r0, r9
 8009480:	4310      	orrs	r0, r2
 8009482:	f84a 0b04 	str.w	r0, [sl], #4
 8009486:	f853 2b04 	ldr.w	r2, [r3], #4
 800948a:	459c      	cmp	ip, r3
 800948c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009490:	d8f3      	bhi.n	800947a <__lshift+0x6e>
 8009492:	ebac 0304 	sub.w	r3, ip, r4
 8009496:	3b15      	subs	r3, #21
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	3304      	adds	r3, #4
 800949e:	f104 0015 	add.w	r0, r4, #21
 80094a2:	4584      	cmp	ip, r0
 80094a4:	bf38      	it	cc
 80094a6:	2304      	movcc	r3, #4
 80094a8:	50ca      	str	r2, [r1, r3]
 80094aa:	b10a      	cbz	r2, 80094b0 <__lshift+0xa4>
 80094ac:	f108 0602 	add.w	r6, r8, #2
 80094b0:	3e01      	subs	r6, #1
 80094b2:	4638      	mov	r0, r7
 80094b4:	612e      	str	r6, [r5, #16]
 80094b6:	4621      	mov	r1, r4
 80094b8:	f7ff fdda 	bl	8009070 <_Bfree>
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094c6:	3301      	adds	r3, #1
 80094c8:	e7c5      	b.n	8009456 <__lshift+0x4a>
 80094ca:	3904      	subs	r1, #4
 80094cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094d4:	459c      	cmp	ip, r3
 80094d6:	d8f9      	bhi.n	80094cc <__lshift+0xc0>
 80094d8:	e7ea      	b.n	80094b0 <__lshift+0xa4>
 80094da:	bf00      	nop
 80094dc:	0800a3c5 	.word	0x0800a3c5
 80094e0:	0800a3d6 	.word	0x0800a3d6

080094e4 <__mcmp>:
 80094e4:	690a      	ldr	r2, [r1, #16]
 80094e6:	4603      	mov	r3, r0
 80094e8:	6900      	ldr	r0, [r0, #16]
 80094ea:	1a80      	subs	r0, r0, r2
 80094ec:	b530      	push	{r4, r5, lr}
 80094ee:	d10e      	bne.n	800950e <__mcmp+0x2a>
 80094f0:	3314      	adds	r3, #20
 80094f2:	3114      	adds	r1, #20
 80094f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009504:	4295      	cmp	r5, r2
 8009506:	d003      	beq.n	8009510 <__mcmp+0x2c>
 8009508:	d205      	bcs.n	8009516 <__mcmp+0x32>
 800950a:	f04f 30ff 	mov.w	r0, #4294967295
 800950e:	bd30      	pop	{r4, r5, pc}
 8009510:	42a3      	cmp	r3, r4
 8009512:	d3f3      	bcc.n	80094fc <__mcmp+0x18>
 8009514:	e7fb      	b.n	800950e <__mcmp+0x2a>
 8009516:	2001      	movs	r0, #1
 8009518:	e7f9      	b.n	800950e <__mcmp+0x2a>
	...

0800951c <__mdiff>:
 800951c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	4689      	mov	r9, r1
 8009522:	4606      	mov	r6, r0
 8009524:	4611      	mov	r1, r2
 8009526:	4648      	mov	r0, r9
 8009528:	4614      	mov	r4, r2
 800952a:	f7ff ffdb 	bl	80094e4 <__mcmp>
 800952e:	1e05      	subs	r5, r0, #0
 8009530:	d112      	bne.n	8009558 <__mdiff+0x3c>
 8009532:	4629      	mov	r1, r5
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff fd5b 	bl	8008ff0 <_Balloc>
 800953a:	4602      	mov	r2, r0
 800953c:	b928      	cbnz	r0, 800954a <__mdiff+0x2e>
 800953e:	4b3f      	ldr	r3, [pc, #252]	@ (800963c <__mdiff+0x120>)
 8009540:	f240 2137 	movw	r1, #567	@ 0x237
 8009544:	483e      	ldr	r0, [pc, #248]	@ (8009640 <__mdiff+0x124>)
 8009546:	f000 fb95 	bl	8009c74 <__assert_func>
 800954a:	2301      	movs	r3, #1
 800954c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009550:	4610      	mov	r0, r2
 8009552:	b003      	add	sp, #12
 8009554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009558:	bfbc      	itt	lt
 800955a:	464b      	movlt	r3, r9
 800955c:	46a1      	movlt	r9, r4
 800955e:	4630      	mov	r0, r6
 8009560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009564:	bfba      	itte	lt
 8009566:	461c      	movlt	r4, r3
 8009568:	2501      	movlt	r5, #1
 800956a:	2500      	movge	r5, #0
 800956c:	f7ff fd40 	bl	8008ff0 <_Balloc>
 8009570:	4602      	mov	r2, r0
 8009572:	b918      	cbnz	r0, 800957c <__mdiff+0x60>
 8009574:	4b31      	ldr	r3, [pc, #196]	@ (800963c <__mdiff+0x120>)
 8009576:	f240 2145 	movw	r1, #581	@ 0x245
 800957a:	e7e3      	b.n	8009544 <__mdiff+0x28>
 800957c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009580:	6926      	ldr	r6, [r4, #16]
 8009582:	60c5      	str	r5, [r0, #12]
 8009584:	f109 0310 	add.w	r3, r9, #16
 8009588:	f109 0514 	add.w	r5, r9, #20
 800958c:	f104 0e14 	add.w	lr, r4, #20
 8009590:	f100 0b14 	add.w	fp, r0, #20
 8009594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	46d9      	mov	r9, fp
 80095a0:	f04f 0c00 	mov.w	ip, #0
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	fa1f f38a 	uxth.w	r3, sl
 80095b4:	4619      	mov	r1, r3
 80095b6:	b283      	uxth	r3, r0
 80095b8:	1acb      	subs	r3, r1, r3
 80095ba:	0c00      	lsrs	r0, r0, #16
 80095bc:	4463      	add	r3, ip
 80095be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095cc:	4576      	cmp	r6, lr
 80095ce:	f849 3b04 	str.w	r3, [r9], #4
 80095d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095d6:	d8e5      	bhi.n	80095a4 <__mdiff+0x88>
 80095d8:	1b33      	subs	r3, r6, r4
 80095da:	3b15      	subs	r3, #21
 80095dc:	f023 0303 	bic.w	r3, r3, #3
 80095e0:	3415      	adds	r4, #21
 80095e2:	3304      	adds	r3, #4
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	bf38      	it	cc
 80095e8:	2304      	movcc	r3, #4
 80095ea:	441d      	add	r5, r3
 80095ec:	445b      	add	r3, fp
 80095ee:	461e      	mov	r6, r3
 80095f0:	462c      	mov	r4, r5
 80095f2:	4544      	cmp	r4, r8
 80095f4:	d30e      	bcc.n	8009614 <__mdiff+0xf8>
 80095f6:	f108 0103 	add.w	r1, r8, #3
 80095fa:	1b49      	subs	r1, r1, r5
 80095fc:	f021 0103 	bic.w	r1, r1, #3
 8009600:	3d03      	subs	r5, #3
 8009602:	45a8      	cmp	r8, r5
 8009604:	bf38      	it	cc
 8009606:	2100      	movcc	r1, #0
 8009608:	440b      	add	r3, r1
 800960a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800960e:	b191      	cbz	r1, 8009636 <__mdiff+0x11a>
 8009610:	6117      	str	r7, [r2, #16]
 8009612:	e79d      	b.n	8009550 <__mdiff+0x34>
 8009614:	f854 1b04 	ldr.w	r1, [r4], #4
 8009618:	46e6      	mov	lr, ip
 800961a:	0c08      	lsrs	r0, r1, #16
 800961c:	fa1c fc81 	uxtah	ip, ip, r1
 8009620:	4471      	add	r1, lr
 8009622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009626:	b289      	uxth	r1, r1
 8009628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800962c:	f846 1b04 	str.w	r1, [r6], #4
 8009630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009634:	e7dd      	b.n	80095f2 <__mdiff+0xd6>
 8009636:	3f01      	subs	r7, #1
 8009638:	e7e7      	b.n	800960a <__mdiff+0xee>
 800963a:	bf00      	nop
 800963c:	0800a3c5 	.word	0x0800a3c5
 8009640:	0800a3d6 	.word	0x0800a3d6

08009644 <__d2b>:
 8009644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009648:	460f      	mov	r7, r1
 800964a:	2101      	movs	r1, #1
 800964c:	ec59 8b10 	vmov	r8, r9, d0
 8009650:	4616      	mov	r6, r2
 8009652:	f7ff fccd 	bl	8008ff0 <_Balloc>
 8009656:	4604      	mov	r4, r0
 8009658:	b930      	cbnz	r0, 8009668 <__d2b+0x24>
 800965a:	4602      	mov	r2, r0
 800965c:	4b23      	ldr	r3, [pc, #140]	@ (80096ec <__d2b+0xa8>)
 800965e:	4824      	ldr	r0, [pc, #144]	@ (80096f0 <__d2b+0xac>)
 8009660:	f240 310f 	movw	r1, #783	@ 0x30f
 8009664:	f000 fb06 	bl	8009c74 <__assert_func>
 8009668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800966c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009670:	b10d      	cbz	r5, 8009676 <__d2b+0x32>
 8009672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	f1b8 0300 	subs.w	r3, r8, #0
 800967c:	d023      	beq.n	80096c6 <__d2b+0x82>
 800967e:	4668      	mov	r0, sp
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	f7ff fd7c 	bl	800917e <__lo0bits>
 8009686:	e9dd 1200 	ldrd	r1, r2, [sp]
 800968a:	b1d0      	cbz	r0, 80096c2 <__d2b+0x7e>
 800968c:	f1c0 0320 	rsb	r3, r0, #32
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	430b      	orrs	r3, r1
 8009696:	40c2      	lsrs	r2, r0
 8009698:	6163      	str	r3, [r4, #20]
 800969a:	9201      	str	r2, [sp, #4]
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	61a3      	str	r3, [r4, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bf0c      	ite	eq
 80096a4:	2201      	moveq	r2, #1
 80096a6:	2202      	movne	r2, #2
 80096a8:	6122      	str	r2, [r4, #16]
 80096aa:	b1a5      	cbz	r5, 80096d6 <__d2b+0x92>
 80096ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80096b0:	4405      	add	r5, r0
 80096b2:	603d      	str	r5, [r7, #0]
 80096b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80096b8:	6030      	str	r0, [r6, #0]
 80096ba:	4620      	mov	r0, r4
 80096bc:	b003      	add	sp, #12
 80096be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c2:	6161      	str	r1, [r4, #20]
 80096c4:	e7ea      	b.n	800969c <__d2b+0x58>
 80096c6:	a801      	add	r0, sp, #4
 80096c8:	f7ff fd59 	bl	800917e <__lo0bits>
 80096cc:	9b01      	ldr	r3, [sp, #4]
 80096ce:	6163      	str	r3, [r4, #20]
 80096d0:	3020      	adds	r0, #32
 80096d2:	2201      	movs	r2, #1
 80096d4:	e7e8      	b.n	80096a8 <__d2b+0x64>
 80096d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096de:	6038      	str	r0, [r7, #0]
 80096e0:	6918      	ldr	r0, [r3, #16]
 80096e2:	f7ff fd2d 	bl	8009140 <__hi0bits>
 80096e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096ea:	e7e5      	b.n	80096b8 <__d2b+0x74>
 80096ec:	0800a3c5 	.word	0x0800a3c5
 80096f0:	0800a3d6 	.word	0x0800a3d6

080096f4 <__ssputs_r>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	688e      	ldr	r6, [r1, #8]
 80096fa:	461f      	mov	r7, r3
 80096fc:	42be      	cmp	r6, r7
 80096fe:	680b      	ldr	r3, [r1, #0]
 8009700:	4682      	mov	sl, r0
 8009702:	460c      	mov	r4, r1
 8009704:	4690      	mov	r8, r2
 8009706:	d82d      	bhi.n	8009764 <__ssputs_r+0x70>
 8009708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800970c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009710:	d026      	beq.n	8009760 <__ssputs_r+0x6c>
 8009712:	6965      	ldr	r5, [r4, #20]
 8009714:	6909      	ldr	r1, [r1, #16]
 8009716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800971a:	eba3 0901 	sub.w	r9, r3, r1
 800971e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009722:	1c7b      	adds	r3, r7, #1
 8009724:	444b      	add	r3, r9
 8009726:	106d      	asrs	r5, r5, #1
 8009728:	429d      	cmp	r5, r3
 800972a:	bf38      	it	cc
 800972c:	461d      	movcc	r5, r3
 800972e:	0553      	lsls	r3, r2, #21
 8009730:	d527      	bpl.n	8009782 <__ssputs_r+0x8e>
 8009732:	4629      	mov	r1, r5
 8009734:	f7ff fbd0 	bl	8008ed8 <_malloc_r>
 8009738:	4606      	mov	r6, r0
 800973a:	b360      	cbz	r0, 8009796 <__ssputs_r+0xa2>
 800973c:	6921      	ldr	r1, [r4, #16]
 800973e:	464a      	mov	r2, r9
 8009740:	f000 fa8a 	bl	8009c58 <memcpy>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800974a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	6126      	str	r6, [r4, #16]
 8009752:	6165      	str	r5, [r4, #20]
 8009754:	444e      	add	r6, r9
 8009756:	eba5 0509 	sub.w	r5, r5, r9
 800975a:	6026      	str	r6, [r4, #0]
 800975c:	60a5      	str	r5, [r4, #8]
 800975e:	463e      	mov	r6, r7
 8009760:	42be      	cmp	r6, r7
 8009762:	d900      	bls.n	8009766 <__ssputs_r+0x72>
 8009764:	463e      	mov	r6, r7
 8009766:	6820      	ldr	r0, [r4, #0]
 8009768:	4632      	mov	r2, r6
 800976a:	4641      	mov	r1, r8
 800976c:	f000 fa28 	bl	8009bc0 <memmove>
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	1b9b      	subs	r3, r3, r6
 8009774:	60a3      	str	r3, [r4, #8]
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	4433      	add	r3, r6
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	2000      	movs	r0, #0
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	462a      	mov	r2, r5
 8009784:	f000 faba 	bl	8009cfc <_realloc_r>
 8009788:	4606      	mov	r6, r0
 800978a:	2800      	cmp	r0, #0
 800978c:	d1e0      	bne.n	8009750 <__ssputs_r+0x5c>
 800978e:	6921      	ldr	r1, [r4, #16]
 8009790:	4650      	mov	r0, sl
 8009792:	f7ff fb2d 	bl	8008df0 <_free_r>
 8009796:	230c      	movs	r3, #12
 8009798:	f8ca 3000 	str.w	r3, [sl]
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	e7e9      	b.n	800977e <__ssputs_r+0x8a>
	...

080097ac <_svfiprintf_r>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	4698      	mov	r8, r3
 80097b2:	898b      	ldrh	r3, [r1, #12]
 80097b4:	061b      	lsls	r3, r3, #24
 80097b6:	b09d      	sub	sp, #116	@ 0x74
 80097b8:	4607      	mov	r7, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	4614      	mov	r4, r2
 80097be:	d510      	bpl.n	80097e2 <_svfiprintf_r+0x36>
 80097c0:	690b      	ldr	r3, [r1, #16]
 80097c2:	b973      	cbnz	r3, 80097e2 <_svfiprintf_r+0x36>
 80097c4:	2140      	movs	r1, #64	@ 0x40
 80097c6:	f7ff fb87 	bl	8008ed8 <_malloc_r>
 80097ca:	6028      	str	r0, [r5, #0]
 80097cc:	6128      	str	r0, [r5, #16]
 80097ce:	b930      	cbnz	r0, 80097de <_svfiprintf_r+0x32>
 80097d0:	230c      	movs	r3, #12
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	b01d      	add	sp, #116	@ 0x74
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	2340      	movs	r3, #64	@ 0x40
 80097e0:	616b      	str	r3, [r5, #20]
 80097e2:	2300      	movs	r3, #0
 80097e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097e6:	2320      	movs	r3, #32
 80097e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f0:	2330      	movs	r3, #48	@ 0x30
 80097f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009990 <_svfiprintf_r+0x1e4>
 80097f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097fa:	f04f 0901 	mov.w	r9, #1
 80097fe:	4623      	mov	r3, r4
 8009800:	469a      	mov	sl, r3
 8009802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009806:	b10a      	cbz	r2, 800980c <_svfiprintf_r+0x60>
 8009808:	2a25      	cmp	r2, #37	@ 0x25
 800980a:	d1f9      	bne.n	8009800 <_svfiprintf_r+0x54>
 800980c:	ebba 0b04 	subs.w	fp, sl, r4
 8009810:	d00b      	beq.n	800982a <_svfiprintf_r+0x7e>
 8009812:	465b      	mov	r3, fp
 8009814:	4622      	mov	r2, r4
 8009816:	4629      	mov	r1, r5
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ff6b 	bl	80096f4 <__ssputs_r>
 800981e:	3001      	adds	r0, #1
 8009820:	f000 80a7 	beq.w	8009972 <_svfiprintf_r+0x1c6>
 8009824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009826:	445a      	add	r2, fp
 8009828:	9209      	str	r2, [sp, #36]	@ 0x24
 800982a:	f89a 3000 	ldrb.w	r3, [sl]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 809f 	beq.w	8009972 <_svfiprintf_r+0x1c6>
 8009834:	2300      	movs	r3, #0
 8009836:	f04f 32ff 	mov.w	r2, #4294967295
 800983a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800983e:	f10a 0a01 	add.w	sl, sl, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	9307      	str	r3, [sp, #28]
 8009846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800984a:	931a      	str	r3, [sp, #104]	@ 0x68
 800984c:	4654      	mov	r4, sl
 800984e:	2205      	movs	r2, #5
 8009850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009854:	484e      	ldr	r0, [pc, #312]	@ (8009990 <_svfiprintf_r+0x1e4>)
 8009856:	f7f6 fcdb 	bl	8000210 <memchr>
 800985a:	9a04      	ldr	r2, [sp, #16]
 800985c:	b9d8      	cbnz	r0, 8009896 <_svfiprintf_r+0xea>
 800985e:	06d0      	lsls	r0, r2, #27
 8009860:	bf44      	itt	mi
 8009862:	2320      	movmi	r3, #32
 8009864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009868:	0711      	lsls	r1, r2, #28
 800986a:	bf44      	itt	mi
 800986c:	232b      	movmi	r3, #43	@ 0x2b
 800986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009872:	f89a 3000 	ldrb.w	r3, [sl]
 8009876:	2b2a      	cmp	r3, #42	@ 0x2a
 8009878:	d015      	beq.n	80098a6 <_svfiprintf_r+0xfa>
 800987a:	9a07      	ldr	r2, [sp, #28]
 800987c:	4654      	mov	r4, sl
 800987e:	2000      	movs	r0, #0
 8009880:	f04f 0c0a 	mov.w	ip, #10
 8009884:	4621      	mov	r1, r4
 8009886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800988a:	3b30      	subs	r3, #48	@ 0x30
 800988c:	2b09      	cmp	r3, #9
 800988e:	d94b      	bls.n	8009928 <_svfiprintf_r+0x17c>
 8009890:	b1b0      	cbz	r0, 80098c0 <_svfiprintf_r+0x114>
 8009892:	9207      	str	r2, [sp, #28]
 8009894:	e014      	b.n	80098c0 <_svfiprintf_r+0x114>
 8009896:	eba0 0308 	sub.w	r3, r0, r8
 800989a:	fa09 f303 	lsl.w	r3, r9, r3
 800989e:	4313      	orrs	r3, r2
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	46a2      	mov	sl, r4
 80098a4:	e7d2      	b.n	800984c <_svfiprintf_r+0xa0>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	1d19      	adds	r1, r3, #4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	9103      	str	r1, [sp, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bfbb      	ittet	lt
 80098b2:	425b      	neglt	r3, r3
 80098b4:	f042 0202 	orrlt.w	r2, r2, #2
 80098b8:	9307      	strge	r3, [sp, #28]
 80098ba:	9307      	strlt	r3, [sp, #28]
 80098bc:	bfb8      	it	lt
 80098be:	9204      	strlt	r2, [sp, #16]
 80098c0:	7823      	ldrb	r3, [r4, #0]
 80098c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098c4:	d10a      	bne.n	80098dc <_svfiprintf_r+0x130>
 80098c6:	7863      	ldrb	r3, [r4, #1]
 80098c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ca:	d132      	bne.n	8009932 <_svfiprintf_r+0x186>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	1d1a      	adds	r2, r3, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	9203      	str	r2, [sp, #12]
 80098d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098d8:	3402      	adds	r4, #2
 80098da:	9305      	str	r3, [sp, #20]
 80098dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099a0 <_svfiprintf_r+0x1f4>
 80098e0:	7821      	ldrb	r1, [r4, #0]
 80098e2:	2203      	movs	r2, #3
 80098e4:	4650      	mov	r0, sl
 80098e6:	f7f6 fc93 	bl	8000210 <memchr>
 80098ea:	b138      	cbz	r0, 80098fc <_svfiprintf_r+0x150>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	eba0 000a 	sub.w	r0, r0, sl
 80098f2:	2240      	movs	r2, #64	@ 0x40
 80098f4:	4082      	lsls	r2, r0
 80098f6:	4313      	orrs	r3, r2
 80098f8:	3401      	adds	r4, #1
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009900:	4824      	ldr	r0, [pc, #144]	@ (8009994 <_svfiprintf_r+0x1e8>)
 8009902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009906:	2206      	movs	r2, #6
 8009908:	f7f6 fc82 	bl	8000210 <memchr>
 800990c:	2800      	cmp	r0, #0
 800990e:	d036      	beq.n	800997e <_svfiprintf_r+0x1d2>
 8009910:	4b21      	ldr	r3, [pc, #132]	@ (8009998 <_svfiprintf_r+0x1ec>)
 8009912:	bb1b      	cbnz	r3, 800995c <_svfiprintf_r+0x1b0>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	3307      	adds	r3, #7
 8009918:	f023 0307 	bic.w	r3, r3, #7
 800991c:	3308      	adds	r3, #8
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009922:	4433      	add	r3, r6
 8009924:	9309      	str	r3, [sp, #36]	@ 0x24
 8009926:	e76a      	b.n	80097fe <_svfiprintf_r+0x52>
 8009928:	fb0c 3202 	mla	r2, ip, r2, r3
 800992c:	460c      	mov	r4, r1
 800992e:	2001      	movs	r0, #1
 8009930:	e7a8      	b.n	8009884 <_svfiprintf_r+0xd8>
 8009932:	2300      	movs	r3, #0
 8009934:	3401      	adds	r4, #1
 8009936:	9305      	str	r3, [sp, #20]
 8009938:	4619      	mov	r1, r3
 800993a:	f04f 0c0a 	mov.w	ip, #10
 800993e:	4620      	mov	r0, r4
 8009940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009944:	3a30      	subs	r2, #48	@ 0x30
 8009946:	2a09      	cmp	r2, #9
 8009948:	d903      	bls.n	8009952 <_svfiprintf_r+0x1a6>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0c6      	beq.n	80098dc <_svfiprintf_r+0x130>
 800994e:	9105      	str	r1, [sp, #20]
 8009950:	e7c4      	b.n	80098dc <_svfiprintf_r+0x130>
 8009952:	fb0c 2101 	mla	r1, ip, r1, r2
 8009956:	4604      	mov	r4, r0
 8009958:	2301      	movs	r3, #1
 800995a:	e7f0      	b.n	800993e <_svfiprintf_r+0x192>
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	462a      	mov	r2, r5
 8009962:	4b0e      	ldr	r3, [pc, #56]	@ (800999c <_svfiprintf_r+0x1f0>)
 8009964:	a904      	add	r1, sp, #16
 8009966:	4638      	mov	r0, r7
 8009968:	f7fd fd92 	bl	8007490 <_printf_float>
 800996c:	1c42      	adds	r2, r0, #1
 800996e:	4606      	mov	r6, r0
 8009970:	d1d6      	bne.n	8009920 <_svfiprintf_r+0x174>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	065b      	lsls	r3, r3, #25
 8009976:	f53f af2d 	bmi.w	80097d4 <_svfiprintf_r+0x28>
 800997a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800997c:	e72c      	b.n	80097d8 <_svfiprintf_r+0x2c>
 800997e:	ab03      	add	r3, sp, #12
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	462a      	mov	r2, r5
 8009984:	4b05      	ldr	r3, [pc, #20]	@ (800999c <_svfiprintf_r+0x1f0>)
 8009986:	a904      	add	r1, sp, #16
 8009988:	4638      	mov	r0, r7
 800998a:	f7fe f819 	bl	80079c0 <_printf_i>
 800998e:	e7ed      	b.n	800996c <_svfiprintf_r+0x1c0>
 8009990:	0800a530 	.word	0x0800a530
 8009994:	0800a53a 	.word	0x0800a53a
 8009998:	08007491 	.word	0x08007491
 800999c:	080096f5 	.word	0x080096f5
 80099a0:	0800a536 	.word	0x0800a536

080099a4 <__sflush_r>:
 80099a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	0716      	lsls	r6, r2, #28
 80099ae:	4605      	mov	r5, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	d454      	bmi.n	8009a5e <__sflush_r+0xba>
 80099b4:	684b      	ldr	r3, [r1, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dc02      	bgt.n	80099c0 <__sflush_r+0x1c>
 80099ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dd48      	ble.n	8009a52 <__sflush_r+0xae>
 80099c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	d045      	beq.n	8009a52 <__sflush_r+0xae>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099cc:	682f      	ldr	r7, [r5, #0]
 80099ce:	6a21      	ldr	r1, [r4, #32]
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	d030      	beq.n	8009a36 <__sflush_r+0x92>
 80099d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	0759      	lsls	r1, r3, #29
 80099da:	d505      	bpl.n	80099e8 <__sflush_r+0x44>
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099e2:	b10b      	cbz	r3, 80099e8 <__sflush_r+0x44>
 80099e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099ec:	6a21      	ldr	r1, [r4, #32]
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b0      	blx	r6
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	d106      	bne.n	8009a06 <__sflush_r+0x62>
 80099f8:	6829      	ldr	r1, [r5, #0]
 80099fa:	291d      	cmp	r1, #29
 80099fc:	d82b      	bhi.n	8009a56 <__sflush_r+0xb2>
 80099fe:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa8 <__sflush_r+0x104>)
 8009a00:	410a      	asrs	r2, r1
 8009a02:	07d6      	lsls	r6, r2, #31
 8009a04:	d427      	bmi.n	8009a56 <__sflush_r+0xb2>
 8009a06:	2200      	movs	r2, #0
 8009a08:	6062      	str	r2, [r4, #4]
 8009a0a:	04d9      	lsls	r1, r3, #19
 8009a0c:	6922      	ldr	r2, [r4, #16]
 8009a0e:	6022      	str	r2, [r4, #0]
 8009a10:	d504      	bpl.n	8009a1c <__sflush_r+0x78>
 8009a12:	1c42      	adds	r2, r0, #1
 8009a14:	d101      	bne.n	8009a1a <__sflush_r+0x76>
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	b903      	cbnz	r3, 8009a1c <__sflush_r+0x78>
 8009a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a1e:	602f      	str	r7, [r5, #0]
 8009a20:	b1b9      	cbz	r1, 8009a52 <__sflush_r+0xae>
 8009a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a26:	4299      	cmp	r1, r3
 8009a28:	d002      	beq.n	8009a30 <__sflush_r+0x8c>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7ff f9e0 	bl	8008df0 <_free_r>
 8009a30:	2300      	movs	r3, #0
 8009a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a34:	e00d      	b.n	8009a52 <__sflush_r+0xae>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b0      	blx	r6
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	1c50      	adds	r0, r2, #1
 8009a40:	d1c9      	bne.n	80099d6 <__sflush_r+0x32>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0c6      	beq.n	80099d6 <__sflush_r+0x32>
 8009a48:	2b1d      	cmp	r3, #29
 8009a4a:	d001      	beq.n	8009a50 <__sflush_r+0xac>
 8009a4c:	2b16      	cmp	r3, #22
 8009a4e:	d11e      	bne.n	8009a8e <__sflush_r+0xea>
 8009a50:	602f      	str	r7, [r5, #0]
 8009a52:	2000      	movs	r0, #0
 8009a54:	e022      	b.n	8009a9c <__sflush_r+0xf8>
 8009a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	e01b      	b.n	8009a96 <__sflush_r+0xf2>
 8009a5e:	690f      	ldr	r7, [r1, #16]
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	d0f6      	beq.n	8009a52 <__sflush_r+0xae>
 8009a64:	0793      	lsls	r3, r2, #30
 8009a66:	680e      	ldr	r6, [r1, #0]
 8009a68:	bf08      	it	eq
 8009a6a:	694b      	ldreq	r3, [r1, #20]
 8009a6c:	600f      	str	r7, [r1, #0]
 8009a6e:	bf18      	it	ne
 8009a70:	2300      	movne	r3, #0
 8009a72:	eba6 0807 	sub.w	r8, r6, r7
 8009a76:	608b      	str	r3, [r1, #8]
 8009a78:	f1b8 0f00 	cmp.w	r8, #0
 8009a7c:	dde9      	ble.n	8009a52 <__sflush_r+0xae>
 8009a7e:	6a21      	ldr	r1, [r4, #32]
 8009a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a82:	4643      	mov	r3, r8
 8009a84:	463a      	mov	r2, r7
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b0      	blx	r6
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	dc08      	bgt.n	8009aa0 <__sflush_r+0xfc>
 8009a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	4407      	add	r7, r0
 8009aa2:	eba8 0800 	sub.w	r8, r8, r0
 8009aa6:	e7e7      	b.n	8009a78 <__sflush_r+0xd4>
 8009aa8:	dfbffffe 	.word	0xdfbffffe

08009aac <_fflush_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	690b      	ldr	r3, [r1, #16]
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b913      	cbnz	r3, 8009abc <_fflush_r+0x10>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	4628      	mov	r0, r5
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	b118      	cbz	r0, 8009ac6 <_fflush_r+0x1a>
 8009abe:	6a03      	ldr	r3, [r0, #32]
 8009ac0:	b90b      	cbnz	r3, 8009ac6 <_fflush_r+0x1a>
 8009ac2:	f7fe f929 	bl	8007d18 <__sinit>
 8009ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f3      	beq.n	8009ab6 <_fflush_r+0xa>
 8009ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ad0:	07d0      	lsls	r0, r2, #31
 8009ad2:	d404      	bmi.n	8009ade <_fflush_r+0x32>
 8009ad4:	0599      	lsls	r1, r3, #22
 8009ad6:	d402      	bmi.n	8009ade <_fflush_r+0x32>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ada:	f7fe fb3a 	bl	8008152 <__retarget_lock_acquire_recursive>
 8009ade:	4628      	mov	r0, r5
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	f7ff ff5f 	bl	80099a4 <__sflush_r>
 8009ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ae8:	07da      	lsls	r2, r3, #31
 8009aea:	4605      	mov	r5, r0
 8009aec:	d4e4      	bmi.n	8009ab8 <_fflush_r+0xc>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	059b      	lsls	r3, r3, #22
 8009af2:	d4e1      	bmi.n	8009ab8 <_fflush_r+0xc>
 8009af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009af6:	f7fe fb2d 	bl	8008154 <__retarget_lock_release_recursive>
 8009afa:	e7dd      	b.n	8009ab8 <_fflush_r+0xc>

08009afc <__swhatbuf_r>:
 8009afc:	b570      	push	{r4, r5, r6, lr}
 8009afe:	460c      	mov	r4, r1
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	2900      	cmp	r1, #0
 8009b06:	b096      	sub	sp, #88	@ 0x58
 8009b08:	4615      	mov	r5, r2
 8009b0a:	461e      	mov	r6, r3
 8009b0c:	da0d      	bge.n	8009b2a <__swhatbuf_r+0x2e>
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b14:	f04f 0100 	mov.w	r1, #0
 8009b18:	bf14      	ite	ne
 8009b1a:	2340      	movne	r3, #64	@ 0x40
 8009b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b20:	2000      	movs	r0, #0
 8009b22:	6031      	str	r1, [r6, #0]
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	b016      	add	sp, #88	@ 0x58
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	466a      	mov	r2, sp
 8009b2c:	f000 f862 	bl	8009bf4 <_fstat_r>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	dbec      	blt.n	8009b0e <__swhatbuf_r+0x12>
 8009b34:	9901      	ldr	r1, [sp, #4]
 8009b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b3e:	4259      	negs	r1, r3
 8009b40:	4159      	adcs	r1, r3
 8009b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b46:	e7eb      	b.n	8009b20 <__swhatbuf_r+0x24>

08009b48 <__smakebuf_r>:
 8009b48:	898b      	ldrh	r3, [r1, #12]
 8009b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4c:	079d      	lsls	r5, r3, #30
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460c      	mov	r4, r1
 8009b52:	d507      	bpl.n	8009b64 <__smakebuf_r+0x1c>
 8009b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	6163      	str	r3, [r4, #20]
 8009b60:	b003      	add	sp, #12
 8009b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b64:	ab01      	add	r3, sp, #4
 8009b66:	466a      	mov	r2, sp
 8009b68:	f7ff ffc8 	bl	8009afc <__swhatbuf_r>
 8009b6c:	9f00      	ldr	r7, [sp, #0]
 8009b6e:	4605      	mov	r5, r0
 8009b70:	4639      	mov	r1, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff f9b0 	bl	8008ed8 <_malloc_r>
 8009b78:	b948      	cbnz	r0, 8009b8e <__smakebuf_r+0x46>
 8009b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7e:	059a      	lsls	r2, r3, #22
 8009b80:	d4ee      	bmi.n	8009b60 <__smakebuf_r+0x18>
 8009b82:	f023 0303 	bic.w	r3, r3, #3
 8009b86:	f043 0302 	orr.w	r3, r3, #2
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	e7e2      	b.n	8009b54 <__smakebuf_r+0xc>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	6020      	str	r0, [r4, #0]
 8009b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b9e:	b15b      	cbz	r3, 8009bb8 <__smakebuf_r+0x70>
 8009ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 f837 	bl	8009c18 <_isatty_r>
 8009baa:	b128      	cbz	r0, 8009bb8 <__smakebuf_r+0x70>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	431d      	orrs	r5, r3
 8009bbc:	81a5      	strh	r5, [r4, #12]
 8009bbe:	e7cf      	b.n	8009b60 <__smakebuf_r+0x18>

08009bc0 <memmove>:
 8009bc0:	4288      	cmp	r0, r1
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	eb01 0402 	add.w	r4, r1, r2
 8009bc8:	d902      	bls.n	8009bd0 <memmove+0x10>
 8009bca:	4284      	cmp	r4, r0
 8009bcc:	4623      	mov	r3, r4
 8009bce:	d807      	bhi.n	8009be0 <memmove+0x20>
 8009bd0:	1e43      	subs	r3, r0, #1
 8009bd2:	42a1      	cmp	r1, r4
 8009bd4:	d008      	beq.n	8009be8 <memmove+0x28>
 8009bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bde:	e7f8      	b.n	8009bd2 <memmove+0x12>
 8009be0:	4402      	add	r2, r0
 8009be2:	4601      	mov	r1, r0
 8009be4:	428a      	cmp	r2, r1
 8009be6:	d100      	bne.n	8009bea <memmove+0x2a>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf2:	e7f7      	b.n	8009be4 <memmove+0x24>

08009bf4 <_fstat_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4d07      	ldr	r5, [pc, #28]	@ (8009c14 <_fstat_r+0x20>)
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	4608      	mov	r0, r1
 8009bfe:	4611      	mov	r1, r2
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	f7f7 fd7f 	bl	8001704 <_fstat>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d102      	bne.n	8009c10 <_fstat_r+0x1c>
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	b103      	cbz	r3, 8009c10 <_fstat_r+0x1c>
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	bf00      	nop
 8009c14:	20000604 	.word	0x20000604

08009c18 <_isatty_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d06      	ldr	r5, [pc, #24]	@ (8009c34 <_isatty_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	f7f7 fd7e 	bl	8001724 <_isatty>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_isatty_r+0x1a>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_isatty_r+0x1a>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20000604 	.word	0x20000604

08009c38 <_sbrk_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	@ (8009c54 <_sbrk_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f7 fd86 	bl	8001754 <_sbrk>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_sbrk_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_sbrk_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20000604 	.word	0x20000604

08009c58 <memcpy>:
 8009c58:	440a      	add	r2, r1
 8009c5a:	4291      	cmp	r1, r2
 8009c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c60:	d100      	bne.n	8009c64 <memcpy+0xc>
 8009c62:	4770      	bx	lr
 8009c64:	b510      	push	{r4, lr}
 8009c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c6e:	4291      	cmp	r1, r2
 8009c70:	d1f9      	bne.n	8009c66 <memcpy+0xe>
 8009c72:	bd10      	pop	{r4, pc}

08009c74 <__assert_func>:
 8009c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c76:	4614      	mov	r4, r2
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <__assert_func+0x2c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4605      	mov	r5, r0
 8009c80:	68d8      	ldr	r0, [r3, #12]
 8009c82:	b954      	cbnz	r4, 8009c9a <__assert_func+0x26>
 8009c84:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <__assert_func+0x30>)
 8009c86:	461c      	mov	r4, r3
 8009c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c8c:	9100      	str	r1, [sp, #0]
 8009c8e:	462b      	mov	r3, r5
 8009c90:	4905      	ldr	r1, [pc, #20]	@ (8009ca8 <__assert_func+0x34>)
 8009c92:	f000 f86f 	bl	8009d74 <fiprintf>
 8009c96:	f000 f87f 	bl	8009d98 <abort>
 8009c9a:	4b04      	ldr	r3, [pc, #16]	@ (8009cac <__assert_func+0x38>)
 8009c9c:	e7f4      	b.n	8009c88 <__assert_func+0x14>
 8009c9e:	bf00      	nop
 8009ca0:	20000064 	.word	0x20000064
 8009ca4:	0800a586 	.word	0x0800a586
 8009ca8:	0800a558 	.word	0x0800a558
 8009cac:	0800a54b 	.word	0x0800a54b

08009cb0 <_calloc_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	fba1 5402 	umull	r5, r4, r1, r2
 8009cb6:	b93c      	cbnz	r4, 8009cc8 <_calloc_r+0x18>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7ff f90d 	bl	8008ed8 <_malloc_r>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <_calloc_r+0x1e>
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	220c      	movs	r2, #12
 8009cca:	6002      	str	r2, [r0, #0]
 8009ccc:	e7f9      	b.n	8009cc2 <_calloc_r+0x12>
 8009cce:	462a      	mov	r2, r5
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f7fe f9ad 	bl	8008030 <memset>
 8009cd6:	e7f5      	b.n	8009cc4 <_calloc_r+0x14>

08009cd8 <__ascii_mbtowc>:
 8009cd8:	b082      	sub	sp, #8
 8009cda:	b901      	cbnz	r1, 8009cde <__ascii_mbtowc+0x6>
 8009cdc:	a901      	add	r1, sp, #4
 8009cde:	b142      	cbz	r2, 8009cf2 <__ascii_mbtowc+0x1a>
 8009ce0:	b14b      	cbz	r3, 8009cf6 <__ascii_mbtowc+0x1e>
 8009ce2:	7813      	ldrb	r3, [r2, #0]
 8009ce4:	600b      	str	r3, [r1, #0]
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	1e10      	subs	r0, r2, #0
 8009cea:	bf18      	it	ne
 8009cec:	2001      	movne	r0, #1
 8009cee:	b002      	add	sp, #8
 8009cf0:	4770      	bx	lr
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	e7fb      	b.n	8009cee <__ascii_mbtowc+0x16>
 8009cf6:	f06f 0001 	mvn.w	r0, #1
 8009cfa:	e7f8      	b.n	8009cee <__ascii_mbtowc+0x16>

08009cfc <_realloc_r>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	4680      	mov	r8, r0
 8009d02:	4615      	mov	r5, r2
 8009d04:	460c      	mov	r4, r1
 8009d06:	b921      	cbnz	r1, 8009d12 <_realloc_r+0x16>
 8009d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	f7ff b8e3 	b.w	8008ed8 <_malloc_r>
 8009d12:	b92a      	cbnz	r2, 8009d20 <_realloc_r+0x24>
 8009d14:	f7ff f86c 	bl	8008df0 <_free_r>
 8009d18:	2400      	movs	r4, #0
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	f000 f841 	bl	8009da6 <_malloc_usable_size_r>
 8009d24:	4285      	cmp	r5, r0
 8009d26:	4606      	mov	r6, r0
 8009d28:	d802      	bhi.n	8009d30 <_realloc_r+0x34>
 8009d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d2e:	d8f4      	bhi.n	8009d1a <_realloc_r+0x1e>
 8009d30:	4629      	mov	r1, r5
 8009d32:	4640      	mov	r0, r8
 8009d34:	f7ff f8d0 	bl	8008ed8 <_malloc_r>
 8009d38:	4607      	mov	r7, r0
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0ec      	beq.n	8009d18 <_realloc_r+0x1c>
 8009d3e:	42b5      	cmp	r5, r6
 8009d40:	462a      	mov	r2, r5
 8009d42:	4621      	mov	r1, r4
 8009d44:	bf28      	it	cs
 8009d46:	4632      	movcs	r2, r6
 8009d48:	f7ff ff86 	bl	8009c58 <memcpy>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f7ff f84e 	bl	8008df0 <_free_r>
 8009d54:	463c      	mov	r4, r7
 8009d56:	e7e0      	b.n	8009d1a <_realloc_r+0x1e>

08009d58 <__ascii_wctomb>:
 8009d58:	4603      	mov	r3, r0
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	b141      	cbz	r1, 8009d70 <__ascii_wctomb+0x18>
 8009d5e:	2aff      	cmp	r2, #255	@ 0xff
 8009d60:	d904      	bls.n	8009d6c <__ascii_wctomb+0x14>
 8009d62:	228a      	movs	r2, #138	@ 0x8a
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6a:	4770      	bx	lr
 8009d6c:	700a      	strb	r2, [r1, #0]
 8009d6e:	2001      	movs	r0, #1
 8009d70:	4770      	bx	lr
	...

08009d74 <fiprintf>:
 8009d74:	b40e      	push	{r1, r2, r3}
 8009d76:	b503      	push	{r0, r1, lr}
 8009d78:	4601      	mov	r1, r0
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	4805      	ldr	r0, [pc, #20]	@ (8009d94 <fiprintf+0x20>)
 8009d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d82:	6800      	ldr	r0, [r0, #0]
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	f000 f83f 	bl	8009e08 <_vfiprintf_r>
 8009d8a:	b002      	add	sp, #8
 8009d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d90:	b003      	add	sp, #12
 8009d92:	4770      	bx	lr
 8009d94:	20000064 	.word	0x20000064

08009d98 <abort>:
 8009d98:	b508      	push	{r3, lr}
 8009d9a:	2006      	movs	r0, #6
 8009d9c:	f000 f974 	bl	800a088 <raise>
 8009da0:	2001      	movs	r0, #1
 8009da2:	f7f7 fc5f 	bl	8001664 <_exit>

08009da6 <_malloc_usable_size_r>:
 8009da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009daa:	1f18      	subs	r0, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfbc      	itt	lt
 8009db0:	580b      	ldrlt	r3, [r1, r0]
 8009db2:	18c0      	addlt	r0, r0, r3
 8009db4:	4770      	bx	lr

08009db6 <__sfputc_r>:
 8009db6:	6893      	ldr	r3, [r2, #8]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	b410      	push	{r4}
 8009dbe:	6093      	str	r3, [r2, #8]
 8009dc0:	da08      	bge.n	8009dd4 <__sfputc_r+0x1e>
 8009dc2:	6994      	ldr	r4, [r2, #24]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	db01      	blt.n	8009dcc <__sfputc_r+0x16>
 8009dc8:	290a      	cmp	r1, #10
 8009dca:	d103      	bne.n	8009dd4 <__sfputc_r+0x1e>
 8009dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd0:	f7fe b899 	b.w	8007f06 <__swbuf_r>
 8009dd4:	6813      	ldr	r3, [r2, #0]
 8009dd6:	1c58      	adds	r0, r3, #1
 8009dd8:	6010      	str	r0, [r2, #0]
 8009dda:	7019      	strb	r1, [r3, #0]
 8009ddc:	4608      	mov	r0, r1
 8009dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <__sfputs_r>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	4614      	mov	r4, r2
 8009dec:	18d5      	adds	r5, r2, r3
 8009dee:	42ac      	cmp	r4, r5
 8009df0:	d101      	bne.n	8009df6 <__sfputs_r+0x12>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e007      	b.n	8009e06 <__sfputs_r+0x22>
 8009df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff ffda 	bl	8009db6 <__sfputc_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d1f3      	bne.n	8009dee <__sfputs_r+0xa>
 8009e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e08 <_vfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	b09d      	sub	sp, #116	@ 0x74
 8009e10:	4614      	mov	r4, r2
 8009e12:	4698      	mov	r8, r3
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_vfiprintf_r+0x18>
 8009e18:	6a03      	ldr	r3, [r0, #32]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_vfiprintf_r+0x18>
 8009e1c:	f7fd ff7c 	bl	8007d18 <__sinit>
 8009e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e22:	07d9      	lsls	r1, r3, #31
 8009e24:	d405      	bmi.n	8009e32 <_vfiprintf_r+0x2a>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	059a      	lsls	r2, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_vfiprintf_r+0x2a>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e2e:	f7fe f990 	bl	8008152 <__retarget_lock_acquire_recursive>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	071b      	lsls	r3, r3, #28
 8009e36:	d501      	bpl.n	8009e3c <_vfiprintf_r+0x34>
 8009e38:	692b      	ldr	r3, [r5, #16]
 8009e3a:	b99b      	cbnz	r3, 8009e64 <_vfiprintf_r+0x5c>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7fe f8a0 	bl	8007f84 <__swsetup_r>
 8009e44:	b170      	cbz	r0, 8009e64 <_vfiprintf_r+0x5c>
 8009e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e48:	07dc      	lsls	r4, r3, #31
 8009e4a:	d504      	bpl.n	8009e56 <_vfiprintf_r+0x4e>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e50:	b01d      	add	sp, #116	@ 0x74
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	0598      	lsls	r0, r3, #22
 8009e5a:	d4f7      	bmi.n	8009e4c <_vfiprintf_r+0x44>
 8009e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e5e:	f7fe f979 	bl	8008154 <__retarget_lock_release_recursive>
 8009e62:	e7f3      	b.n	8009e4c <_vfiprintf_r+0x44>
 8009e64:	2300      	movs	r3, #0
 8009e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e72:	2330      	movs	r3, #48	@ 0x30
 8009e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a024 <_vfiprintf_r+0x21c>
 8009e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e7c:	f04f 0901 	mov.w	r9, #1
 8009e80:	4623      	mov	r3, r4
 8009e82:	469a      	mov	sl, r3
 8009e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e88:	b10a      	cbz	r2, 8009e8e <_vfiprintf_r+0x86>
 8009e8a:	2a25      	cmp	r2, #37	@ 0x25
 8009e8c:	d1f9      	bne.n	8009e82 <_vfiprintf_r+0x7a>
 8009e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e92:	d00b      	beq.n	8009eac <_vfiprintf_r+0xa4>
 8009e94:	465b      	mov	r3, fp
 8009e96:	4622      	mov	r2, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7ff ffa2 	bl	8009de4 <__sfputs_r>
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	f000 80a7 	beq.w	8009ff4 <_vfiprintf_r+0x1ec>
 8009ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea8:	445a      	add	r2, fp
 8009eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eac:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 809f 	beq.w	8009ff4 <_vfiprintf_r+0x1ec>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec0:	f10a 0a01 	add.w	sl, sl, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	9307      	str	r3, [sp, #28]
 8009ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2205      	movs	r2, #5
 8009ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed6:	4853      	ldr	r0, [pc, #332]	@ (800a024 <_vfiprintf_r+0x21c>)
 8009ed8:	f7f6 f99a 	bl	8000210 <memchr>
 8009edc:	9a04      	ldr	r2, [sp, #16]
 8009ede:	b9d8      	cbnz	r0, 8009f18 <_vfiprintf_r+0x110>
 8009ee0:	06d1      	lsls	r1, r2, #27
 8009ee2:	bf44      	itt	mi
 8009ee4:	2320      	movmi	r3, #32
 8009ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eea:	0713      	lsls	r3, r2, #28
 8009eec:	bf44      	itt	mi
 8009eee:	232b      	movmi	r3, #43	@ 0x2b
 8009ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009efa:	d015      	beq.n	8009f28 <_vfiprintf_r+0x120>
 8009efc:	9a07      	ldr	r2, [sp, #28]
 8009efe:	4654      	mov	r4, sl
 8009f00:	2000      	movs	r0, #0
 8009f02:	f04f 0c0a 	mov.w	ip, #10
 8009f06:	4621      	mov	r1, r4
 8009f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f0c:	3b30      	subs	r3, #48	@ 0x30
 8009f0e:	2b09      	cmp	r3, #9
 8009f10:	d94b      	bls.n	8009faa <_vfiprintf_r+0x1a2>
 8009f12:	b1b0      	cbz	r0, 8009f42 <_vfiprintf_r+0x13a>
 8009f14:	9207      	str	r2, [sp, #28]
 8009f16:	e014      	b.n	8009f42 <_vfiprintf_r+0x13a>
 8009f18:	eba0 0308 	sub.w	r3, r0, r8
 8009f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f20:	4313      	orrs	r3, r2
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	46a2      	mov	sl, r4
 8009f26:	e7d2      	b.n	8009ece <_vfiprintf_r+0xc6>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	1d19      	adds	r1, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	9103      	str	r1, [sp, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bfbb      	ittet	lt
 8009f34:	425b      	neglt	r3, r3
 8009f36:	f042 0202 	orrlt.w	r2, r2, #2
 8009f3a:	9307      	strge	r3, [sp, #28]
 8009f3c:	9307      	strlt	r3, [sp, #28]
 8009f3e:	bfb8      	it	lt
 8009f40:	9204      	strlt	r2, [sp, #16]
 8009f42:	7823      	ldrb	r3, [r4, #0]
 8009f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f46:	d10a      	bne.n	8009f5e <_vfiprintf_r+0x156>
 8009f48:	7863      	ldrb	r3, [r4, #1]
 8009f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f4c:	d132      	bne.n	8009fb4 <_vfiprintf_r+0x1ac>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	9203      	str	r2, [sp, #12]
 8009f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f5a:	3402      	adds	r4, #2
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a034 <_vfiprintf_r+0x22c>
 8009f62:	7821      	ldrb	r1, [r4, #0]
 8009f64:	2203      	movs	r2, #3
 8009f66:	4650      	mov	r0, sl
 8009f68:	f7f6 f952 	bl	8000210 <memchr>
 8009f6c:	b138      	cbz	r0, 8009f7e <_vfiprintf_r+0x176>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	eba0 000a 	sub.w	r0, r0, sl
 8009f74:	2240      	movs	r2, #64	@ 0x40
 8009f76:	4082      	lsls	r2, r0
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	4829      	ldr	r0, [pc, #164]	@ (800a028 <_vfiprintf_r+0x220>)
 8009f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f88:	2206      	movs	r2, #6
 8009f8a:	f7f6 f941 	bl	8000210 <memchr>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d03f      	beq.n	800a012 <_vfiprintf_r+0x20a>
 8009f92:	4b26      	ldr	r3, [pc, #152]	@ (800a02c <_vfiprintf_r+0x224>)
 8009f94:	bb1b      	cbnz	r3, 8009fde <_vfiprintf_r+0x1d6>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	3307      	adds	r3, #7
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa4:	443b      	add	r3, r7
 8009fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa8:	e76a      	b.n	8009e80 <_vfiprintf_r+0x78>
 8009faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	e7a8      	b.n	8009f06 <_vfiprintf_r+0xfe>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	3401      	adds	r4, #1
 8009fb8:	9305      	str	r3, [sp, #20]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f04f 0c0a 	mov.w	ip, #10
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc6:	3a30      	subs	r2, #48	@ 0x30
 8009fc8:	2a09      	cmp	r2, #9
 8009fca:	d903      	bls.n	8009fd4 <_vfiprintf_r+0x1cc>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0c6      	beq.n	8009f5e <_vfiprintf_r+0x156>
 8009fd0:	9105      	str	r1, [sp, #20]
 8009fd2:	e7c4      	b.n	8009f5e <_vfiprintf_r+0x156>
 8009fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd8:	4604      	mov	r4, r0
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7f0      	b.n	8009fc0 <_vfiprintf_r+0x1b8>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4b12      	ldr	r3, [pc, #72]	@ (800a030 <_vfiprintf_r+0x228>)
 8009fe6:	a904      	add	r1, sp, #16
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7fd fa51 	bl	8007490 <_printf_float>
 8009fee:	4607      	mov	r7, r0
 8009ff0:	1c78      	adds	r0, r7, #1
 8009ff2:	d1d6      	bne.n	8009fa2 <_vfiprintf_r+0x19a>
 8009ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ff6:	07d9      	lsls	r1, r3, #31
 8009ff8:	d405      	bmi.n	800a006 <_vfiprintf_r+0x1fe>
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	059a      	lsls	r2, r3, #22
 8009ffe:	d402      	bmi.n	800a006 <_vfiprintf_r+0x1fe>
 800a000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a002:	f7fe f8a7 	bl	8008154 <__retarget_lock_release_recursive>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	065b      	lsls	r3, r3, #25
 800a00a:	f53f af1f 	bmi.w	8009e4c <_vfiprintf_r+0x44>
 800a00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a010:	e71e      	b.n	8009e50 <_vfiprintf_r+0x48>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <_vfiprintf_r+0x228>)
 800a01a:	a904      	add	r1, sp, #16
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fd fccf 	bl	80079c0 <_printf_i>
 800a022:	e7e4      	b.n	8009fee <_vfiprintf_r+0x1e6>
 800a024:	0800a530 	.word	0x0800a530
 800a028:	0800a53a 	.word	0x0800a53a
 800a02c:	08007491 	.word	0x08007491
 800a030:	08009de5 	.word	0x08009de5
 800a034:	0800a536 	.word	0x0800a536

0800a038 <_raise_r>:
 800a038:	291f      	cmp	r1, #31
 800a03a:	b538      	push	{r3, r4, r5, lr}
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	d904      	bls.n	800a04c <_raise_r+0x14>
 800a042:	2316      	movs	r3, #22
 800a044:	6003      	str	r3, [r0, #0]
 800a046:	f04f 30ff 	mov.w	r0, #4294967295
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a04e:	b112      	cbz	r2, 800a056 <_raise_r+0x1e>
 800a050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a054:	b94b      	cbnz	r3, 800a06a <_raise_r+0x32>
 800a056:	4628      	mov	r0, r5
 800a058:	f000 f830 	bl	800a0bc <_getpid_r>
 800a05c:	4622      	mov	r2, r4
 800a05e:	4601      	mov	r1, r0
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a066:	f000 b817 	b.w	800a098 <_kill_r>
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d00a      	beq.n	800a084 <_raise_r+0x4c>
 800a06e:	1c59      	adds	r1, r3, #1
 800a070:	d103      	bne.n	800a07a <_raise_r+0x42>
 800a072:	2316      	movs	r3, #22
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	2001      	movs	r0, #1
 800a078:	e7e7      	b.n	800a04a <_raise_r+0x12>
 800a07a:	2100      	movs	r1, #0
 800a07c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a080:	4620      	mov	r0, r4
 800a082:	4798      	blx	r3
 800a084:	2000      	movs	r0, #0
 800a086:	e7e0      	b.n	800a04a <_raise_r+0x12>

0800a088 <raise>:
 800a088:	4b02      	ldr	r3, [pc, #8]	@ (800a094 <raise+0xc>)
 800a08a:	4601      	mov	r1, r0
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	f7ff bfd3 	b.w	800a038 <_raise_r>
 800a092:	bf00      	nop
 800a094:	20000064 	.word	0x20000064

0800a098 <_kill_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d07      	ldr	r5, [pc, #28]	@ (800a0b8 <_kill_r+0x20>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	f7f7 facd 	bl	8001644 <_kill>
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	d102      	bne.n	800a0b4 <_kill_r+0x1c>
 800a0ae:	682b      	ldr	r3, [r5, #0]
 800a0b0:	b103      	cbz	r3, 800a0b4 <_kill_r+0x1c>
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	bd38      	pop	{r3, r4, r5, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000604 	.word	0x20000604

0800a0bc <_getpid_r>:
 800a0bc:	f7f7 baba 	b.w	8001634 <_getpid>

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
