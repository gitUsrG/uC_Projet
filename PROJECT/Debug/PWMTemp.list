
PWMTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08008c38  08008c38  00009c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d8  080090d8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e0  080090e0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080090e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d8  080092c0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080092c0  0000b55c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001211d  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1f  00000000  00000000  0001d325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  000210a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001891c  00000000  00000000  00021e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016313  00000000  00000000  0003a743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009316a  00000000  00000000  00050a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059fc  00000000  00000000  000e3c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e9600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c20 	.word	0x08008c20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008c20 	.word	0x08008c20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <MX_GPIO_Init+0xd4>)
 8000f34:	f001 f8ee 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000f50:	f000 ff5c 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f54:	2320      	movs	r3, #32
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_GPIO_Init+0xd4>)
 8000f6c:	f000 ff4e 	bl	8001e0c <HAL_GPIO_Init>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020800 	.word	0x40020800

08000f84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <MX_I2C1_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fc2:	f001 f8c1 	bl	8002148 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f9f8 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f4 	.word	0x200001f4
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	000186a0 	.word	0x000186a0

08000fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_I2C_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001030:	2304      	movs	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	@ (800106c <HAL_I2C_MspInit+0x8c>)
 800103c:	f000 fee6 	bl	8001e0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <UART2_SendString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART2_SendString(char* str) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f901 	bl	8000280 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <UART2_SendString+0x28>)
 800108a:	f003 fbb9 	bl	8004800 <HAL_UART_Transmit>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000370 	.word	0x20000370

0800109c <SetDutyCycle>:

void SetDutyCycle(uint8_t dutyCycle) {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    uint32_t compareValue = (dutyCycle * 10);
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
    if(compareValue > 1000) compareValue = 1000;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010b8:	d902      	bls.n	80010c0 <SetDutyCycle+0x24>
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compareValue);
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <SetDutyCycle+0x38>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000328 	.word	0x20000328

080010d8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <HAL_UART_RxCpltCallback+0x58>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d119      	bne.n	800111e <HAL_UART_RxCpltCallback+0x46>
    {

 //   		  if(HAL_UART_Receive(&huart2, rxBuffer, sizeof(rxBuffer)-1, HAL_MAX_DELAY) == HAL_OK){
    	rxBuffer[sizeof(rxBuffer) - 1] = '\0';
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_UART_RxCpltCallback+0x5c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	70da      	strb	r2, [r3, #3]
    	char* endPtr;
    	long dutyCycle = strtol((char*)rxBuffer, &endPtr, 10);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	220a      	movs	r2, #10
 80010f6:	4619      	mov	r1, r3
 80010f8:	480e      	ldr	r0, [pc, #56]	@ (8001134 <HAL_UART_RxCpltCallback+0x5c>)
 80010fa:	f004 ff3f 	bl	8005f7c <strtol>
 80010fe:	60f8      	str	r0, [r7, #12]

    	if (*endPtr == '\0' && dutyCycle >= 0 && dutyCycle <= 100)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10a      	bne.n	800111e <HAL_UART_RxCpltCallback+0x46>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db07      	blt.n	800111e <HAL_UART_RxCpltCallback+0x46>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b64      	cmp	r3, #100	@ 0x64
 8001112:	dc04      	bgt.n	800111e <HAL_UART_RxCpltCallback+0x46>
    	{
    		SetDutyCycle((uint8_t)dutyCycle);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffbf 	bl	800109c <SetDutyCycle>
    	}
    }
    HAL_UART_Receive_IT(&huart2, rxBuffer, sizeof(rxBuffer)-1);
 800111e:	2203      	movs	r2, #3
 8001120:	4904      	ldr	r1, [pc, #16]	@ (8001134 <HAL_UART_RxCpltCallback+0x5c>)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <HAL_UART_RxCpltCallback+0x60>)
 8001124:	f003 fbf7 	bl	8004916 <HAL_UART_Receive_IT>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	20000320 	.word	0x20000320
 8001138:	20000370 	.word	0x20000370

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fc1e 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f8d0 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f7ff feac 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001150:	f000 fb74 	bl	800183c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001154:	f000 fa74 	bl	8001640 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001158:	f7ff ff14 	bl	8000f84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, rxBuffer, sizeof(rxBuffer)-1);
 800115c:	2203      	movs	r2, #3
 800115e:	4950      	ldr	r1, [pc, #320]	@ (80012a0 <main+0x164>)
 8001160:	4850      	ldr	r0, [pc, #320]	@ (80012a4 <main+0x168>)
 8001162:	f003 fbd8 	bl	8004916 <HAL_UART_Receive_IT>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001166:	2100      	movs	r1, #0
 8001168:	484f      	ldr	r0, [pc, #316]	@ (80012a8 <main+0x16c>)
 800116a:	f002 fd27 	bl	8003bbc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800116e:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <main+0x170>)
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	4b4d      	ldr	r3, [pc, #308]	@ (80012a8 <main+0x16c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34



  /* Initialize I2C */
  sensirion_i2c_init();
 8001178:	f004 fde4 	bl	8005d44 <sensirion_i2c_init>
  /* Busy loop for initialization, because the main loop does not work without
   * a sensor.
   */

    while (scd30_probe() != NO_ERROR) {
 800117c:	e005      	b.n	800118a <main+0x4e>
  	  UART2_SendString("SCD30 sensor probing failed\n");
 800117e:	484c      	ldr	r0, [pc, #304]	@ (80012b0 <main+0x174>)
 8001180:	f7ff ff76 	bl	8001070 <UART2_SendString>
        sensirion_sleep_usec(1000000u);
 8001184:	484b      	ldr	r0, [pc, #300]	@ (80012b4 <main+0x178>)
 8001186:	f004 fe51 	bl	8005e2c <sensirion_sleep_usec>
    while (scd30_probe() != NO_ERROR) {
 800118a:	f004 fbdc 	bl	8005946 <scd30_probe>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f4      	bne.n	800117e <main+0x42>
    }
    UART2_SendString("SCD30 sensor probing successful\n");
 8001194:	4848      	ldr	r0, [pc, #288]	@ (80012b8 <main+0x17c>)
 8001196:	f7ff ff6b 	bl	8001070 <UART2_SendString>

    scd30_set_measurement_interval(interval_in_seconds);
 800119a:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <main+0x180>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fb9c 	bl	80058dc <scd30_set_measurement_interval>
    sensirion_sleep_usec(20000u);
 80011a4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80011a8:	f004 fe40 	bl	8005e2c <sensirion_sleep_usec>
    scd30_start_periodic_measurement(0);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f004 fb2d 	bl	800580c <scd30_start_periodic_measurement>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t data_ready = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	80bb      	strh	r3, [r7, #4]
	        uint16_t timeout = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	80fb      	strh	r3, [r7, #6]

	        /* Poll data_ready flag until data is available. Allow 20% more than
	         * the measurement interval to account for clock imprecision of the
	         * sensor.
	         */
	        for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1500000); ++timeout) {  // Augmenter le délai d'attente
 80011ba:	2300      	movs	r3, #0
 80011bc:	80fb      	strh	r3, [r7, #6]
 80011be:	e021      	b.n	8001204 <main+0xc8>
	            err = scd30_get_data_ready(&data_ready);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fbac 	bl	8005920 <scd30_get_data_ready>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <main+0x184>)
 80011ce:	801a      	strh	r2, [r3, #0]
	            if (err != NO_ERROR) {
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <main+0x184>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <main+0xb6>
	                sprintf(txbuff, "Error reading data_ready flag: %i\n", err);
 80011da:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <main+0x184>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4938      	ldr	r1, [pc, #224]	@ (80012c4 <main+0x188>)
 80011e4:	4838      	ldr	r0, [pc, #224]	@ (80012c8 <main+0x18c>)
 80011e6:	f005 fbed 	bl	80069c4 <siprintf>
	                UART2_SendString(txbuff);
 80011ea:	4837      	ldr	r0, [pc, #220]	@ (80012c8 <main+0x18c>)
 80011ec:	f7ff ff40 	bl	8001070 <UART2_SendString>
	                break;  // Sortir de la boucle en cas d'erreur
 80011f0:	e016      	b.n	8001220 <main+0xe4>
	            }
	            if (data_ready) {
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d112      	bne.n	800121e <main+0xe2>
	                break;
	            }
	            sensirion_sleep_usec(100000);  // Attente de 100ms avant de re-vérifier
 80011f8:	4834      	ldr	r0, [pc, #208]	@ (80012cc <main+0x190>)
 80011fa:	f004 fe17 	bl	8005e2c <sensirion_sleep_usec>
	        for (timeout = 0; (100000 * timeout) < (interval_in_seconds * 1500000); ++timeout) {  // Augmenter le délai d'attente
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	3301      	adds	r3, #1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <main+0x190>)
 8001208:	fb03 f202 	mul.w	r2, r3, r2
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <main+0x180>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <main+0x194>)
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	429a      	cmp	r2, r3
 800121a:	dbd1      	blt.n	80011c0 <main+0x84>
 800121c:	e000      	b.n	8001220 <main+0xe4>
	                break;
 800121e:	bf00      	nop
	        }


	        if (!data_ready) {
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <main+0xf2>
	            UART2_SendString("Timeout waiting for data_ready flag\n");
 8001226:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <main+0x198>)
 8001228:	f7ff ff22 	bl	8001070 <UART2_SendString>
 800122c:	e7c1      	b.n	80011b2 <main+0x76>
	        }

	        /* Measure co2, temperature and relative humidity and store into
	         * variables.
	         */
	        err = scd30_read_measurement(&co2_ppm, &temperature, &relative_humidity);
 800122e:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <main+0x19c>)
 8001230:	492a      	ldr	r1, [pc, #168]	@ (80012dc <main+0x1a0>)
 8001232:	482b      	ldr	r0, [pc, #172]	@ (80012e0 <main+0x1a4>)
 8001234:	f004 fb08 	bl	8005848 <scd30_read_measurement>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <main+0x184>)
 800123e:	801a      	strh	r2, [r3, #0]
	        if (err != NO_ERROR) {
 8001240:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <main+0x184>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <main+0x116>
	            UART2_SendString("Error reading measurement\n");
 800124a:	4826      	ldr	r0, [pc, #152]	@ (80012e4 <main+0x1a8>)
 800124c:	f7ff ff10 	bl	8001070 <UART2_SendString>
 8001250:	e021      	b.n	8001296 <main+0x15a>

	        } else {
	            sprintf(txbuff, "Measured CO2 concentration: %.2f ppm, "
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <main+0x1a4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	4680      	mov	r8, r0
 800125e:	4689      	mov	r9, r1
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <main+0x1a0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f977 	bl	8000558 <__aeabi_f2d>
 800126a:	4604      	mov	r4, r0
 800126c:	460d      	mov	r5, r1
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <main+0x19c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f970 	bl	8000558 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001280:	e9cd 4500 	strd	r4, r5, [sp]
 8001284:	4642      	mov	r2, r8
 8001286:	464b      	mov	r3, r9
 8001288:	4917      	ldr	r1, [pc, #92]	@ (80012e8 <main+0x1ac>)
 800128a:	480f      	ldr	r0, [pc, #60]	@ (80012c8 <main+0x18c>)
 800128c:	f005 fb9a 	bl	80069c4 <siprintf>
	                   "Measured temperature: %.2f degC, "
	                   "Measured humidity: %.2f %%RH\r\n",
	                   co2_ppm, temperature,relative_humidity);
	            UART2_SendString(txbuff);
 8001290:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <main+0x18c>)
 8001292:	f7ff feed 	bl	8001070 <UART2_SendString>
	        }

	        HAL_Delay(2000);  // Attente de 2 secondes avant la prochaine lecture
 8001296:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800129a:	f000 fbe5 	bl	8001a68 <HAL_Delay>
  {
 800129e:	e788      	b.n	80011b2 <main+0x76>
 80012a0:	20000320 	.word	0x20000320
 80012a4:	20000370 	.word	0x20000370
 80012a8:	20000328 	.word	0x20000328
 80012ac:	20000000 	.word	0x20000000
 80012b0:	08008c38 	.word	0x08008c38
 80012b4:	000f4240 	.word	0x000f4240
 80012b8:	08008c58 	.word	0x08008c58
 80012bc:	20000002 	.word	0x20000002
 80012c0:	20000254 	.word	0x20000254
 80012c4:	08008c7c 	.word	0x08008c7c
 80012c8:	20000258 	.word	0x20000258
 80012cc:	000186a0 	.word	0x000186a0
 80012d0:	0016e360 	.word	0x0016e360
 80012d4:	08008ca0 	.word	0x08008ca0
 80012d8:	20000250 	.word	0x20000250
 80012dc:	2000024c 	.word	0x2000024c
 80012e0:	20000248 	.word	0x20000248
 80012e4:	08008cc8 	.word	0x08008cc8
 80012e8:	08008ce4 	.word	0x08008ce4

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	@ 0x50
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2230      	movs	r2, #48	@ 0x30
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fbc5 	bl	8006a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	4a27      	ldr	r2, [pc, #156]	@ (80013b8 <SystemClock_Config+0xcc>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001320:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <SystemClock_Config+0xd0>)
 8001336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001350:	2310      	movs	r3, #16
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800135c:	2310      	movs	r3, #16
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001360:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001366:	2304      	movs	r3, #4
 8001368:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800136a:	2304      	movs	r3, #4
 800136c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fee2 	bl	800313c <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800137e:	f000 f81f 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f944 	bl	800362c <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013aa:	f000 f809 	bl	80013c0 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	@ 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <Error_Handler+0x8>

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140a:	2007      	movs	r0, #7
 800140c:	f000 fc2a 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 fad9 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART2_IRQHandler+0x10>)
 8001482:	f003 fa6d 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000370 	.word	0x20000370

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f005 fb41 	bl	8006b30 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>

080014d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f005 faa6 	bl	8006b30 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20020000 	.word	0x20020000
 8001610:	00000400 	.word	0x00000400
 8001614:	20000324 	.word	0x20000324
 8001618:	20000560 	.word	0x20000560

0800161c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b096      	sub	sp, #88	@ 0x58
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2220      	movs	r2, #32
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fa06 	bl	8006a8a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167e:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <MX_TIM1_Init+0x13c>)
 8001680:	4a3f      	ldr	r2, [pc, #252]	@ (8001780 <MX_TIM1_Init+0x140>)
 8001682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001684:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <MX_TIM1_Init+0x13c>)
 8001686:	2253      	movs	r2, #83	@ 0x53
 8001688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <MX_TIM1_Init+0x13c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001690:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <MX_TIM1_Init+0x13c>)
 8001692:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <MX_TIM1_Init+0x13c>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016aa:	4834      	ldr	r0, [pc, #208]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016ac:	f002 f9de 	bl	8003a6c <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016b6:	f7ff fe83 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016c4:	4619      	mov	r1, r3
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016c8:	f002 fbea 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016d2:	f7ff fe75 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d6:	4829      	ldr	r0, [pc, #164]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016d8:	f002 fa17 	bl	8003b0a <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016e2:	f7ff fe6d 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016f2:	4619      	mov	r1, r3
 80016f4:	4821      	ldr	r0, [pc, #132]	@ (800177c <MX_TIM1_Init+0x13c>)
 80016f6:	f002 ff73 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001700:	f7ff fe5e 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	@ 0x60
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8001708:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	4814      	ldr	r0, [pc, #80]	@ (800177c <MX_TIM1_Init+0x13c>)
 800172c:	f002 faf6 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001736:	f7ff fe43 	bl	80013c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4807      	ldr	r0, [pc, #28]	@ (800177c <MX_TIM1_Init+0x13c>)
 800175e:	f002 ffad 	bl	80046bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001768:	f7ff fe2a 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800176c:	4803      	ldr	r0, [pc, #12]	@ (800177c <MX_TIM1_Init+0x13c>)
 800176e:	f000 f82b 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 8001772:	bf00      	nop
 8001774:	3758      	adds	r7, #88	@ 0x58
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000328 	.word	0x20000328
 8001780:	40010000 	.word	0x40010000

08001784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10d      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11e      	bne.n	8001828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800180a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <HAL_TIM_MspPostInit+0x70>)
 8001824:	f000 faf2 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40010000 	.word	0x40010000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000

0800183c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f002 ff74 	bl	8004760 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f7ff fd9f 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000370 	.word	0x20000370
 800188c:	40004400 	.word	0x40004400

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_UART_MspInit+0x94>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d133      	bne.n	800191a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_UART_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <HAL_UART_MspInit+0x9c>)
 8001906:	f000 fa81 	bl	8001e0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2026      	movs	r0, #38	@ 0x26
 8001910:	f000 f9b3 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001914:	2026      	movs	r0, #38	@ 0x26
 8001916:	f000 f9cc 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40004400 	.word	0x40004400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001934:	f7ff fe72 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f005 f8ed 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fbeb 	bl	800113c <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001974:	080090e8 	.word	0x080090e8
  ldr r2, =_sbss
 8001978:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800197c:	2000055c 	.word	0x2000055c

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f959 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fd08 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f971 	bl	8001cce <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f939 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	20000008 	.word	0x20000008

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	200003b8 	.word	0x200003b8

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200003b8 	.word	0x200003b8

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000000c 	.word	0x2000000c

08001ab0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8001ab4:	4b02      	ldr	r3, [pc, #8]	@ (8001ac0 <HAL_GetHalVersion+0x10>)
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	01080300 	.word	0x01080300

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	@ (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	@ (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	@ (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	@ 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff29 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff3e 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff31 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff feac 	bl	8001a50 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d008      	beq.n	8001d18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e052      	b.n	8001dbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0216 	bic.w	r2, r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <HAL_DMA_Abort+0x62>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0208 	bic.w	r2, r2, #8
 8001d56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d68:	e013      	b.n	8001d92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d6a:	f7ff fe71 	bl	8001a50 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d90c      	bls.n	8001d92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2203      	movs	r2, #3
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e015      	b.n	8001dbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e4      	bne.n	8001d6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	223f      	movs	r2, #63	@ 0x3f
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d004      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00c      	b.n	8001dfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2205      	movs	r2, #5
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e159      	b.n	80020dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8148 	bne.w	80020d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d005      	beq.n	8001e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d130      	bne.n	8001ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0201 	and.w	r2, r3, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d017      	beq.n	8001efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d123      	bne.n	8001f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	08da      	lsrs	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3208      	adds	r2, #8
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a2 	beq.w	80020d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <HAL_GPIO_Init+0x2e8>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a56      	ldr	r2, [pc, #344]	@ (80020f4 <HAL_GPIO_Init+0x2e8>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b54      	ldr	r3, [pc, #336]	@ (80020f4 <HAL_GPIO_Init+0x2e8>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fae:	4a52      	ldr	r2, [pc, #328]	@ (80020f8 <HAL_GPIO_Init+0x2ec>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a49      	ldr	r2, [pc, #292]	@ (80020fc <HAL_GPIO_Init+0x2f0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x202>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a48      	ldr	r2, [pc, #288]	@ (8002100 <HAL_GPIO_Init+0x2f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x1fe>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a47      	ldr	r2, [pc, #284]	@ (8002104 <HAL_GPIO_Init+0x2f8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x1fa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <HAL_GPIO_Init+0x2fc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x1f6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a45      	ldr	r2, [pc, #276]	@ (800210c <HAL_GPIO_Init+0x300>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x1f2>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x204>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x204>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x204>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x204>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x204>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	@ (80020f8 <HAL_GPIO_Init+0x2ec>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <HAL_GPIO_Init+0x304>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a2f      	ldr	r2, [pc, #188]	@ (8002110 <HAL_GPIO_Init+0x304>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_GPIO_Init+0x304>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a24      	ldr	r2, [pc, #144]	@ (8002110 <HAL_GPIO_Init+0x304>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002082:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <HAL_GPIO_Init+0x304>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002110 <HAL_GPIO_Init+0x304>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_GPIO_Init+0x304>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002110 <HAL_GPIO_Init+0x304>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f aea2 	bls.w	8001e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	@ 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e12b      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe ff36 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	@ 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800219a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ac:	f001 fc36 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80021b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a81      	ldr	r2, [pc, #516]	@ (80023bc <HAL_I2C_Init+0x274>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d807      	bhi.n	80021cc <HAL_I2C_Init+0x84>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a80      	ldr	r2, [pc, #512]	@ (80023c0 <HAL_I2C_Init+0x278>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e006      	b.n	80021da <HAL_I2C_Init+0x92>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a7d      	ldr	r2, [pc, #500]	@ (80023c4 <HAL_I2C_Init+0x27c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0e7      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a78      	ldr	r2, [pc, #480]	@ (80023c8 <HAL_I2C_Init+0x280>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9b      	lsrs	r3, r3, #18
 80021ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a6a      	ldr	r2, [pc, #424]	@ (80023bc <HAL_I2C_Init+0x274>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d802      	bhi.n	800221c <HAL_I2C_Init+0xd4>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	e009      	b.n	8002230 <HAL_I2C_Init+0xe8>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	4a69      	ldr	r2, [pc, #420]	@ (80023cc <HAL_I2C_Init+0x284>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	3301      	adds	r3, #1
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	495c      	ldr	r1, [pc, #368]	@ (80023bc <HAL_I2C_Init+0x274>)
 800224c:	428b      	cmp	r3, r1
 800224e:	d819      	bhi.n	8002284 <HAL_I2C_Init+0x13c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e59      	subs	r1, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fbb1 f3f3 	udiv	r3, r1, r3
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002264:	400b      	ands	r3, r1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_I2C_Init+0x138>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e59      	subs	r1, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fbb1 f3f3 	udiv	r3, r1, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	e051      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002280:	2304      	movs	r3, #4
 8002282:	e04f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d111      	bne.n	80022b0 <HAL_I2C_Init+0x168>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e012      	b.n	80022d6 <HAL_I2C_Init+0x18e>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	0099      	lsls	r1, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Init+0x196>
 80022da:	2301      	movs	r3, #1
 80022dc:	e022      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_I2C_Init+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e58      	subs	r0, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	440b      	add	r3, r1
 80022f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e58      	subs	r0, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	0099      	lsls	r1, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6809      	ldr	r1, [r1, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6911      	ldr	r1, [r2, #16]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	430b      	orrs	r3, r1
 8002366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	000186a0 	.word	0x000186a0
 80023c0:	001e847f 	.word	0x001e847f
 80023c4:	003d08ff 	.word	0x003d08ff
 80023c8:	431bde83 	.word	0x431bde83
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
 80023e0:	4613      	mov	r3, r2
 80023e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fb34 	bl	8001a50 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	f040 80e0 	bne.w	80025b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2319      	movs	r3, #25
 80023fe:	2201      	movs	r2, #1
 8002400:	4970      	ldr	r1, [pc, #448]	@ (80025c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fc64 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
 8002410:	e0d3      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x50>
 800241c:	2302      	movs	r3, #2
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d007      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	@ 0x21
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a50      	ldr	r2, [pc, #320]	@ (80025c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 face 	bl	8002a30 <I2C_MasterRequestWrite>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08d      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b4:	e066      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6a39      	ldr	r1, [r7, #32]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fd22 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_I2C_Master_Transmit+0x188>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6a39      	ldr	r1, [r7, #32]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fd19 	bl	8002f94 <I2C_WaitOnBTFFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	2b04      	cmp	r3, #4
 800256e:	d107      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01a      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d194      	bne.n	80024b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	@ 0x30
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
 80025dc:	4613      	mov	r3, r2
 80025de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff fa36 	bl	8001a50 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	f040 8217 	bne.w	8002a22 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2319      	movs	r3, #25
 80025fa:	2201      	movs	r2, #1
 80025fc:	497c      	ldr	r1, [pc, #496]	@ (80027f0 <HAL_I2C_Master_Receive+0x224>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fb66 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	e20a      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_I2C_Master_Receive+0x50>
 8002618:	2302      	movs	r3, #2
 800261a:	e203      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d007      	beq.n	8002642 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2222      	movs	r2, #34	@ 0x22
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2210      	movs	r2, #16
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	893a      	ldrh	r2, [r7, #8]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a5c      	ldr	r2, [pc, #368]	@ (80027f4 <HAL_I2C_Master_Receive+0x228>)
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa52 	bl	8002b34 <I2C_MasterRequestRead>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1c4      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d113      	bne.n	80026ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	623b      	str	r3, [r7, #32]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e198      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d11b      	bne.n	800270a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e178      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b02      	cmp	r3, #2
 8002710:	d11b      	bne.n	800274a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002720:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	e158      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002770:	e144      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	2b03      	cmp	r3, #3
 8002778:	f200 80f1 	bhi.w	800295e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	2b01      	cmp	r3, #1
 8002782:	d123      	bne.n	80027cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002786:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fc4b 	bl	8003024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e145      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ca:	e117      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d14e      	bne.n	8002872 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <HAL_I2C_Master_Receive+0x22c>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fa76 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e11a      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
 80027ee:	bf00      	nop
 80027f0:	00100002 	.word	0x00100002
 80027f4:	ffff0000 	.word	0xffff0000
 80027f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002870:	e0c4      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	2200      	movs	r2, #0
 800287a:	496c      	ldr	r1, [pc, #432]	@ (8002a2c <HAL_I2C_Master_Receive+0x460>)
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa27 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0cb      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	4955      	ldr	r1, [pc, #340]	@ (8002a2c <HAL_I2C_Master_Receive+0x460>)
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f9f9 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e09d      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800295c:	e04e      	b.n	80029fc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002960:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb5e 	bl	8003024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e058      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d124      	bne.n	80029fc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f aeb6 	bne.w	8002772 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	00010004 	.word	0x00010004

08002a30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d006      	beq.n	8002a5a <I2C_MasterRequestWrite+0x2a>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d003      	beq.n	8002a5a <I2C_MasterRequestWrite+0x2a>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a58:	d108      	bne.n	8002a6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e00b      	b.n	8002a84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	2b12      	cmp	r3, #18
 8002a72:	d107      	bne.n	8002a84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f91d 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d103      	bne.n	8002ab4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e035      	b.n	8002b24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ac0:	d108      	bne.n	8002ad4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	e01b      	b.n	8002b0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	11db      	asrs	r3, r3, #7
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0306 	and.w	r3, r3, #6
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f063 030f 	orn	r3, r3, #15
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <I2C_MasterRequestWrite+0xfc>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f966 	bl	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e010      	b.n	8002b24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4907      	ldr	r1, [pc, #28]	@ (8002b30 <I2C_MasterRequestWrite+0x100>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f956 	bl	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	00010008 	.word	0x00010008
 8002b30:	00010002 	.word	0x00010002

08002b34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d006      	beq.n	8002b6e <I2C_MasterRequestRead+0x3a>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d003      	beq.n	8002b6e <I2C_MasterRequestRead+0x3a>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b6c:	d108      	bne.n	8002b80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00b      	b.n	8002b98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	2b11      	cmp	r3, #17
 8002b86:	d107      	bne.n	8002b98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f893 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bbe:	d103      	bne.n	8002bc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e079      	b.n	8002cc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bd4:	d108      	bne.n	8002be8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	e05f      	b.n	8002ca8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be8:	897b      	ldrh	r3, [r7, #10]
 8002bea:	11db      	asrs	r3, r3, #7
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0306 	and.w	r3, r3, #6
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f063 030f 	orn	r3, r3, #15
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4930      	ldr	r1, [pc, #192]	@ (8002cc8 <I2C_MasterRequestRead+0x194>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f8dc 	bl	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e054      	b.n	8002cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4929      	ldr	r1, [pc, #164]	@ (8002ccc <I2C_MasterRequestRead+0x198>)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8cc 	bl	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e044      	b.n	8002cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f831 	bl	8002cd0 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c82:	d103      	bne.n	8002c8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e017      	b.n	8002cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	11db      	asrs	r3, r3, #7
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0306 	and.w	r3, r3, #6
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f063 030e 	orn	r3, r3, #14
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4907      	ldr	r1, [pc, #28]	@ (8002ccc <I2C_MasterRequestRead+0x198>)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f888 	bl	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	00010008 	.word	0x00010008
 8002ccc:	00010002 	.word	0x00010002

08002cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce0:	e048      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d044      	beq.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fe feb1 	bl	8001a50 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d139      	bne.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10d      	bne.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	43da      	mvns	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	e00c      	b.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d116      	bne.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e023      	b.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d093      	beq.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd2:	e071      	b.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de2:	d123      	bne.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e067      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d041      	beq.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe fe0c 	bl	8001a50 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d136      	bne.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10c      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e00b      	b.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e021      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10c      	bne.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e00b      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f af6d 	bne.w	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f10:	e034      	b.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8e3 	bl	80030de <I2C_IsAcknowledgeFailed>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e034      	b.n	8002f8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d028      	beq.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe fd91 	bl	8001a50 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11d      	bne.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d016      	beq.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b80      	cmp	r3, #128	@ 0x80
 8002f88:	d1c3      	bne.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa0:	e034      	b.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f89b 	bl	80030de <I2C_IsAcknowledgeFailed>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e034      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d028      	beq.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fd49 	bl	8001a50 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11d      	bne.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d016      	beq.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d1c3      	bne.n	8002fa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003030:	e049      	b.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d119      	bne.n	8003074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e030      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003074:	f7fe fcec 	bl	8001a50 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d302      	bcc.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11d      	bne.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d016      	beq.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d1ae      	bne.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f4:	d11b      	bne.n	800312e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e267      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800315a:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d00c      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b85      	ldr	r3, [pc, #532]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800316e:	2b08      	cmp	r3, #8
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e242      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fc2c 	bl	8001a50 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fc28 	bl	8001a50 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e207      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fc18 	bl	8001a50 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fe fc14 	bl	8001a50 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1f3      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fbcd 	bl	8001a50 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe fbc9 	bl	8001a50 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a8      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fbac 	bl	8001a50 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7fe fba8 	bl	8001a50 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e187      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d036      	beq.n	8003394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fb8c 	bl	8001a50 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7fe fb88 	bl	8001a50 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e167      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
 800335a:	e01b      	b.n	8003394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fe fb75 	bl	8001a50 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fe fb71 	bl	8001a50 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e150      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8097 	beq.w	80034d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a7c      	ldr	r2, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b77      	ldr	r3, [pc, #476]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fb31 	bl	8001a50 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fe fb2d 	bl	8001a50 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ea>
 8003418:	4b64      	ldr	r3, [pc, #400]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x30c>
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003448:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe faf2 	bl	8001a50 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe faee 	bl	8001a50 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0cb      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ee      	beq.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe fadc 	bl	8001a50 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe fad8 	bl	8001a50 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0b5      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d05c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d141      	bne.n	8003572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe faac 	bl	8001a50 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe faa8 	bl	8001a50 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e087      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe fa81 	bl	8001a50 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7fe fa7d 	bl	8001a50 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e05c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x416>
 8003570:	e054      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fa6a 	bl	8001a50 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe fa66 	bl	8001a50 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e038      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ec>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7fe f998 	bl	8001a50 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe f994 	bl	8001a50 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe f8f8 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08008d4c 	.word	0x08008d4c
 80037f0:	20000004 	.word	0x20000004
 80037f4:	20000008 	.word	0x20000008

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037fc:	b094      	sub	sp, #80	@ 0x50
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b79      	ldr	r3, [pc, #484]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80e1 	bhi.w	80039e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e0db      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b73      	ldr	r3, [pc, #460]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003830:	e0db      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b73      	ldr	r3, [pc, #460]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003836:	e0d8      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003840:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b6d      	ldr	r3, [pc, #436]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003858:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	633b      	str	r3, [r7, #48]	@ 0x30
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
 8003866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800386a:	4622      	mov	r2, r4
 800386c:	462b      	mov	r3, r5
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	0159      	lsls	r1, r3, #5
 8003878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387c:	0150      	lsls	r0, r2, #5
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4621      	mov	r1, r4
 8003884:	1a51      	subs	r1, r2, r1
 8003886:	6139      	str	r1, [r7, #16]
 8003888:	4629      	mov	r1, r5
 800388a:	eb63 0301 	sbc.w	r3, r3, r1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800389c:	4659      	mov	r1, fp
 800389e:	018b      	lsls	r3, r1, #6
 80038a0:	4651      	mov	r1, sl
 80038a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a6:	4651      	mov	r1, sl
 80038a8:	018a      	lsls	r2, r1, #6
 80038aa:	4651      	mov	r1, sl
 80038ac:	ebb2 0801 	subs.w	r8, r2, r1
 80038b0:	4659      	mov	r1, fp
 80038b2:	eb63 0901 	sbc.w	r9, r3, r1
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ca:	4690      	mov	r8, r2
 80038cc:	4699      	mov	r9, r3
 80038ce:	4623      	mov	r3, r4
 80038d0:	eb18 0303 	adds.w	r3, r8, r3
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	462b      	mov	r3, r5
 80038d8:	eb49 0303 	adc.w	r3, r9, r3
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ea:	4629      	mov	r1, r5
 80038ec:	024b      	lsls	r3, r1, #9
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f4:	4621      	mov	r1, r4
 80038f6:	024a      	lsls	r2, r1, #9
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003908:	f7fd f956 	bl	8000bb8 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003914:	e058      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	2200      	movs	r2, #0
 800391e:	4618      	mov	r0, r3
 8003920:	4611      	mov	r1, r2
 8003922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
 800392c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003930:	4642      	mov	r2, r8
 8003932:	464b      	mov	r3, r9
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0159      	lsls	r1, r3, #5
 800393e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003942:	0150      	lsls	r0, r2, #5
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4641      	mov	r1, r8
 800394a:	ebb2 0a01 	subs.w	sl, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb63 0b01 	sbc.w	fp, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003968:	ebb2 040a 	subs.w	r4, r2, sl
 800396c:	eb63 050b 	sbc.w	r5, r3, fp
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	00eb      	lsls	r3, r5, #3
 800397a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397e:	00e2      	lsls	r2, r4, #3
 8003980:	4614      	mov	r4, r2
 8003982:	461d      	mov	r5, r3
 8003984:	4643      	mov	r3, r8
 8003986:	18e3      	adds	r3, r4, r3
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	464b      	mov	r3, r9
 800398c:	eb45 0303 	adc.w	r3, r5, r3
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399e:	4629      	mov	r1, r5
 80039a0:	028b      	lsls	r3, r1, #10
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a8:	4621      	mov	r1, r4
 80039aa:	028a      	lsls	r2, r1, #10
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	2200      	movs	r2, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	61fa      	str	r2, [r7, #28]
 80039b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039bc:	f7fd f8fc 	bl	8000bb8 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x204>)
 80039e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3750      	adds	r7, #80	@ 0x50
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	@ (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08008d5c 	.word	0x08008d5c

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a48:	f7ff ffdc 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08008d5c 	.word	0x08008d5c

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e041      	b.n	8003b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fe76 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fac0 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e041      	b.n	8003ba0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f839 	bl	8003ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f000 fa71 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x24>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e022      	b.n	8003c26 <HAL_TIM_PWM_Start+0x6a>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d109      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e015      	b.n	8003c26 <HAL_TIM_PWM_Start+0x6a>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e008      	b.n	8003c26 <HAL_TIM_PWM_Start+0x6a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e068      	b.n	8003d00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x82>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c3c:	e013      	b.n	8003c66 <HAL_TIM_PWM_Start+0xaa>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start+0x92>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c4c:	e00b      	b.n	8003c66 <HAL_TIM_PWM_Start+0xaa>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start+0xa2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c5c:	e003      	b.n	8003c66 <HAL_TIM_PWM_Start+0xaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fc90 	bl	8004594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <HAL_TIM_PWM_Start+0x14c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <HAL_TIM_PWM_Start+0x14c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <HAL_TIM_PWM_Start+0x10e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca0:	d013      	beq.n	8003cca <HAL_TIM_PWM_Start+0x10e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <HAL_TIM_PWM_Start+0x150>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_TIM_PWM_Start+0x10e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_TIM_PWM_Start+0x154>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_TIM_PWM_Start+0x10e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <HAL_TIM_PWM_Start+0x158>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_TIM_PWM_Start+0x10e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <HAL_TIM_PWM_Start+0x15c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d111      	bne.n	8003cee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b06      	cmp	r3, #6
 8003cda:	d010      	beq.n	8003cfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cec:	e007      	b.n	8003cfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40014000 	.word	0x40014000

08003d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0ae      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	f200 809f 	bhi.w	8003e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003e89 	.word	0x08003e89
 8003d58:	08003e89 	.word	0x08003e89
 8003d5c:	08003e89 	.word	0x08003e89
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003e89 	.word	0x08003e89
 8003d68:	08003e89 	.word	0x08003e89
 8003d6c:	08003e89 	.word	0x08003e89
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003e89 	.word	0x08003e89
 8003d78:	08003e89 	.word	0x08003e89
 8003d7c:	08003e89 	.word	0x08003e89
 8003d80:	08003e47 	.word	0x08003e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f9dc 	bl	8004148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0208 	orr.w	r2, r2, #8
 8003d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	619a      	str	r2, [r3, #24]
      break;
 8003dc2:	e064      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fa22 	bl	8004214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
      break;
 8003e04:	e043      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa6d 	bl	80042ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0208 	orr.w	r2, r2, #8
 8003e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0204 	bic.w	r2, r2, #4
 8003e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
      break;
 8003e44:	e023      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fab7 	bl	80043c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	61da      	str	r2, [r3, #28]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b4      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x186>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef4:	d03e      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xd4>
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efa:	f200 8087 	bhi.w	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	f000 8086 	beq.w	8004012 <HAL_TIM_ConfigClockSource+0x172>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	d87f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b70      	cmp	r3, #112	@ 0x70
 8003f0e:	d01a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xa6>
 8003f10:	2b70      	cmp	r3, #112	@ 0x70
 8003f12:	d87b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b60      	cmp	r3, #96	@ 0x60
 8003f16:	d050      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x11a>
 8003f18:	2b60      	cmp	r3, #96	@ 0x60
 8003f1a:	d877      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b50      	cmp	r3, #80	@ 0x50
 8003f1e:	d03c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xfa>
 8003f20:	2b50      	cmp	r3, #80	@ 0x50
 8003f22:	d873      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b40      	cmp	r3, #64	@ 0x40
 8003f26:	d058      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x13a>
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d86f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b30      	cmp	r3, #48	@ 0x30
 8003f2e:	d064      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b30      	cmp	r3, #48	@ 0x30
 8003f32:	d86b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d060      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d867      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d05a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	e062      	b.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	f000 fafd 	bl	8004554 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e04f      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	f000 fae6 	bl	8004554 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e03c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 fa5a 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	@ 0x50
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fab3 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e02c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 fa79 	bl	80044be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	@ 0x60
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 faa3 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e01c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 fa3a 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	@ 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fa93 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e00c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 fa8a 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 800400a:	e003      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e000      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3a      	ldr	r2, [pc, #232]	@ (800412c <TIM_Base_SetConfig+0xfc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00f      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a37      	ldr	r2, [pc, #220]	@ (8004130 <TIM_Base_SetConfig+0x100>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a36      	ldr	r2, [pc, #216]	@ (8004134 <TIM_Base_SetConfig+0x104>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a35      	ldr	r2, [pc, #212]	@ (8004138 <TIM_Base_SetConfig+0x108>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <TIM_Base_SetConfig+0xfc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004088:	d017      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a28      	ldr	r2, [pc, #160]	@ (8004130 <TIM_Base_SetConfig+0x100>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a27      	ldr	r2, [pc, #156]	@ (8004134 <TIM_Base_SetConfig+0x104>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00f      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <TIM_Base_SetConfig+0x108>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a25      	ldr	r2, [pc, #148]	@ (800413c <TIM_Base_SetConfig+0x10c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <TIM_Base_SetConfig+0x110>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <TIM_Base_SetConfig+0x114>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0e      	ldr	r2, [pc, #56]	@ (800412c <TIM_Base_SetConfig+0xfc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d105      	bne.n	800411e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	611a      	str	r2, [r3, #16]
  }
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0201 	bic.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 0302 	bic.w	r3, r3, #2
 8004190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <TIM_OC1_SetConfig+0xc8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0308 	bic.w	r3, r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <TIM_OC1_SetConfig+0xc8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d111      	bne.n	80041ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40010000 	.word	0x40010000

08004214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1e      	ldr	r2, [pc, #120]	@ (80042e8 <TIM_OC2_SetConfig+0xd4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10d      	bne.n	8004290 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <TIM_OC2_SetConfig+0xd4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d113      	bne.n	80042c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800429e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40010000 	.word	0x40010000

080042ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <TIM_OC3_SetConfig+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10d      	bne.n	8004366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <TIM_OC3_SetConfig+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d113      	bne.n	8004396 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40010000 	.word	0x40010000

080043c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800440a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	031b      	lsls	r3, r3, #12
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a10      	ldr	r2, [pc, #64]	@ (800445c <TIM_OC4_SetConfig+0x9c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d109      	bne.n	8004434 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	019b      	lsls	r3, r3, #6
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0210 	bic.w	r2, r3, #16
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e050      	b.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1c      	ldr	r2, [pc, #112]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d013      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a18      	ldr	r2, [pc, #96]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a16      	ldr	r2, [pc, #88]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a15      	ldr	r2, [pc, #84]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a13      	ldr	r2, [pc, #76]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40014000 	.word	0x40014000

080046bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e03d      	b.n	8004754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e042      	b.n	80047f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd f882 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fdbd 	bl	8005324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	d175      	bne.n	800490c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Transmit+0x2c>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e06e      	b.n	800490e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2221      	movs	r2, #33	@ 0x21
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483e:	f7fd f907 	bl	8001a50 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d108      	bne.n	800486c <HAL_UART_Transmit+0x6c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e003      	b.n	8004874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004874:	e02e      	b.n	80048d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fb1f 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03a      	b.n	800490e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3302      	adds	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e007      	b.n	80048c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1cb      	bne.n	8004876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2140      	movs	r1, #64	@ 0x40
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 faeb 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e006      	b.n	800490e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	d112      	bne.n	8004956 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_UART_Receive_IT+0x26>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e00b      	b.n	8004958 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	461a      	mov	r2, r3
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fb12 	bl	8004f76 <UART_Start_Receive_IT>
 8004952:	4603      	mov	r3, r0
 8004954:	e000      	b.n	8004958 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	@ 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800499e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fbf2 	bl	80051a8 <UART_Receive_IT>
      return;
 80049c4:	e25b      	b.n	8004e7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80de 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80d1 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
 8004a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f043 0202 	orr.w	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0208 	orr.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 81f2 	beq.w	8004e74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb7d 	bl	80051a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_IRQHandler+0x17a>
 8004ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa85 	bl	8004fea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	4a7e      	ldr	r2, [pc, #504]	@ (8004d40 <HAL_UART_IRQHandler+0x3e0>)
 8004b48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd f939 	bl	8001dc6 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00e      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f994 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00a      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f990 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e006      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f98c 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b86:	e175      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	bf00      	nop
    return;
 8004b8a:	e173      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 814f 	bne.w	8004e34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8148 	beq.w	8004e34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8141 	beq.w	8004e34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	f040 80b6 	bne.w	8004d44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8145 	beq.w	8004e78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 813e 	bcs.w	8004e78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0e:	f000 8088 	beq.w	8004d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc ffe2 	bl	8001ce6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8b7 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d3e:	e09b      	b.n	8004e78 <HAL_UART_IRQHandler+0x518>
 8004d40:	080050b1 	.word	0x080050b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 808e 	beq.w	8004e7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8089 	beq.w	8004e7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	623b      	str	r3, [r7, #32]
   return(result);
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3314      	adds	r3, #20
 8004dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e3      	bne.n	8004de8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f83d 	bl	8004eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e32:	e023      	b.n	8004e7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <HAL_UART_IRQHandler+0x4f4>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f943 	bl	80050d8 <UART_Transmit_IT>
    return;
 8004e52:	e014      	b.n	8004e7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <HAL_UART_IRQHandler+0x51e>
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f983 	bl	8005178 <UART_EndTransmit_IT>
    return;
 8004e72:	e004      	b.n	8004e7e <HAL_UART_IRQHandler+0x51e>
    return;
 8004e74:	bf00      	nop
 8004e76:	e002      	b.n	8004e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e7c:	bf00      	nop
  }
}
 8004e7e:	37e8      	adds	r7, #232	@ 0xe8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed4:	e03b      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d037      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ede:	f7fc fdb7 	bl	8001a50 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e03a      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d023      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b80      	cmp	r3, #128	@ 0x80
 8004f0a:	d020      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d01d      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d116      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f857 	bl	8004fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d0b4      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2222      	movs	r2, #34	@ 0x22
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0220 	orr.w	r2, r2, #32
 8004fda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b095      	sub	sp, #84	@ 0x54
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005012:	643a      	str	r2, [r7, #64]	@ 0x40
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	61fb      	str	r3, [r7, #28]
   return(result);
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	2b01      	cmp	r3, #1
 8005060:	d119      	bne.n	8005096 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60bb      	str	r3, [r7, #8]
   return(result);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005082:	61ba      	str	r2, [r7, #24]
 8005084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e5      	bne.n	8005062 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050a4:	bf00      	nop
 80050a6:	3754      	adds	r7, #84	@ 0x54
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fee4 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b21      	cmp	r3, #33	@ 0x21
 80050ea:	d13e      	bne.n	800516a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f4:	d114      	bne.n	8005120 <UART_Transmit_IT+0x48>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005112:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]
 800511e:	e008      	b.n	8005132 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	1c59      	adds	r1, r3, #1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6211      	str	r1, [r2, #32]
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29b      	uxth	r3, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4619      	mov	r1, r3
 8005140:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005154:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005164:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800518e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fe73 	bl	8004e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08c      	sub	sp, #48	@ 0x30
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b22      	cmp	r3, #34	@ 0x22
 80051ba:	f040 80ae 	bne.w	800531a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d117      	bne.n	80051f8 <UART_Receive_IT+0x50>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80051f6:	e026      	b.n	8005246 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520a:	d007      	beq.n	800521c <UART_Receive_IT+0x74>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <UART_Receive_IT+0x82>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e008      	b.n	800523c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005236:	b2da      	uxtb	r2, r3
 8005238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29b      	uxth	r3, r3
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4619      	mov	r1, r3
 8005254:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005256:	2b00      	cmp	r3, #0
 8005258:	d15d      	bne.n	8005316 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0220 	bic.w	r2, r2, #32
 8005268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	2b01      	cmp	r3, #1
 800529e:	d135      	bne.n	800530c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c6:	623a      	str	r2, [r7, #32]
 80052c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	69f9      	ldr	r1, [r7, #28]
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d10a      	bne.n	80052fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff fdd1 	bl	8004eac <HAL_UARTEx_RxEventCallback>
 800530a:	e002      	b.n	8005312 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fb fee3 	bl	80010d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e002      	b.n	800531c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	@ 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005328:	b0c0      	sub	sp, #256	@ 0x100
 800532a:	af00      	add	r7, sp, #0
 800532c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	68d9      	ldr	r1, [r3, #12]
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	ea40 0301 	orr.w	r3, r0, r1
 800534c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800537c:	f021 010c 	bic.w	r1, r1, #12
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800538a:	430b      	orrs	r3, r1
 800538c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	6999      	ldr	r1, [r3, #24]
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	ea40 0301 	orr.w	r3, r0, r1
 80053aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8f      	ldr	r3, [pc, #572]	@ (80055f0 <UART_SetConfig+0x2cc>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d005      	beq.n	80053c4 <UART_SetConfig+0xa0>
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b8d      	ldr	r3, [pc, #564]	@ (80055f4 <UART_SetConfig+0x2d0>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d104      	bne.n	80053ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c4:	f7fe fb3e 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 80053c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053cc:	e003      	b.n	80053d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7fe fb25 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80053d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e0:	f040 810c 	bne.w	80055fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053fe:	415b      	adcs	r3, r3
 8005400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005406:	4621      	mov	r1, r4
 8005408:	eb12 0801 	adds.w	r8, r2, r1
 800540c:	4629      	mov	r1, r5
 800540e:	eb43 0901 	adc.w	r9, r3, r1
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005426:	4690      	mov	r8, r2
 8005428:	4699      	mov	r9, r3
 800542a:	4623      	mov	r3, r4
 800542c:	eb18 0303 	adds.w	r3, r8, r3
 8005430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005434:	462b      	mov	r3, r5
 8005436:	eb49 0303 	adc.w	r3, r9, r3
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800544a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800544e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005452:	460b      	mov	r3, r1
 8005454:	18db      	adds	r3, r3, r3
 8005456:	653b      	str	r3, [r7, #80]	@ 0x50
 8005458:	4613      	mov	r3, r2
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005468:	f7fb fba6 	bl	8000bb8 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b61      	ldr	r3, [pc, #388]	@ (80055f8 <UART_SetConfig+0x2d4>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	011c      	lsls	r4, r3, #4
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005484:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005494:	415b      	adcs	r3, r3
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800549c:	4641      	mov	r1, r8
 800549e:	eb12 0a01 	adds.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb43 0b01 	adc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054bc:	4692      	mov	sl, r2
 80054be:	469b      	mov	fp, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	eb1a 0303 	adds.w	r3, sl, r3
 80054c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ca:	464b      	mov	r3, r9
 80054cc:	eb4b 0303 	adc.w	r3, fp, r3
 80054d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054e8:	460b      	mov	r3, r1
 80054ea:	18db      	adds	r3, r3, r3
 80054ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ee:	4613      	mov	r3, r2
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054fe:	f7fb fb5b 	bl	8000bb8 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4611      	mov	r1, r2
 8005508:	4b3b      	ldr	r3, [pc, #236]	@ (80055f8 <UART_SetConfig+0x2d4>)
 800550a:	fba3 2301 	umull	r2, r3, r3, r1
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2264      	movs	r2, #100	@ 0x64
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	1acb      	subs	r3, r1, r3
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800551e:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <UART_SetConfig+0x2d4>)
 8005520:	fba3 2302 	umull	r2, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800552c:	441c      	add	r4, r3
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005538:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800553c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005548:	415b      	adcs	r3, r3
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800554c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6339      	str	r1, [r7, #48]	@ 0x30
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800559c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055a4:	460b      	mov	r3, r1
 80055a6:	18db      	adds	r3, r3, r3
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055aa:	4613      	mov	r3, r2
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055ba:	f7fb fafd 	bl	8000bb8 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <UART_SetConfig+0x2d4>)
 80055c4:	fba3 1302 	umull	r1, r3, r3, r2
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	2164      	movs	r1, #100	@ 0x64
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	3332      	adds	r3, #50	@ 0x32
 80055d6:	4a08      	ldr	r2, [pc, #32]	@ (80055f8 <UART_SetConfig+0x2d4>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	f003 0207 	and.w	r2, r3, #7
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4422      	add	r2, r4
 80055ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ec:	e106      	b.n	80057fc <UART_SetConfig+0x4d8>
 80055ee:	bf00      	nop
 80055f0:	40011000 	.word	0x40011000
 80055f4:	40011400 	.word	0x40011400
 80055f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005606:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800560a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800560e:	4642      	mov	r2, r8
 8005610:	464b      	mov	r3, r9
 8005612:	1891      	adds	r1, r2, r2
 8005614:	6239      	str	r1, [r7, #32]
 8005616:	415b      	adcs	r3, r3
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
 800561a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800561e:	4641      	mov	r1, r8
 8005620:	1854      	adds	r4, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb43 0501 	adc.w	r5, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	00eb      	lsls	r3, r5, #3
 8005632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005636:	00e2      	lsls	r2, r4, #3
 8005638:	4614      	mov	r4, r2
 800563a:	461d      	mov	r5, r3
 800563c:	4643      	mov	r3, r8
 800563e:	18e3      	adds	r3, r4, r3
 8005640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005644:	464b      	mov	r3, r9
 8005646:	eb45 0303 	adc.w	r3, r5, r3
 800564a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800566a:	4629      	mov	r1, r5
 800566c:	008b      	lsls	r3, r1, #2
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005674:	4621      	mov	r1, r4
 8005676:	008a      	lsls	r2, r1, #2
 8005678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800567c:	f7fb fa9c 	bl	8000bb8 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4b60      	ldr	r3, [pc, #384]	@ (8005808 <UART_SetConfig+0x4e4>)
 8005686:	fba3 2302 	umull	r2, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	011c      	lsls	r4, r3, #4
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005698:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800569c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	61b9      	str	r1, [r7, #24]
 80056a8:	415b      	adcs	r3, r3
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	4641      	mov	r1, r8
 80056b2:	1851      	adds	r1, r2, r1
 80056b4:	6139      	str	r1, [r7, #16]
 80056b6:	4649      	mov	r1, r9
 80056b8:	414b      	adcs	r3, r1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c8:	4659      	mov	r1, fp
 80056ca:	00cb      	lsls	r3, r1, #3
 80056cc:	4651      	mov	r1, sl
 80056ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d2:	4651      	mov	r1, sl
 80056d4:	00ca      	lsls	r2, r1, #3
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	4642      	mov	r2, r8
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056e4:	464b      	mov	r3, r9
 80056e6:	460a      	mov	r2, r1
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005708:	4649      	mov	r1, r9
 800570a:	008b      	lsls	r3, r1, #2
 800570c:	4641      	mov	r1, r8
 800570e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005712:	4641      	mov	r1, r8
 8005714:	008a      	lsls	r2, r1, #2
 8005716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800571a:	f7fb fa4d 	bl	8000bb8 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4611      	mov	r1, r2
 8005724:	4b38      	ldr	r3, [pc, #224]	@ (8005808 <UART_SetConfig+0x4e4>)
 8005726:	fba3 2301 	umull	r2, r3, r3, r1
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2264      	movs	r2, #100	@ 0x64
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	1acb      	subs	r3, r1, r3
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	3332      	adds	r3, #50	@ 0x32
 8005738:	4a33      	ldr	r2, [pc, #204]	@ (8005808 <UART_SetConfig+0x4e4>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005744:	441c      	add	r4, r3
 8005746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800574a:	2200      	movs	r2, #0
 800574c:	673b      	str	r3, [r7, #112]	@ 0x70
 800574e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005750:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	1891      	adds	r1, r2, r2
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	415b      	adcs	r3, r3
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005764:	4641      	mov	r1, r8
 8005766:	1851      	adds	r1, r2, r1
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	4649      	mov	r1, r9
 800576c:	414b      	adcs	r3, r1
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577c:	4659      	mov	r1, fp
 800577e:	00cb      	lsls	r3, r1, #3
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005786:	4651      	mov	r1, sl
 8005788:	00ca      	lsls	r2, r1, #3
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	4603      	mov	r3, r0
 8005790:	4642      	mov	r2, r8
 8005792:	189b      	adds	r3, r3, r2
 8005794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005796:	464b      	mov	r3, r9
 8005798:	460a      	mov	r2, r1
 800579a:	eb42 0303 	adc.w	r3, r2, r3
 800579e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80057aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057b8:	4649      	mov	r1, r9
 80057ba:	008b      	lsls	r3, r1, #2
 80057bc:	4641      	mov	r1, r8
 80057be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c2:	4641      	mov	r1, r8
 80057c4:	008a      	lsls	r2, r1, #2
 80057c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057ca:	f7fb f9f5 	bl	8000bb8 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <UART_SetConfig+0x4e4>)
 80057d4:	fba3 1302 	umull	r1, r3, r3, r2
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	2164      	movs	r1, #100	@ 0x64
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	3332      	adds	r3, #50	@ 0x32
 80057e6:	4a08      	ldr	r2, [pc, #32]	@ (8005808 <UART_SetConfig+0x4e4>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4422      	add	r2, r4
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005802:	46bd      	mov	sp, r7
 8005804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005808:	51eb851f 	.word	0x51eb851f

0800580c <scd30_start_periodic_measurement>:

#define SCD30_MAX_BUFFER_WORDS 24
#define SCD30_CMD_SINGLE_WORD_BUF_LEN \
    (SENSIRION_COMMAND_SIZE + SENSIRION_WORD_SIZE + CRC8_LEN)

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure_mbar) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	80fb      	strh	r3, [r7, #6]
    if (ambient_pressure_mbar &&
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <scd30_start_periodic_measurement+0x26>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 800581c:	88fb      	ldrh	r3, [r7, #6]
    if (ambient_pressure_mbar &&
 800581e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8005822:	d303      	bcc.n	800582c <scd30_start_periodic_measurement+0x20>
        (ambient_pressure_mbar < 700 || ambient_pressure_mbar > 1400)) {
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800582a:	d902      	bls.n	8005832 <scd30_start_periodic_measurement+0x26>
        /* out of allowable range */
        return STATUS_FAIL;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	e006      	b.n	8005840 <scd30_start_periodic_measurement+0x34>
    }

    return sensirion_i2c_write_cmd_with_args(
 8005832:	2061      	movs	r0, #97	@ 0x61
 8005834:	1dba      	adds	r2, r7, #6
 8005836:	2301      	movs	r3, #1
 8005838:	2110      	movs	r1, #16
 800583a:	f000 fa30 	bl	8005c9e <sensirion_i2c_write_cmd_with_args>
 800583e:	4603      	mov	r3, r0
        SCD30_I2C_ADDRESS, SCD30_CMD_START_PERIODIC_MEASUREMENT,
        &ambient_pressure_mbar, SENSIRION_NUM_WORDS(ambient_pressure_mbar));
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <scd30_read_measurement>:
    return sensirion_i2c_write_cmd(SCD30_I2C_ADDRESS,
                                   SCD30_CMD_STOP_PERIODIC_MEASUREMENT);
}

int16_t scd30_read_measurement(float* co2_ppm, float* temperature,
                               float* humidity) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t data[3][4];

    error =
        sensirion_i2c_write_cmd(SCD30_I2C_ADDRESS, SCD30_CMD_READ_MEASUREMENT);
 8005854:	2361      	movs	r3, #97	@ 0x61
 8005856:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fa04 	bl	8005c68 <sensirion_i2c_write_cmd>
 8005860:	4603      	mov	r3, r0
 8005862:	83fb      	strh	r3, [r7, #30]
    if (error != NO_ERROR)
 8005864:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <scd30_read_measurement+0x2a>
        return error;
 800586c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005870:	e030      	b.n	80058d4 <scd30_read_measurement+0x8c>

    error = sensirion_i2c_read_words_as_bytes(SCD30_I2C_ADDRESS, &data[0][0],
 8005872:	2061      	movs	r0, #97	@ 0x61
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	2206      	movs	r2, #6
 800587a:	4619      	mov	r1, r3
 800587c:	f000 f94a 	bl	8005b14 <sensirion_i2c_read_words_as_bytes>
 8005880:	4603      	mov	r3, r0
 8005882:	83fb      	strh	r3, [r7, #30]
                                              SENSIRION_NUM_WORDS(data));
    if (error != NO_ERROR)
 8005884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <scd30_read_measurement+0x4a>
        return error;
 800588c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005890:	e020      	b.n	80058d4 <scd30_read_measurement+0x8c>

    *co2_ppm = sensirion_bytes_to_float(data[0]);
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f87c 	bl	8005994 <sensirion_bytes_to_float>
 800589c:	eef0 7a40 	vmov.f32	s15, s0
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_bytes_to_float(data[1]);
 80058a6:	f107 0310 	add.w	r3, r7, #16
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f871 	bl	8005994 <sensirion_bytes_to_float>
 80058b2:	eef0 7a40 	vmov.f32	s15, s0
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_bytes_to_float(data[2]);
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	3308      	adds	r3, #8
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f866 	bl	8005994 <sensirion_bytes_to_float>
 80058c8:	eef0 7a40 	vmov.f32	s15, s0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	edc3 7a00 	vstr	s15, [r3]

    return NO_ERROR;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval_sec) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	80fb      	strh	r3, [r7, #6]
    int16_t error;

    if (interval_sec < 2 || interval_sec > 1800) {
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d903      	bls.n	80058f4 <scd30_set_measurement_interval+0x18>
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80058f2:	d902      	bls.n	80058fa <scd30_set_measurement_interval+0x1e>
        /* out of allowable range */
        return STATUS_FAIL;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	e00e      	b.n	8005918 <scd30_set_measurement_interval+0x3c>
    }

    error = sensirion_i2c_write_cmd_with_args(
 80058fa:	2061      	movs	r0, #97	@ 0x61
 80058fc:	1dba      	adds	r2, r7, #6
 80058fe:	2301      	movs	r3, #1
 8005900:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 8005904:	f000 f9cb 	bl	8005c9e <sensirion_i2c_write_cmd_with_args>
 8005908:	4603      	mov	r3, r0
 800590a:	81fb      	strh	r3, [r7, #14]
        SCD30_I2C_ADDRESS, SCD30_CMD_SET_MEASUREMENT_INTERVAL, &interval_sec,
        SENSIRION_NUM_WORDS(interval_sec));
    sensirion_sleep_usec(SCD30_WRITE_DELAY_US);
 800590c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8005910:	f000 fa8c 	bl	8005e2c <sensirion_sleep_usec>

    return error;
 8005914:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <scd30_get_data_ready>:

int16_t scd30_get_data_ready(uint16_t* data_ready) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
    return sensirion_i2c_delayed_read_cmd(
 8005928:	2061      	movs	r0, #97	@ 0x61
 800592a:	2301      	movs	r3, #1
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005934:	f240 2102 	movw	r1, #514	@ 0x202
 8005938:	f000 f9d2 	bl	8005ce0 <sensirion_i2c_delayed_read_cmd>
 800593c:	4603      	mov	r3, r0
        SCD30_I2C_ADDRESS, SCD30_CMD_GET_DATA_READY, 3000, data_ready,
        SENSIRION_NUM_WORDS(*data_ready));
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <scd30_probe>:

uint8_t scd30_get_configured_address() {
    return SCD30_I2C_ADDRESS;
}

int16_t scd30_probe() {
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
    uint16_t data_ready;

    /* try to read data-ready state */
    return scd30_get_data_ready(&data_ready);
 800594c:	1dbb      	adds	r3, r7, #6
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff ffe6 	bl	8005920 <scd30_get_data_ready>
 8005954:	4603      	mov	r3, r0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <sensirion_bytes_to_uint32_t>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	061a      	lsls	r2, r3, #24
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3301      	adds	r3, #1
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3302      	adds	r3, #2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800597e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	3203      	adds	r2, #3
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	4313      	orrs	r3, r2
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <sensirion_bytes_to_float>:

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ffde 	bl	800595e <sensirion_bytes_to_uint32_t>
 80059a2:	4603      	mov	r3, r0
 80059a4:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	ee07 3a90 	vmov	s15, r3
}
 80059ac:	eeb0 0a67 	vmov.f32	s0, s15
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <sensirion_common_generate_crc>:

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80059c2:	23ff      	movs	r3, #255	@ 0xff
 80059c4:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80059c6:	2300      	movs	r3, #0
 80059c8:	81fb      	strh	r3, [r7, #14]
 80059ca:	e021      	b.n	8005a10 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	7b7b      	ldrb	r3, [r7, #13]
 80059d6:	4053      	eors	r3, r2
 80059d8:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80059da:	2308      	movs	r3, #8
 80059dc:	733b      	strb	r3, [r7, #12]
 80059de:	e011      	b.n	8005a04 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80059e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da07      	bge.n	80059f8 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80059e8:	7b7b      	ldrb	r3, [r7, #13]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	737b      	strb	r3, [r7, #13]
 80059f6:	e002      	b.n	80059fe <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80059f8:	7b7b      	ldrb	r3, [r7, #13]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80059fe:	7b3b      	ldrb	r3, [r7, #12]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	733b      	strb	r3, [r7, #12]
 8005a04:	7b3b      	ldrb	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ea      	bne.n	80059e0 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	81fb      	strh	r3, [r7, #14]
 8005a10:	89fa      	ldrh	r2, [r7, #14]
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d3d9      	bcc.n	80059cc <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8005a18:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	807b      	strh	r3, [r7, #2]
 8005a32:	4613      	mov	r3, r2
 8005a34:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8005a36:	887b      	ldrh	r3, [r7, #2]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff ffbb 	bl	80059b6 <sensirion_common_generate_crc>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	787b      	ldrb	r3, [r7, #1]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d002      	beq.n	8005a50 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	e000      	b.n	8005a52 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	461a      	mov	r2, r3
 8005a66:	460b      	mov	r3, r1
 8005a68:	817b      	strh	r3, [r7, #10]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	8abb      	ldrh	r3, [r7, #20]
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	82b9      	strh	r1, [r7, #20]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	440b      	add	r3, r1
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8005a88:	8abb      	ldrh	r3, [r7, #20]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	82ba      	strh	r2, [r7, #20]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	897a      	ldrh	r2, [r7, #10]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
 8005a9e:	e030      	b.n	8005b02 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	8abb      	ldrh	r3, [r7, #20]
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	82b9      	strh	r1, [r7, #20]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	440b      	add	r3, r1
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	8abb      	ldrh	r3, [r7, #20]
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	82b9      	strh	r1, [r7, #20]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	440b      	add	r3, r1
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8005ad8:	8abb      	ldrh	r3, [r7, #20]
 8005ada:	3b02      	subs	r3, #2
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ff67 	bl	80059b6 <sensirion_common_generate_crc>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8005aec:	8abb      	ldrh	r3, [r7, #20]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	82ba      	strh	r2, [r7, #20]
 8005af2:	461a      	mov	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	7cfa      	ldrb	r2, [r7, #19]
 8005afa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	3301      	adds	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
 8005b02:	7dfa      	ldrb	r2, [r7, #23]
 8005b04:	7a7b      	ldrb	r3, [r7, #9]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3ca      	bcc.n	8005aa0 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8005b0a:	8abb      	ldrh	r3, [r7, #20]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b096      	sub	sp, #88	@ 0x58
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
 8005b20:	4613      	mov	r3, r2
 8005b22:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8005b24:	88bb      	ldrh	r3, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	0052      	lsls	r2, r2, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8005b36:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f93c 	bl	8005dbc <sensirion_i2c_read>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if (ret != NO_ERROR)
 8005b4a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8005b52:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005b56:	e047      	b.n	8005be8 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8005b64:	e039      	b.n	8005bda <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8005b66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b6c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8005b6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b72:	3302      	adds	r3, #2
 8005b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b76:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	f7ff ff52 	bl	8005a26 <sensirion_common_check_crc>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (ret != NO_ERROR)
 8005b88:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8005b90:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005b94:	e028      	b.n	8005be8 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 8005b96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b9c:	441a      	add	r2, r3
 8005b9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8005ba8:	4619      	mov	r1, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	440b      	add	r3, r1
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8005bb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bba:	441a      	add	r2, r3
 8005bbc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	f8a7 1054 	strh.w	r1, [r7, #84]	@ 0x54
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	440b      	add	r3, r1
 8005bcc:	7812      	ldrb	r2, [r2, #0]
 8005bce:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8005bd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005bda:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8005bde:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3bf      	bcc.n	8005b66 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3758      	adds	r7, #88	@ 0x58
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	6039      	str	r1, [r7, #0]
 8005bfa:	71fb      	strb	r3, [r7, #7]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 8005c00:	88ba      	ldrh	r2, [r7, #4]
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ff84 	bl	8005b14 <sensirion_i2c_read_words_as_bytes>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 8005c10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <sensirion_i2c_read_words+0x2e>
        return ret;
 8005c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c1c:	e020      	b.n	8005c60 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
 8005c22:	e017      	b.n	8005c54 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	b21a      	sxth	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b21b      	sxth	r3, r3
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	b219      	sxth	r1, r3
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	4413      	add	r3, r2
 8005c4a:	b28a      	uxth	r2, r1
 8005c4c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	3301      	adds	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	88ba      	ldrh	r2, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d8e2      	bhi.n	8005c24 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	460a      	mov	r2, r1
 8005c72:	71fb      	strb	r3, [r7, #7]
 8005c74:	4613      	mov	r3, r2
 8005c76:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8005c78:	88b9      	ldrh	r1, [r7, #4]
 8005c7a:	f107 000c 	add.w	r0, r7, #12
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2200      	movs	r2, #0
 8005c82:	f7ff feea 	bl	8005a5a <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8005c86:	f107 010c 	add.w	r1, r7, #12
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f8b0 	bl	8005df4 <sensirion_i2c_write>
 8005c94:	4603      	mov	r3, r0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b08e      	sub	sp, #56	@ 0x38
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60ba      	str	r2, [r7, #8]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	460b      	mov	r3, r1
 8005cae:	81bb      	strh	r3, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	89b9      	ldrh	r1, [r7, #12]
 8005cba:	f107 0014 	add.w	r0, r7, #20
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	f7ff fecb 	bl	8005a5a <sensirion_fill_cmd_send_buf>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 8005cc8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005cca:	f107 0114 	add.w	r1, r7, #20
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f88f 	bl	8005df4 <sensirion_i2c_write>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3738      	adds	r7, #56	@ 0x38
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60ba      	str	r2, [r7, #8]
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8005cf2:	89b9      	ldrh	r1, [r7, #12]
 8005cf4:	f107 0014 	add.w	r0, r7, #20
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f7ff fead 	bl	8005a5a <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8005d00:	f107 0114 	add.w	r1, r7, #20
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2202      	movs	r2, #2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f873 	bl	8005df4 <sensirion_i2c_write>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 8005d12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 8005d1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d1e:	e00c      	b.n	8005d3a <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	f000 f880 	bl	8005e2c <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8005d2c:	8c3a      	ldrh	r2, [r7, #32]
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff ff5c 	bl	8005bf0 <sensirion_i2c_read_words>
 8005d38:	4603      	mov	r3, r0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8005d4a:	4b18      	ldr	r3, [pc, #96]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d4c:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <sensirion_i2c_init+0x6c>)
 8005d4e:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8005d50:	4b16      	ldr	r3, [pc, #88]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d52:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <sensirion_i2c_init+0x70>)
 8005d54:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d56:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d62:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005d68:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8005d70:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
//    __HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <sensirion_i2c_init+0x74>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005db8 <sensirion_i2c_init+0x74>)
 8005d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <sensirion_i2c_init+0x74>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
    HAL_I2C_Init(&hi2c1);
 8005d9e:	4803      	ldr	r0, [pc, #12]	@ (8005dac <sensirion_i2c_init+0x68>)
 8005da0:	f7fc f9d2 	bl	8002148 <HAL_I2C_Init>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200003bc 	.word	0x200003bc
 8005db0:	40005400 	.word	0x40005400
 8005db4:	000186a0 	.word	0x000186a0
 8005db8:	40023800 	.word	0x40023800

08005dbc <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	88bb      	ldrh	r3, [r7, #4]
 8005dd6:	2264      	movs	r2, #100	@ 0x64
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4804      	ldr	r0, [pc, #16]	@ (8005df0 <sensirion_i2c_read+0x34>)
 8005dde:	f7fc fbf5 	bl	80025cc <HAL_I2C_Master_Receive>
 8005de2:	4603      	mov	r3, r0
 8005de4:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200003bc 	.word	0x200003bc

08005df4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
 8005e00:	4613      	mov	r3, r2
 8005e02:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	b299      	uxth	r1, r3
 8005e0c:	88bb      	ldrh	r3, [r7, #4]
 8005e0e:	2264      	movs	r2, #100	@ 0x64
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4804      	ldr	r0, [pc, #16]	@ (8005e28 <sensirion_i2c_write+0x34>)
 8005e16:	f7fc fadb 	bl	80023d0 <HAL_I2C_Master_Transmit>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200003bc 	.word	0x200003bc

08005e2c <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a12      	ldr	r2, [pc, #72]	@ (8005e80 <sensirion_sleep_usec+0x54>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <sensirion_sleep_usec+0x54>)
 8005e44:	fba3 1302 	umull	r1, r3, r3, r2
 8005e48:	099b      	lsrs	r3, r3, #6
 8005e4a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <sensirion_sleep_usec+0x32>
        msec++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8005e5e:	f7fb fe27 	bl	8001ab0 <HAL_GetHalVersion>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4a07      	ldr	r2, [pc, #28]	@ (8005e84 <sensirion_sleep_usec+0x58>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d202      	bcs.n	8005e70 <sensirion_sleep_usec+0x44>
        msec++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fb fdf9 	bl	8001a68 <HAL_Delay>
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	10624dd3 	.word	0x10624dd3
 8005e84:	01010100 	.word	0x01010100

08005e88 <_strtol_l.constprop.0>:
 8005e88:	2b24      	cmp	r3, #36	@ 0x24
 8005e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8e:	4686      	mov	lr, r0
 8005e90:	4690      	mov	r8, r2
 8005e92:	d801      	bhi.n	8005e98 <_strtol_l.constprop.0+0x10>
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <_strtol_l.constprop.0+0x1e>
 8005e98:	f000 fe4a 	bl	8006b30 <__errno>
 8005e9c:	2316      	movs	r3, #22
 8005e9e:	6003      	str	r3, [r0, #0]
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea6:	4834      	ldr	r0, [pc, #208]	@ (8005f78 <_strtol_l.constprop.0+0xf0>)
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	462a      	mov	r2, r5
 8005eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eb0:	5d06      	ldrb	r6, [r0, r4]
 8005eb2:	f016 0608 	ands.w	r6, r6, #8
 8005eb6:	d1f8      	bne.n	8005eaa <_strtol_l.constprop.0+0x22>
 8005eb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8005eba:	d12d      	bne.n	8005f18 <_strtol_l.constprop.0+0x90>
 8005ebc:	782c      	ldrb	r4, [r5, #0]
 8005ebe:	2601      	movs	r6, #1
 8005ec0:	1c95      	adds	r5, r2, #2
 8005ec2:	f033 0210 	bics.w	r2, r3, #16
 8005ec6:	d109      	bne.n	8005edc <_strtol_l.constprop.0+0x54>
 8005ec8:	2c30      	cmp	r4, #48	@ 0x30
 8005eca:	d12a      	bne.n	8005f22 <_strtol_l.constprop.0+0x9a>
 8005ecc:	782a      	ldrb	r2, [r5, #0]
 8005ece:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ed2:	2a58      	cmp	r2, #88	@ 0x58
 8005ed4:	d125      	bne.n	8005f22 <_strtol_l.constprop.0+0x9a>
 8005ed6:	786c      	ldrb	r4, [r5, #1]
 8005ed8:	2310      	movs	r3, #16
 8005eda:	3502      	adds	r5, #2
 8005edc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	fbbc f9f3 	udiv	r9, ip, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ef0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ef4:	2f09      	cmp	r7, #9
 8005ef6:	d81b      	bhi.n	8005f30 <_strtol_l.constprop.0+0xa8>
 8005ef8:	463c      	mov	r4, r7
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	dd27      	ble.n	8005f4e <_strtol_l.constprop.0+0xc6>
 8005efe:	1c57      	adds	r7, r2, #1
 8005f00:	d007      	beq.n	8005f12 <_strtol_l.constprop.0+0x8a>
 8005f02:	4581      	cmp	r9, r0
 8005f04:	d320      	bcc.n	8005f48 <_strtol_l.constprop.0+0xc0>
 8005f06:	d101      	bne.n	8005f0c <_strtol_l.constprop.0+0x84>
 8005f08:	45a2      	cmp	sl, r4
 8005f0a:	db1d      	blt.n	8005f48 <_strtol_l.constprop.0+0xc0>
 8005f0c:	fb00 4003 	mla	r0, r0, r3, r4
 8005f10:	2201      	movs	r2, #1
 8005f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f16:	e7eb      	b.n	8005ef0 <_strtol_l.constprop.0+0x68>
 8005f18:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f1a:	bf04      	itt	eq
 8005f1c:	782c      	ldrbeq	r4, [r5, #0]
 8005f1e:	1c95      	addeq	r5, r2, #2
 8005f20:	e7cf      	b.n	8005ec2 <_strtol_l.constprop.0+0x3a>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1da      	bne.n	8005edc <_strtol_l.constprop.0+0x54>
 8005f26:	2c30      	cmp	r4, #48	@ 0x30
 8005f28:	bf0c      	ite	eq
 8005f2a:	2308      	moveq	r3, #8
 8005f2c:	230a      	movne	r3, #10
 8005f2e:	e7d5      	b.n	8005edc <_strtol_l.constprop.0+0x54>
 8005f30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005f34:	2f19      	cmp	r7, #25
 8005f36:	d801      	bhi.n	8005f3c <_strtol_l.constprop.0+0xb4>
 8005f38:	3c37      	subs	r4, #55	@ 0x37
 8005f3a:	e7de      	b.n	8005efa <_strtol_l.constprop.0+0x72>
 8005f3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005f40:	2f19      	cmp	r7, #25
 8005f42:	d804      	bhi.n	8005f4e <_strtol_l.constprop.0+0xc6>
 8005f44:	3c57      	subs	r4, #87	@ 0x57
 8005f46:	e7d8      	b.n	8005efa <_strtol_l.constprop.0+0x72>
 8005f48:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4c:	e7e1      	b.n	8005f12 <_strtol_l.constprop.0+0x8a>
 8005f4e:	1c53      	adds	r3, r2, #1
 8005f50:	d108      	bne.n	8005f64 <_strtol_l.constprop.0+0xdc>
 8005f52:	2322      	movs	r3, #34	@ 0x22
 8005f54:	f8ce 3000 	str.w	r3, [lr]
 8005f58:	4660      	mov	r0, ip
 8005f5a:	f1b8 0f00 	cmp.w	r8, #0
 8005f5e:	d0a0      	beq.n	8005ea2 <_strtol_l.constprop.0+0x1a>
 8005f60:	1e69      	subs	r1, r5, #1
 8005f62:	e006      	b.n	8005f72 <_strtol_l.constprop.0+0xea>
 8005f64:	b106      	cbz	r6, 8005f68 <_strtol_l.constprop.0+0xe0>
 8005f66:	4240      	negs	r0, r0
 8005f68:	f1b8 0f00 	cmp.w	r8, #0
 8005f6c:	d099      	beq.n	8005ea2 <_strtol_l.constprop.0+0x1a>
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d1f6      	bne.n	8005f60 <_strtol_l.constprop.0+0xd8>
 8005f72:	f8c8 1000 	str.w	r1, [r8]
 8005f76:	e794      	b.n	8005ea2 <_strtol_l.constprop.0+0x1a>
 8005f78:	08008d65 	.word	0x08008d65

08005f7c <strtol>:
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	460a      	mov	r2, r1
 8005f80:	4601      	mov	r1, r0
 8005f82:	4802      	ldr	r0, [pc, #8]	@ (8005f8c <strtol+0x10>)
 8005f84:	6800      	ldr	r0, [r0, #0]
 8005f86:	f7ff bf7f 	b.w	8005e88 <_strtol_l.constprop.0>
 8005f8a:	bf00      	nop
 8005f8c:	2000001c 	.word	0x2000001c

08005f90 <__cvt>:
 8005f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	ec57 6b10 	vmov	r6, r7, d0
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	bfbb      	ittet	lt
 8005fa2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fa6:	461f      	movlt	r7, r3
 8005fa8:	2300      	movge	r3, #0
 8005faa:	232d      	movlt	r3, #45	@ 0x2d
 8005fac:	700b      	strb	r3, [r1, #0]
 8005fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fb0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fb4:	4691      	mov	r9, r2
 8005fb6:	f023 0820 	bic.w	r8, r3, #32
 8005fba:	bfbc      	itt	lt
 8005fbc:	4632      	movlt	r2, r6
 8005fbe:	4616      	movlt	r6, r2
 8005fc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fc4:	d005      	beq.n	8005fd2 <__cvt+0x42>
 8005fc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fca:	d100      	bne.n	8005fce <__cvt+0x3e>
 8005fcc:	3401      	adds	r4, #1
 8005fce:	2102      	movs	r1, #2
 8005fd0:	e000      	b.n	8005fd4 <__cvt+0x44>
 8005fd2:	2103      	movs	r1, #3
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	ab02      	add	r3, sp, #8
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	ec47 6b10 	vmov	d0, r6, r7
 8005fe0:	4653      	mov	r3, sl
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	f000 fe5c 	bl	8006ca0 <_dtoa_r>
 8005fe8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fec:	4605      	mov	r5, r0
 8005fee:	d119      	bne.n	8006024 <__cvt+0x94>
 8005ff0:	f019 0f01 	tst.w	r9, #1
 8005ff4:	d00e      	beq.n	8006014 <__cvt+0x84>
 8005ff6:	eb00 0904 	add.w	r9, r0, r4
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006006:	b108      	cbz	r0, 800600c <__cvt+0x7c>
 8006008:	f8cd 900c 	str.w	r9, [sp, #12]
 800600c:	2230      	movs	r2, #48	@ 0x30
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	454b      	cmp	r3, r9
 8006012:	d31e      	bcc.n	8006052 <__cvt+0xc2>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006018:	1b5b      	subs	r3, r3, r5
 800601a:	4628      	mov	r0, r5
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	b004      	add	sp, #16
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006028:	eb00 0904 	add.w	r9, r0, r4
 800602c:	d1e5      	bne.n	8005ffa <__cvt+0x6a>
 800602e:	7803      	ldrb	r3, [r0, #0]
 8006030:	2b30      	cmp	r3, #48	@ 0x30
 8006032:	d10a      	bne.n	800604a <__cvt+0xba>
 8006034:	2200      	movs	r2, #0
 8006036:	2300      	movs	r3, #0
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006040:	b918      	cbnz	r0, 800604a <__cvt+0xba>
 8006042:	f1c4 0401 	rsb	r4, r4, #1
 8006046:	f8ca 4000 	str.w	r4, [sl]
 800604a:	f8da 3000 	ldr.w	r3, [sl]
 800604e:	4499      	add	r9, r3
 8006050:	e7d3      	b.n	8005ffa <__cvt+0x6a>
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	9103      	str	r1, [sp, #12]
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e7d9      	b.n	800600e <__cvt+0x7e>

0800605a <__exponent>:
 800605a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800605c:	2900      	cmp	r1, #0
 800605e:	bfba      	itte	lt
 8006060:	4249      	neglt	r1, r1
 8006062:	232d      	movlt	r3, #45	@ 0x2d
 8006064:	232b      	movge	r3, #43	@ 0x2b
 8006066:	2909      	cmp	r1, #9
 8006068:	7002      	strb	r2, [r0, #0]
 800606a:	7043      	strb	r3, [r0, #1]
 800606c:	dd29      	ble.n	80060c2 <__exponent+0x68>
 800606e:	f10d 0307 	add.w	r3, sp, #7
 8006072:	461d      	mov	r5, r3
 8006074:	270a      	movs	r7, #10
 8006076:	461a      	mov	r2, r3
 8006078:	fbb1 f6f7 	udiv	r6, r1, r7
 800607c:	fb07 1416 	mls	r4, r7, r6, r1
 8006080:	3430      	adds	r4, #48	@ 0x30
 8006082:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006086:	460c      	mov	r4, r1
 8006088:	2c63      	cmp	r4, #99	@ 0x63
 800608a:	f103 33ff 	add.w	r3, r3, #4294967295
 800608e:	4631      	mov	r1, r6
 8006090:	dcf1      	bgt.n	8006076 <__exponent+0x1c>
 8006092:	3130      	adds	r1, #48	@ 0x30
 8006094:	1e94      	subs	r4, r2, #2
 8006096:	f803 1c01 	strb.w	r1, [r3, #-1]
 800609a:	1c41      	adds	r1, r0, #1
 800609c:	4623      	mov	r3, r4
 800609e:	42ab      	cmp	r3, r5
 80060a0:	d30a      	bcc.n	80060b8 <__exponent+0x5e>
 80060a2:	f10d 0309 	add.w	r3, sp, #9
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	42ac      	cmp	r4, r5
 80060aa:	bf88      	it	hi
 80060ac:	2300      	movhi	r3, #0
 80060ae:	3302      	adds	r3, #2
 80060b0:	4403      	add	r3, r0
 80060b2:	1a18      	subs	r0, r3, r0
 80060b4:	b003      	add	sp, #12
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060c0:	e7ed      	b.n	800609e <__exponent+0x44>
 80060c2:	2330      	movs	r3, #48	@ 0x30
 80060c4:	3130      	adds	r1, #48	@ 0x30
 80060c6:	7083      	strb	r3, [r0, #2]
 80060c8:	70c1      	strb	r1, [r0, #3]
 80060ca:	1d03      	adds	r3, r0, #4
 80060cc:	e7f1      	b.n	80060b2 <__exponent+0x58>
	...

080060d0 <_printf_float>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	b08d      	sub	sp, #52	@ 0x34
 80060d6:	460c      	mov	r4, r1
 80060d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060dc:	4616      	mov	r6, r2
 80060de:	461f      	mov	r7, r3
 80060e0:	4605      	mov	r5, r0
 80060e2:	f000 fcdb 	bl	8006a9c <_localeconv_r>
 80060e6:	6803      	ldr	r3, [r0, #0]
 80060e8:	9304      	str	r3, [sp, #16]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa f8c8 	bl	8000280 <strlen>
 80060f0:	2300      	movs	r3, #0
 80060f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f4:	f8d8 3000 	ldr.w	r3, [r8]
 80060f8:	9005      	str	r0, [sp, #20]
 80060fa:	3307      	adds	r3, #7
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	f103 0208 	add.w	r2, r3, #8
 8006104:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006108:	f8d4 b000 	ldr.w	fp, [r4]
 800610c:	f8c8 2000 	str.w	r2, [r8]
 8006110:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006114:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	f8cd 8018 	str.w	r8, [sp, #24]
 800611e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006126:	4b9c      	ldr	r3, [pc, #624]	@ (8006398 <_printf_float+0x2c8>)
 8006128:	f04f 32ff 	mov.w	r2, #4294967295
 800612c:	f7fa fd06 	bl	8000b3c <__aeabi_dcmpun>
 8006130:	bb70      	cbnz	r0, 8006190 <_printf_float+0xc0>
 8006132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006136:	4b98      	ldr	r3, [pc, #608]	@ (8006398 <_printf_float+0x2c8>)
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	f7fa fce0 	bl	8000b00 <__aeabi_dcmple>
 8006140:	bb30      	cbnz	r0, 8006190 <_printf_float+0xc0>
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f7fa fccf 	bl	8000aec <__aeabi_dcmplt>
 800614e:	b110      	cbz	r0, 8006156 <_printf_float+0x86>
 8006150:	232d      	movs	r3, #45	@ 0x2d
 8006152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006156:	4a91      	ldr	r2, [pc, #580]	@ (800639c <_printf_float+0x2cc>)
 8006158:	4b91      	ldr	r3, [pc, #580]	@ (80063a0 <_printf_float+0x2d0>)
 800615a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800615e:	bf94      	ite	ls
 8006160:	4690      	movls	r8, r2
 8006162:	4698      	movhi	r8, r3
 8006164:	2303      	movs	r3, #3
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	f02b 0304 	bic.w	r3, fp, #4
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	9700      	str	r7, [sp, #0]
 8006174:	4633      	mov	r3, r6
 8006176:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006178:	4621      	mov	r1, r4
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f9d2 	bl	8006524 <_printf_common>
 8006180:	3001      	adds	r0, #1
 8006182:	f040 808d 	bne.w	80062a0 <_printf_float+0x1d0>
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	b00d      	add	sp, #52	@ 0x34
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	f7fa fcd0 	bl	8000b3c <__aeabi_dcmpun>
 800619c:	b140      	cbz	r0, 80061b0 <_printf_float+0xe0>
 800619e:	464b      	mov	r3, r9
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bfbc      	itt	lt
 80061a4:	232d      	movlt	r3, #45	@ 0x2d
 80061a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061aa:	4a7e      	ldr	r2, [pc, #504]	@ (80063a4 <_printf_float+0x2d4>)
 80061ac:	4b7e      	ldr	r3, [pc, #504]	@ (80063a8 <_printf_float+0x2d8>)
 80061ae:	e7d4      	b.n	800615a <_printf_float+0x8a>
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061b6:	9206      	str	r2, [sp, #24]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	d13b      	bne.n	8006234 <_printf_float+0x164>
 80061bc:	2306      	movs	r3, #6
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061c4:	2300      	movs	r3, #0
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80061cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061d0:	ab09      	add	r3, sp, #36	@ 0x24
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	6861      	ldr	r1, [r4, #4]
 80061d6:	ec49 8b10 	vmov	d0, r8, r9
 80061da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061de:	4628      	mov	r0, r5
 80061e0:	f7ff fed6 	bl	8005f90 <__cvt>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061e8:	2b47      	cmp	r3, #71	@ 0x47
 80061ea:	4680      	mov	r8, r0
 80061ec:	d129      	bne.n	8006242 <_printf_float+0x172>
 80061ee:	1cc8      	adds	r0, r1, #3
 80061f0:	db02      	blt.n	80061f8 <_printf_float+0x128>
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	4299      	cmp	r1, r3
 80061f6:	dd41      	ble.n	800627c <_printf_float+0x1ac>
 80061f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80061fc:	fa5f fa8a 	uxtb.w	sl, sl
 8006200:	3901      	subs	r1, #1
 8006202:	4652      	mov	r2, sl
 8006204:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006208:	9109      	str	r1, [sp, #36]	@ 0x24
 800620a:	f7ff ff26 	bl	800605a <__exponent>
 800620e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006210:	1813      	adds	r3, r2, r0
 8006212:	2a01      	cmp	r2, #1
 8006214:	4681      	mov	r9, r0
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	dc02      	bgt.n	8006220 <_printf_float+0x150>
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	07d2      	lsls	r2, r2, #31
 800621e:	d501      	bpl.n	8006224 <_printf_float+0x154>
 8006220:	3301      	adds	r3, #1
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0a2      	beq.n	8006172 <_printf_float+0xa2>
 800622c:	232d      	movs	r3, #45	@ 0x2d
 800622e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006232:	e79e      	b.n	8006172 <_printf_float+0xa2>
 8006234:	9a06      	ldr	r2, [sp, #24]
 8006236:	2a47      	cmp	r2, #71	@ 0x47
 8006238:	d1c2      	bne.n	80061c0 <_printf_float+0xf0>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1c0      	bne.n	80061c0 <_printf_float+0xf0>
 800623e:	2301      	movs	r3, #1
 8006240:	e7bd      	b.n	80061be <_printf_float+0xee>
 8006242:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006246:	d9db      	bls.n	8006200 <_printf_float+0x130>
 8006248:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800624c:	d118      	bne.n	8006280 <_printf_float+0x1b0>
 800624e:	2900      	cmp	r1, #0
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	dd0b      	ble.n	800626c <_printf_float+0x19c>
 8006254:	6121      	str	r1, [r4, #16]
 8006256:	b913      	cbnz	r3, 800625e <_printf_float+0x18e>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	07d0      	lsls	r0, r2, #31
 800625c:	d502      	bpl.n	8006264 <_printf_float+0x194>
 800625e:	3301      	adds	r3, #1
 8006260:	440b      	add	r3, r1
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	e7db      	b.n	8006224 <_printf_float+0x154>
 800626c:	b913      	cbnz	r3, 8006274 <_printf_float+0x1a4>
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	07d2      	lsls	r2, r2, #31
 8006272:	d501      	bpl.n	8006278 <_printf_float+0x1a8>
 8006274:	3302      	adds	r3, #2
 8006276:	e7f4      	b.n	8006262 <_printf_float+0x192>
 8006278:	2301      	movs	r3, #1
 800627a:	e7f2      	b.n	8006262 <_printf_float+0x192>
 800627c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006282:	4299      	cmp	r1, r3
 8006284:	db05      	blt.n	8006292 <_printf_float+0x1c2>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	6121      	str	r1, [r4, #16]
 800628a:	07d8      	lsls	r0, r3, #31
 800628c:	d5ea      	bpl.n	8006264 <_printf_float+0x194>
 800628e:	1c4b      	adds	r3, r1, #1
 8006290:	e7e7      	b.n	8006262 <_printf_float+0x192>
 8006292:	2900      	cmp	r1, #0
 8006294:	bfd4      	ite	le
 8006296:	f1c1 0202 	rsble	r2, r1, #2
 800629a:	2201      	movgt	r2, #1
 800629c:	4413      	add	r3, r2
 800629e:	e7e0      	b.n	8006262 <_printf_float+0x192>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	055a      	lsls	r2, r3, #21
 80062a4:	d407      	bmi.n	80062b6 <_printf_float+0x1e6>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	4642      	mov	r2, r8
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	d12b      	bne.n	800630c <_printf_float+0x23c>
 80062b4:	e767      	b.n	8006186 <_printf_float+0xb6>
 80062b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062ba:	f240 80dd 	bls.w	8006478 <_printf_float+0x3a8>
 80062be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062c2:	2200      	movs	r2, #0
 80062c4:	2300      	movs	r3, #0
 80062c6:	f7fa fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d033      	beq.n	8006336 <_printf_float+0x266>
 80062ce:	4a37      	ldr	r2, [pc, #220]	@ (80063ac <_printf_float+0x2dc>)
 80062d0:	2301      	movs	r3, #1
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f af54 	beq.w	8006186 <_printf_float+0xb6>
 80062de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062e2:	4543      	cmp	r3, r8
 80062e4:	db02      	blt.n	80062ec <_printf_float+0x21c>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	07d8      	lsls	r0, r3, #31
 80062ea:	d50f      	bpl.n	800630c <_printf_float+0x23c>
 80062ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f af45 	beq.w	8006186 <_printf_float+0xb6>
 80062fc:	f04f 0900 	mov.w	r9, #0
 8006300:	f108 38ff 	add.w	r8, r8, #4294967295
 8006304:	f104 0a1a 	add.w	sl, r4, #26
 8006308:	45c8      	cmp	r8, r9
 800630a:	dc09      	bgt.n	8006320 <_printf_float+0x250>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	f100 8103 	bmi.w	800651a <_printf_float+0x44a>
 8006314:	68e0      	ldr	r0, [r4, #12]
 8006316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006318:	4298      	cmp	r0, r3
 800631a:	bfb8      	it	lt
 800631c:	4618      	movlt	r0, r3
 800631e:	e734      	b.n	800618a <_printf_float+0xba>
 8006320:	2301      	movs	r3, #1
 8006322:	4652      	mov	r2, sl
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	f43f af2b 	beq.w	8006186 <_printf_float+0xb6>
 8006330:	f109 0901 	add.w	r9, r9, #1
 8006334:	e7e8      	b.n	8006308 <_printf_float+0x238>
 8006336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc39      	bgt.n	80063b0 <_printf_float+0x2e0>
 800633c:	4a1b      	ldr	r2, [pc, #108]	@ (80063ac <_printf_float+0x2dc>)
 800633e:	2301      	movs	r3, #1
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f af1d 	beq.w	8006186 <_printf_float+0xb6>
 800634c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006350:	ea59 0303 	orrs.w	r3, r9, r3
 8006354:	d102      	bne.n	800635c <_printf_float+0x28c>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	07d9      	lsls	r1, r3, #31
 800635a:	d5d7      	bpl.n	800630c <_printf_float+0x23c>
 800635c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f af0d 	beq.w	8006186 <_printf_float+0xb6>
 800636c:	f04f 0a00 	mov.w	sl, #0
 8006370:	f104 0b1a 	add.w	fp, r4, #26
 8006374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006376:	425b      	negs	r3, r3
 8006378:	4553      	cmp	r3, sl
 800637a:	dc01      	bgt.n	8006380 <_printf_float+0x2b0>
 800637c:	464b      	mov	r3, r9
 800637e:	e793      	b.n	80062a8 <_printf_float+0x1d8>
 8006380:	2301      	movs	r3, #1
 8006382:	465a      	mov	r2, fp
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f aefb 	beq.w	8006186 <_printf_float+0xb6>
 8006390:	f10a 0a01 	add.w	sl, sl, #1
 8006394:	e7ee      	b.n	8006374 <_printf_float+0x2a4>
 8006396:	bf00      	nop
 8006398:	7fefffff 	.word	0x7fefffff
 800639c:	08008e65 	.word	0x08008e65
 80063a0:	08008e69 	.word	0x08008e69
 80063a4:	08008e6d 	.word	0x08008e6d
 80063a8:	08008e71 	.word	0x08008e71
 80063ac:	08008e75 	.word	0x08008e75
 80063b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063b6:	4553      	cmp	r3, sl
 80063b8:	bfa8      	it	ge
 80063ba:	4653      	movge	r3, sl
 80063bc:	2b00      	cmp	r3, #0
 80063be:	4699      	mov	r9, r3
 80063c0:	dc36      	bgt.n	8006430 <_printf_float+0x360>
 80063c2:	f04f 0b00 	mov.w	fp, #0
 80063c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ca:	f104 021a 	add.w	r2, r4, #26
 80063ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063d0:	9306      	str	r3, [sp, #24]
 80063d2:	eba3 0309 	sub.w	r3, r3, r9
 80063d6:	455b      	cmp	r3, fp
 80063d8:	dc31      	bgt.n	800643e <_printf_float+0x36e>
 80063da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063dc:	459a      	cmp	sl, r3
 80063de:	dc3a      	bgt.n	8006456 <_printf_float+0x386>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	07da      	lsls	r2, r3, #31
 80063e4:	d437      	bmi.n	8006456 <_printf_float+0x386>
 80063e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e8:	ebaa 0903 	sub.w	r9, sl, r3
 80063ec:	9b06      	ldr	r3, [sp, #24]
 80063ee:	ebaa 0303 	sub.w	r3, sl, r3
 80063f2:	4599      	cmp	r9, r3
 80063f4:	bfa8      	it	ge
 80063f6:	4699      	movge	r9, r3
 80063f8:	f1b9 0f00 	cmp.w	r9, #0
 80063fc:	dc33      	bgt.n	8006466 <_printf_float+0x396>
 80063fe:	f04f 0800 	mov.w	r8, #0
 8006402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006406:	f104 0b1a 	add.w	fp, r4, #26
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	ebaa 0303 	sub.w	r3, sl, r3
 8006410:	eba3 0309 	sub.w	r3, r3, r9
 8006414:	4543      	cmp	r3, r8
 8006416:	f77f af79 	ble.w	800630c <_printf_float+0x23c>
 800641a:	2301      	movs	r3, #1
 800641c:	465a      	mov	r2, fp
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f aeae 	beq.w	8006186 <_printf_float+0xb6>
 800642a:	f108 0801 	add.w	r8, r8, #1
 800642e:	e7ec      	b.n	800640a <_printf_float+0x33a>
 8006430:	4642      	mov	r2, r8
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	d1c2      	bne.n	80063c2 <_printf_float+0x2f2>
 800643c:	e6a3      	b.n	8006186 <_printf_float+0xb6>
 800643e:	2301      	movs	r3, #1
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	9206      	str	r2, [sp, #24]
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae9c 	beq.w	8006186 <_printf_float+0xb6>
 800644e:	9a06      	ldr	r2, [sp, #24]
 8006450:	f10b 0b01 	add.w	fp, fp, #1
 8006454:	e7bb      	b.n	80063ce <_printf_float+0x2fe>
 8006456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	d1c0      	bne.n	80063e6 <_printf_float+0x316>
 8006464:	e68f      	b.n	8006186 <_printf_float+0xb6>
 8006466:	9a06      	ldr	r2, [sp, #24]
 8006468:	464b      	mov	r3, r9
 800646a:	4442      	add	r2, r8
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	d1c3      	bne.n	80063fe <_printf_float+0x32e>
 8006476:	e686      	b.n	8006186 <_printf_float+0xb6>
 8006478:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800647c:	f1ba 0f01 	cmp.w	sl, #1
 8006480:	dc01      	bgt.n	8006486 <_printf_float+0x3b6>
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d536      	bpl.n	80064f4 <_printf_float+0x424>
 8006486:	2301      	movs	r3, #1
 8006488:	4642      	mov	r2, r8
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f ae78 	beq.w	8006186 <_printf_float+0xb6>
 8006496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	f43f ae70 	beq.w	8006186 <_printf_float+0xb6>
 80064a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064aa:	2200      	movs	r2, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b2:	f7fa fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b6:	b9c0      	cbnz	r0, 80064ea <_printf_float+0x41a>
 80064b8:	4653      	mov	r3, sl
 80064ba:	f108 0201 	add.w	r2, r8, #1
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d10c      	bne.n	80064e2 <_printf_float+0x412>
 80064c8:	e65d      	b.n	8006186 <_printf_float+0xb6>
 80064ca:	2301      	movs	r3, #1
 80064cc:	465a      	mov	r2, fp
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f ae56 	beq.w	8006186 <_printf_float+0xb6>
 80064da:	f108 0801 	add.w	r8, r8, #1
 80064de:	45d0      	cmp	r8, sl
 80064e0:	dbf3      	blt.n	80064ca <_printf_float+0x3fa>
 80064e2:	464b      	mov	r3, r9
 80064e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064e8:	e6df      	b.n	80062aa <_printf_float+0x1da>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	f104 0b1a 	add.w	fp, r4, #26
 80064f2:	e7f4      	b.n	80064de <_printf_float+0x40e>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4642      	mov	r2, r8
 80064f8:	e7e1      	b.n	80064be <_printf_float+0x3ee>
 80064fa:	2301      	movs	r3, #1
 80064fc:	464a      	mov	r2, r9
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	f43f ae3e 	beq.w	8006186 <_printf_float+0xb6>
 800650a:	f108 0801 	add.w	r8, r8, #1
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006512:	1a5b      	subs	r3, r3, r1
 8006514:	4543      	cmp	r3, r8
 8006516:	dcf0      	bgt.n	80064fa <_printf_float+0x42a>
 8006518:	e6fc      	b.n	8006314 <_printf_float+0x244>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	f104 0919 	add.w	r9, r4, #25
 8006522:	e7f4      	b.n	800650e <_printf_float+0x43e>

08006524 <_printf_common>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	4616      	mov	r6, r2
 800652a:	4698      	mov	r8, r3
 800652c:	688a      	ldr	r2, [r1, #8]
 800652e:	690b      	ldr	r3, [r1, #16]
 8006530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006534:	4293      	cmp	r3, r2
 8006536:	bfb8      	it	lt
 8006538:	4613      	movlt	r3, r2
 800653a:	6033      	str	r3, [r6, #0]
 800653c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006540:	4607      	mov	r7, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b10a      	cbz	r2, 800654a <_printf_common+0x26>
 8006546:	3301      	adds	r3, #1
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	0699      	lsls	r1, r3, #26
 800654e:	bf42      	ittt	mi
 8006550:	6833      	ldrmi	r3, [r6, #0]
 8006552:	3302      	addmi	r3, #2
 8006554:	6033      	strmi	r3, [r6, #0]
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	f015 0506 	ands.w	r5, r5, #6
 800655c:	d106      	bne.n	800656c <_printf_common+0x48>
 800655e:	f104 0a19 	add.w	sl, r4, #25
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	6832      	ldr	r2, [r6, #0]
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	42ab      	cmp	r3, r5
 800656a:	dc26      	bgt.n	80065ba <_printf_common+0x96>
 800656c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	3b00      	subs	r3, #0
 8006574:	bf18      	it	ne
 8006576:	2301      	movne	r3, #1
 8006578:	0692      	lsls	r2, r2, #26
 800657a:	d42b      	bmi.n	80065d4 <_printf_common+0xb0>
 800657c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006580:	4641      	mov	r1, r8
 8006582:	4638      	mov	r0, r7
 8006584:	47c8      	blx	r9
 8006586:	3001      	adds	r0, #1
 8006588:	d01e      	beq.n	80065c8 <_printf_common+0xa4>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	6922      	ldr	r2, [r4, #16]
 800658e:	f003 0306 	and.w	r3, r3, #6
 8006592:	2b04      	cmp	r3, #4
 8006594:	bf02      	ittt	eq
 8006596:	68e5      	ldreq	r5, [r4, #12]
 8006598:	6833      	ldreq	r3, [r6, #0]
 800659a:	1aed      	subeq	r5, r5, r3
 800659c:	68a3      	ldr	r3, [r4, #8]
 800659e:	bf0c      	ite	eq
 80065a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a4:	2500      	movne	r5, #0
 80065a6:	4293      	cmp	r3, r2
 80065a8:	bfc4      	itt	gt
 80065aa:	1a9b      	subgt	r3, r3, r2
 80065ac:	18ed      	addgt	r5, r5, r3
 80065ae:	2600      	movs	r6, #0
 80065b0:	341a      	adds	r4, #26
 80065b2:	42b5      	cmp	r5, r6
 80065b4:	d11a      	bne.n	80065ec <_printf_common+0xc8>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e008      	b.n	80065cc <_printf_common+0xa8>
 80065ba:	2301      	movs	r3, #1
 80065bc:	4652      	mov	r2, sl
 80065be:	4641      	mov	r1, r8
 80065c0:	4638      	mov	r0, r7
 80065c2:	47c8      	blx	r9
 80065c4:	3001      	adds	r0, #1
 80065c6:	d103      	bne.n	80065d0 <_printf_common+0xac>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	3501      	adds	r5, #1
 80065d2:	e7c6      	b.n	8006562 <_printf_common+0x3e>
 80065d4:	18e1      	adds	r1, r4, r3
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	2030      	movs	r0, #48	@ 0x30
 80065da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065de:	4422      	add	r2, r4
 80065e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065e8:	3302      	adds	r3, #2
 80065ea:	e7c7      	b.n	800657c <_printf_common+0x58>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4622      	mov	r2, r4
 80065f0:	4641      	mov	r1, r8
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c8      	blx	r9
 80065f6:	3001      	adds	r0, #1
 80065f8:	d0e6      	beq.n	80065c8 <_printf_common+0xa4>
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7d9      	b.n	80065b2 <_printf_common+0x8e>
	...

08006600 <_printf_i>:
 8006600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	7e0f      	ldrb	r7, [r1, #24]
 8006606:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006608:	2f78      	cmp	r7, #120	@ 0x78
 800660a:	4691      	mov	r9, r2
 800660c:	4680      	mov	r8, r0
 800660e:	460c      	mov	r4, r1
 8006610:	469a      	mov	sl, r3
 8006612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006616:	d807      	bhi.n	8006628 <_printf_i+0x28>
 8006618:	2f62      	cmp	r7, #98	@ 0x62
 800661a:	d80a      	bhi.n	8006632 <_printf_i+0x32>
 800661c:	2f00      	cmp	r7, #0
 800661e:	f000 80d2 	beq.w	80067c6 <_printf_i+0x1c6>
 8006622:	2f58      	cmp	r7, #88	@ 0x58
 8006624:	f000 80b9 	beq.w	800679a <_printf_i+0x19a>
 8006628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800662c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006630:	e03a      	b.n	80066a8 <_printf_i+0xa8>
 8006632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006636:	2b15      	cmp	r3, #21
 8006638:	d8f6      	bhi.n	8006628 <_printf_i+0x28>
 800663a:	a101      	add	r1, pc, #4	@ (adr r1, 8006640 <_printf_i+0x40>)
 800663c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006640:	08006699 	.word	0x08006699
 8006644:	080066ad 	.word	0x080066ad
 8006648:	08006629 	.word	0x08006629
 800664c:	08006629 	.word	0x08006629
 8006650:	08006629 	.word	0x08006629
 8006654:	08006629 	.word	0x08006629
 8006658:	080066ad 	.word	0x080066ad
 800665c:	08006629 	.word	0x08006629
 8006660:	08006629 	.word	0x08006629
 8006664:	08006629 	.word	0x08006629
 8006668:	08006629 	.word	0x08006629
 800666c:	080067ad 	.word	0x080067ad
 8006670:	080066d7 	.word	0x080066d7
 8006674:	08006767 	.word	0x08006767
 8006678:	08006629 	.word	0x08006629
 800667c:	08006629 	.word	0x08006629
 8006680:	080067cf 	.word	0x080067cf
 8006684:	08006629 	.word	0x08006629
 8006688:	080066d7 	.word	0x080066d7
 800668c:	08006629 	.word	0x08006629
 8006690:	08006629 	.word	0x08006629
 8006694:	0800676f 	.word	0x0800676f
 8006698:	6833      	ldr	r3, [r6, #0]
 800669a:	1d1a      	adds	r2, r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6032      	str	r2, [r6, #0]
 80066a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066a8:	2301      	movs	r3, #1
 80066aa:	e09d      	b.n	80067e8 <_printf_i+0x1e8>
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	1d19      	adds	r1, r3, #4
 80066b2:	6031      	str	r1, [r6, #0]
 80066b4:	0606      	lsls	r6, r0, #24
 80066b6:	d501      	bpl.n	80066bc <_printf_i+0xbc>
 80066b8:	681d      	ldr	r5, [r3, #0]
 80066ba:	e003      	b.n	80066c4 <_printf_i+0xc4>
 80066bc:	0645      	lsls	r5, r0, #25
 80066be:	d5fb      	bpl.n	80066b8 <_printf_i+0xb8>
 80066c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	da03      	bge.n	80066d0 <_printf_i+0xd0>
 80066c8:	232d      	movs	r3, #45	@ 0x2d
 80066ca:	426d      	negs	r5, r5
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d0:	4859      	ldr	r0, [pc, #356]	@ (8006838 <_printf_i+0x238>)
 80066d2:	230a      	movs	r3, #10
 80066d4:	e011      	b.n	80066fa <_printf_i+0xfa>
 80066d6:	6821      	ldr	r1, [r4, #0]
 80066d8:	6833      	ldr	r3, [r6, #0]
 80066da:	0608      	lsls	r0, r1, #24
 80066dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e0:	d402      	bmi.n	80066e8 <_printf_i+0xe8>
 80066e2:	0649      	lsls	r1, r1, #25
 80066e4:	bf48      	it	mi
 80066e6:	b2ad      	uxthmi	r5, r5
 80066e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ea:	4853      	ldr	r0, [pc, #332]	@ (8006838 <_printf_i+0x238>)
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	bf14      	ite	ne
 80066f0:	230a      	movne	r3, #10
 80066f2:	2308      	moveq	r3, #8
 80066f4:	2100      	movs	r1, #0
 80066f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fa:	6866      	ldr	r6, [r4, #4]
 80066fc:	60a6      	str	r6, [r4, #8]
 80066fe:	2e00      	cmp	r6, #0
 8006700:	bfa2      	ittt	ge
 8006702:	6821      	ldrge	r1, [r4, #0]
 8006704:	f021 0104 	bicge.w	r1, r1, #4
 8006708:	6021      	strge	r1, [r4, #0]
 800670a:	b90d      	cbnz	r5, 8006710 <_printf_i+0x110>
 800670c:	2e00      	cmp	r6, #0
 800670e:	d04b      	beq.n	80067a8 <_printf_i+0x1a8>
 8006710:	4616      	mov	r6, r2
 8006712:	fbb5 f1f3 	udiv	r1, r5, r3
 8006716:	fb03 5711 	mls	r7, r3, r1, r5
 800671a:	5dc7      	ldrb	r7, [r0, r7]
 800671c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006720:	462f      	mov	r7, r5
 8006722:	42bb      	cmp	r3, r7
 8006724:	460d      	mov	r5, r1
 8006726:	d9f4      	bls.n	8006712 <_printf_i+0x112>
 8006728:	2b08      	cmp	r3, #8
 800672a:	d10b      	bne.n	8006744 <_printf_i+0x144>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	07df      	lsls	r7, r3, #31
 8006730:	d508      	bpl.n	8006744 <_printf_i+0x144>
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	6861      	ldr	r1, [r4, #4]
 8006736:	4299      	cmp	r1, r3
 8006738:	bfde      	ittt	le
 800673a:	2330      	movle	r3, #48	@ 0x30
 800673c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006740:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006744:	1b92      	subs	r2, r2, r6
 8006746:	6122      	str	r2, [r4, #16]
 8006748:	f8cd a000 	str.w	sl, [sp]
 800674c:	464b      	mov	r3, r9
 800674e:	aa03      	add	r2, sp, #12
 8006750:	4621      	mov	r1, r4
 8006752:	4640      	mov	r0, r8
 8006754:	f7ff fee6 	bl	8006524 <_printf_common>
 8006758:	3001      	adds	r0, #1
 800675a:	d14a      	bne.n	80067f2 <_printf_i+0x1f2>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	b004      	add	sp, #16
 8006762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f043 0320 	orr.w	r3, r3, #32
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	4833      	ldr	r0, [pc, #204]	@ (800683c <_printf_i+0x23c>)
 8006770:	2778      	movs	r7, #120	@ 0x78
 8006772:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6831      	ldr	r1, [r6, #0]
 800677a:	061f      	lsls	r7, r3, #24
 800677c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006780:	d402      	bmi.n	8006788 <_printf_i+0x188>
 8006782:	065f      	lsls	r7, r3, #25
 8006784:	bf48      	it	mi
 8006786:	b2ad      	uxthmi	r5, r5
 8006788:	6031      	str	r1, [r6, #0]
 800678a:	07d9      	lsls	r1, r3, #31
 800678c:	bf44      	itt	mi
 800678e:	f043 0320 	orrmi.w	r3, r3, #32
 8006792:	6023      	strmi	r3, [r4, #0]
 8006794:	b11d      	cbz	r5, 800679e <_printf_i+0x19e>
 8006796:	2310      	movs	r3, #16
 8006798:	e7ac      	b.n	80066f4 <_printf_i+0xf4>
 800679a:	4827      	ldr	r0, [pc, #156]	@ (8006838 <_printf_i+0x238>)
 800679c:	e7e9      	b.n	8006772 <_printf_i+0x172>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	e7f6      	b.n	8006796 <_printf_i+0x196>
 80067a8:	4616      	mov	r6, r2
 80067aa:	e7bd      	b.n	8006728 <_printf_i+0x128>
 80067ac:	6833      	ldr	r3, [r6, #0]
 80067ae:	6825      	ldr	r5, [r4, #0]
 80067b0:	6961      	ldr	r1, [r4, #20]
 80067b2:	1d18      	adds	r0, r3, #4
 80067b4:	6030      	str	r0, [r6, #0]
 80067b6:	062e      	lsls	r6, r5, #24
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	d501      	bpl.n	80067c0 <_printf_i+0x1c0>
 80067bc:	6019      	str	r1, [r3, #0]
 80067be:	e002      	b.n	80067c6 <_printf_i+0x1c6>
 80067c0:	0668      	lsls	r0, r5, #25
 80067c2:	d5fb      	bpl.n	80067bc <_printf_i+0x1bc>
 80067c4:	8019      	strh	r1, [r3, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	4616      	mov	r6, r2
 80067cc:	e7bc      	b.n	8006748 <_printf_i+0x148>
 80067ce:	6833      	ldr	r3, [r6, #0]
 80067d0:	1d1a      	adds	r2, r3, #4
 80067d2:	6032      	str	r2, [r6, #0]
 80067d4:	681e      	ldr	r6, [r3, #0]
 80067d6:	6862      	ldr	r2, [r4, #4]
 80067d8:	2100      	movs	r1, #0
 80067da:	4630      	mov	r0, r6
 80067dc:	f7f9 fd00 	bl	80001e0 <memchr>
 80067e0:	b108      	cbz	r0, 80067e6 <_printf_i+0x1e6>
 80067e2:	1b80      	subs	r0, r0, r6
 80067e4:	6060      	str	r0, [r4, #4]
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	6123      	str	r3, [r4, #16]
 80067ea:	2300      	movs	r3, #0
 80067ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f0:	e7aa      	b.n	8006748 <_printf_i+0x148>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	4632      	mov	r2, r6
 80067f6:	4649      	mov	r1, r9
 80067f8:	4640      	mov	r0, r8
 80067fa:	47d0      	blx	sl
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0ad      	beq.n	800675c <_printf_i+0x15c>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	079b      	lsls	r3, r3, #30
 8006804:	d413      	bmi.n	800682e <_printf_i+0x22e>
 8006806:	68e0      	ldr	r0, [r4, #12]
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	4298      	cmp	r0, r3
 800680c:	bfb8      	it	lt
 800680e:	4618      	movlt	r0, r3
 8006810:	e7a6      	b.n	8006760 <_printf_i+0x160>
 8006812:	2301      	movs	r3, #1
 8006814:	4632      	mov	r2, r6
 8006816:	4649      	mov	r1, r9
 8006818:	4640      	mov	r0, r8
 800681a:	47d0      	blx	sl
 800681c:	3001      	adds	r0, #1
 800681e:	d09d      	beq.n	800675c <_printf_i+0x15c>
 8006820:	3501      	adds	r5, #1
 8006822:	68e3      	ldr	r3, [r4, #12]
 8006824:	9903      	ldr	r1, [sp, #12]
 8006826:	1a5b      	subs	r3, r3, r1
 8006828:	42ab      	cmp	r3, r5
 800682a:	dcf2      	bgt.n	8006812 <_printf_i+0x212>
 800682c:	e7eb      	b.n	8006806 <_printf_i+0x206>
 800682e:	2500      	movs	r5, #0
 8006830:	f104 0619 	add.w	r6, r4, #25
 8006834:	e7f5      	b.n	8006822 <_printf_i+0x222>
 8006836:	bf00      	nop
 8006838:	08008e77 	.word	0x08008e77
 800683c:	08008e88 	.word	0x08008e88

08006840 <std>:
 8006840:	2300      	movs	r3, #0
 8006842:	b510      	push	{r4, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	e9c0 3300 	strd	r3, r3, [r0]
 800684a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800684e:	6083      	str	r3, [r0, #8]
 8006850:	8181      	strh	r1, [r0, #12]
 8006852:	6643      	str	r3, [r0, #100]	@ 0x64
 8006854:	81c2      	strh	r2, [r0, #14]
 8006856:	6183      	str	r3, [r0, #24]
 8006858:	4619      	mov	r1, r3
 800685a:	2208      	movs	r2, #8
 800685c:	305c      	adds	r0, #92	@ 0x5c
 800685e:	f000 f914 	bl	8006a8a <memset>
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <std+0x58>)
 8006864:	6263      	str	r3, [r4, #36]	@ 0x24
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <std+0x5c>)
 8006868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <std+0x60>)
 800686c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <std+0x64>)
 8006870:	6323      	str	r3, [r4, #48]	@ 0x30
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <std+0x68>)
 8006874:	6224      	str	r4, [r4, #32]
 8006876:	429c      	cmp	r4, r3
 8006878:	d006      	beq.n	8006888 <std+0x48>
 800687a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800687e:	4294      	cmp	r4, r2
 8006880:	d002      	beq.n	8006888 <std+0x48>
 8006882:	33d0      	adds	r3, #208	@ 0xd0
 8006884:	429c      	cmp	r4, r3
 8006886:	d105      	bne.n	8006894 <std+0x54>
 8006888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006890:	f000 b978 	b.w	8006b84 <__retarget_lock_init_recursive>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	bf00      	nop
 8006898:	08006a05 	.word	0x08006a05
 800689c:	08006a27 	.word	0x08006a27
 80068a0:	08006a5f 	.word	0x08006a5f
 80068a4:	08006a83 	.word	0x08006a83
 80068a8:	20000410 	.word	0x20000410

080068ac <stdio_exit_handler>:
 80068ac:	4a02      	ldr	r2, [pc, #8]	@ (80068b8 <stdio_exit_handler+0xc>)
 80068ae:	4903      	ldr	r1, [pc, #12]	@ (80068bc <stdio_exit_handler+0x10>)
 80068b0:	4803      	ldr	r0, [pc, #12]	@ (80068c0 <stdio_exit_handler+0x14>)
 80068b2:	f000 b869 	b.w	8006988 <_fwalk_sglue>
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010
 80068bc:	080084e5 	.word	0x080084e5
 80068c0:	20000020 	.word	0x20000020

080068c4 <cleanup_stdio>:
 80068c4:	6841      	ldr	r1, [r0, #4]
 80068c6:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <cleanup_stdio+0x34>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
 80068ce:	d001      	beq.n	80068d4 <cleanup_stdio+0x10>
 80068d0:	f001 fe08 	bl	80084e4 <_fflush_r>
 80068d4:	68a1      	ldr	r1, [r4, #8]
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <cleanup_stdio+0x38>)
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <cleanup_stdio+0x1e>
 80068dc:	4620      	mov	r0, r4
 80068de:	f001 fe01 	bl	80084e4 <_fflush_r>
 80068e2:	68e1      	ldr	r1, [r4, #12]
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <cleanup_stdio+0x3c>)
 80068e6:	4299      	cmp	r1, r3
 80068e8:	d004      	beq.n	80068f4 <cleanup_stdio+0x30>
 80068ea:	4620      	mov	r0, r4
 80068ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f0:	f001 bdf8 	b.w	80084e4 <_fflush_r>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	20000410 	.word	0x20000410
 80068fc:	20000478 	.word	0x20000478
 8006900:	200004e0 	.word	0x200004e0

08006904 <global_stdio_init.part.0>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <global_stdio_init.part.0+0x30>)
 8006908:	4c0b      	ldr	r4, [pc, #44]	@ (8006938 <global_stdio_init.part.0+0x34>)
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <global_stdio_init.part.0+0x38>)
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	4620      	mov	r0, r4
 8006910:	2200      	movs	r2, #0
 8006912:	2104      	movs	r1, #4
 8006914:	f7ff ff94 	bl	8006840 <std>
 8006918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800691c:	2201      	movs	r2, #1
 800691e:	2109      	movs	r1, #9
 8006920:	f7ff ff8e 	bl	8006840 <std>
 8006924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006928:	2202      	movs	r2, #2
 800692a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692e:	2112      	movs	r1, #18
 8006930:	f7ff bf86 	b.w	8006840 <std>
 8006934:	20000548 	.word	0x20000548
 8006938:	20000410 	.word	0x20000410
 800693c:	080068ad 	.word	0x080068ad

08006940 <__sfp_lock_acquire>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__sfp_lock_acquire+0x8>)
 8006942:	f000 b920 	b.w	8006b86 <__retarget_lock_acquire_recursive>
 8006946:	bf00      	nop
 8006948:	20000551 	.word	0x20000551

0800694c <__sfp_lock_release>:
 800694c:	4801      	ldr	r0, [pc, #4]	@ (8006954 <__sfp_lock_release+0x8>)
 800694e:	f000 b91b 	b.w	8006b88 <__retarget_lock_release_recursive>
 8006952:	bf00      	nop
 8006954:	20000551 	.word	0x20000551

08006958 <__sinit>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	f7ff fff0 	bl	8006940 <__sfp_lock_acquire>
 8006960:	6a23      	ldr	r3, [r4, #32]
 8006962:	b11b      	cbz	r3, 800696c <__sinit+0x14>
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f7ff bff0 	b.w	800694c <__sfp_lock_release>
 800696c:	4b04      	ldr	r3, [pc, #16]	@ (8006980 <__sinit+0x28>)
 800696e:	6223      	str	r3, [r4, #32]
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <__sinit+0x2c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f5      	bne.n	8006964 <__sinit+0xc>
 8006978:	f7ff ffc4 	bl	8006904 <global_stdio_init.part.0>
 800697c:	e7f2      	b.n	8006964 <__sinit+0xc>
 800697e:	bf00      	nop
 8006980:	080068c5 	.word	0x080068c5
 8006984:	20000548 	.word	0x20000548

08006988 <_fwalk_sglue>:
 8006988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800698c:	4607      	mov	r7, r0
 800698e:	4688      	mov	r8, r1
 8006990:	4614      	mov	r4, r2
 8006992:	2600      	movs	r6, #0
 8006994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006998:	f1b9 0901 	subs.w	r9, r9, #1
 800699c:	d505      	bpl.n	80069aa <_fwalk_sglue+0x22>
 800699e:	6824      	ldr	r4, [r4, #0]
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	d1f7      	bne.n	8006994 <_fwalk_sglue+0xc>
 80069a4:	4630      	mov	r0, r6
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d907      	bls.n	80069c0 <_fwalk_sglue+0x38>
 80069b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b4:	3301      	adds	r3, #1
 80069b6:	d003      	beq.n	80069c0 <_fwalk_sglue+0x38>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	4306      	orrs	r6, r0
 80069c0:	3568      	adds	r5, #104	@ 0x68
 80069c2:	e7e9      	b.n	8006998 <_fwalk_sglue+0x10>

080069c4 <siprintf>:
 80069c4:	b40e      	push	{r1, r2, r3}
 80069c6:	b500      	push	{lr}
 80069c8:	b09c      	sub	sp, #112	@ 0x70
 80069ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069d4:	4809      	ldr	r0, [pc, #36]	@ (80069fc <siprintf+0x38>)
 80069d6:	9107      	str	r1, [sp, #28]
 80069d8:	9104      	str	r1, [sp, #16]
 80069da:	4909      	ldr	r1, [pc, #36]	@ (8006a00 <siprintf+0x3c>)
 80069dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	6800      	ldr	r0, [r0, #0]
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	a902      	add	r1, sp, #8
 80069e8:	f001 fbfc 	bl	80081e4 <_svfiprintf_r>
 80069ec:	9b02      	ldr	r3, [sp, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	b01c      	add	sp, #112	@ 0x70
 80069f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f8:	b003      	add	sp, #12
 80069fa:	4770      	bx	lr
 80069fc:	2000001c 	.word	0x2000001c
 8006a00:	ffff0208 	.word	0xffff0208

08006a04 <__sread>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	460c      	mov	r4, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	f000 f86c 	bl	8006ae8 <_read_r>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	bfab      	itete	ge
 8006a14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a16:	89a3      	ldrhlt	r3, [r4, #12]
 8006a18:	181b      	addge	r3, r3, r0
 8006a1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a1e:	bfac      	ite	ge
 8006a20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a22:	81a3      	strhlt	r3, [r4, #12]
 8006a24:	bd10      	pop	{r4, pc}

08006a26 <__swrite>:
 8006a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	461f      	mov	r7, r3
 8006a2c:	898b      	ldrh	r3, [r1, #12]
 8006a2e:	05db      	lsls	r3, r3, #23
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	4616      	mov	r6, r2
 8006a36:	d505      	bpl.n	8006a44 <__swrite+0x1e>
 8006a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f000 f840 	bl	8006ac4 <_lseek_r>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	4628      	mov	r0, r5
 8006a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5a:	f000 b857 	b.w	8006b0c <_write_r>

08006a5e <__sseek>:
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	460c      	mov	r4, r1
 8006a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a66:	f000 f82d 	bl	8006ac4 <_lseek_r>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	bf15      	itete	ne
 8006a70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a7a:	81a3      	strheq	r3, [r4, #12]
 8006a7c:	bf18      	it	ne
 8006a7e:	81a3      	strhne	r3, [r4, #12]
 8006a80:	bd10      	pop	{r4, pc}

08006a82 <__sclose>:
 8006a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a86:	f000 b80d 	b.w	8006aa4 <_close_r>

08006a8a <memset>:
 8006a8a:	4402      	add	r2, r0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d100      	bne.n	8006a94 <memset+0xa>
 8006a92:	4770      	bx	lr
 8006a94:	f803 1b01 	strb.w	r1, [r3], #1
 8006a98:	e7f9      	b.n	8006a8e <memset+0x4>
	...

08006a9c <_localeconv_r>:
 8006a9c:	4800      	ldr	r0, [pc, #0]	@ (8006aa0 <_localeconv_r+0x4>)
 8006a9e:	4770      	bx	lr
 8006aa0:	2000015c 	.word	0x2000015c

08006aa4 <_close_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	@ (8006ac0 <_close_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fa fd4a 	bl	8001548 <_close>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_close_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_close_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	2000054c 	.word	0x2000054c

08006ac4 <_lseek_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	@ (8006ae4 <_lseek_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fa fd5f 	bl	8001596 <_lseek>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_lseek_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_lseek_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	2000054c 	.word	0x2000054c

08006ae8 <_read_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_read_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fa fced 	bl	80014d6 <_read>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_read_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_read_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	2000054c 	.word	0x2000054c

08006b0c <_write_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d07      	ldr	r5, [pc, #28]	@ (8006b2c <_write_r+0x20>)
 8006b10:	4604      	mov	r4, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	602a      	str	r2, [r5, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f7fa fcf8 	bl	8001510 <_write>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_write_r+0x1e>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_write_r+0x1e>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	2000054c 	.word	0x2000054c

08006b30 <__errno>:
 8006b30:	4b01      	ldr	r3, [pc, #4]	@ (8006b38 <__errno+0x8>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	2000001c 	.word	0x2000001c

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	@ (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b80 <__libc_init_array+0x44>)
 8006b50:	f002 f866 	bl	8008c20 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	080090e0 	.word	0x080090e0
 8006b78:	080090e0 	.word	0x080090e0
 8006b7c:	080090e0 	.word	0x080090e0
 8006b80:	080090e4 	.word	0x080090e4

08006b84 <__retarget_lock_init_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <__retarget_lock_acquire_recursive>:
 8006b86:	4770      	bx	lr

08006b88 <__retarget_lock_release_recursive>:
 8006b88:	4770      	bx	lr

08006b8a <quorem>:
 8006b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8e:	6903      	ldr	r3, [r0, #16]
 8006b90:	690c      	ldr	r4, [r1, #16]
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	4607      	mov	r7, r0
 8006b96:	db7e      	blt.n	8006c96 <quorem+0x10c>
 8006b98:	3c01      	subs	r4, #1
 8006b9a:	f101 0814 	add.w	r8, r1, #20
 8006b9e:	00a3      	lsls	r3, r4, #2
 8006ba0:	f100 0514 	add.w	r5, r0, #20
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bc0:	d32e      	bcc.n	8006c20 <quorem+0x96>
 8006bc2:	f04f 0a00 	mov.w	sl, #0
 8006bc6:	46c4      	mov	ip, r8
 8006bc8:	46ae      	mov	lr, r5
 8006bca:	46d3      	mov	fp, sl
 8006bcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bd0:	b298      	uxth	r0, r3
 8006bd2:	fb06 a000 	mla	r0, r6, r0, sl
 8006bd6:	0c02      	lsrs	r2, r0, #16
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	fb06 2303 	mla	r3, r6, r3, r2
 8006bde:	f8de 2000 	ldr.w	r2, [lr]
 8006be2:	b280      	uxth	r0, r0
 8006be4:	b292      	uxth	r2, r2
 8006be6:	1a12      	subs	r2, r2, r0
 8006be8:	445a      	add	r2, fp
 8006bea:	f8de 0000 	ldr.w	r0, [lr]
 8006bee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c02:	45e1      	cmp	r9, ip
 8006c04:	f84e 2b04 	str.w	r2, [lr], #4
 8006c08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c0c:	d2de      	bcs.n	8006bcc <quorem+0x42>
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	58eb      	ldr	r3, [r5, r3]
 8006c12:	b92b      	cbnz	r3, 8006c20 <quorem+0x96>
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	3b04      	subs	r3, #4
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	d32f      	bcc.n	8006c7e <quorem+0xf4>
 8006c1e:	613c      	str	r4, [r7, #16]
 8006c20:	4638      	mov	r0, r7
 8006c22:	f001 f97b 	bl	8007f1c <__mcmp>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	db25      	blt.n	8006c76 <quorem+0xec>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c32:	f8d1 c000 	ldr.w	ip, [r1]
 8006c36:	fa1f fe82 	uxth.w	lr, r2
 8006c3a:	fa1f f38c 	uxth.w	r3, ip
 8006c3e:	eba3 030e 	sub.w	r3, r3, lr
 8006c42:	4403      	add	r3, r0
 8006c44:	0c12      	lsrs	r2, r2, #16
 8006c46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c54:	45c1      	cmp	r9, r8
 8006c56:	f841 3b04 	str.w	r3, [r1], #4
 8006c5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c5e:	d2e6      	bcs.n	8006c2e <quorem+0xa4>
 8006c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c68:	b922      	cbnz	r2, 8006c74 <quorem+0xea>
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	429d      	cmp	r5, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	d30b      	bcc.n	8006c8a <quorem+0x100>
 8006c72:	613c      	str	r4, [r7, #16]
 8006c74:	3601      	adds	r6, #1
 8006c76:	4630      	mov	r0, r6
 8006c78:	b003      	add	sp, #12
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	3b04      	subs	r3, #4
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	d1cb      	bne.n	8006c1e <quorem+0x94>
 8006c86:	3c01      	subs	r4, #1
 8006c88:	e7c6      	b.n	8006c18 <quorem+0x8e>
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	3b04      	subs	r3, #4
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	d1ef      	bne.n	8006c72 <quorem+0xe8>
 8006c92:	3c01      	subs	r4, #1
 8006c94:	e7ea      	b.n	8006c6c <quorem+0xe2>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7ee      	b.n	8006c78 <quorem+0xee>
 8006c9a:	0000      	movs	r0, r0
 8006c9c:	0000      	movs	r0, r0
	...

08006ca0 <_dtoa_r>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	69c7      	ldr	r7, [r0, #28]
 8006ca6:	b099      	sub	sp, #100	@ 0x64
 8006ca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cac:	ec55 4b10 	vmov	r4, r5, d0
 8006cb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cb4:	4683      	mov	fp, r0
 8006cb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cba:	b97f      	cbnz	r7, 8006cdc <_dtoa_r+0x3c>
 8006cbc:	2010      	movs	r0, #16
 8006cbe:	f000 fdfd 	bl	80078bc <malloc>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006cc8:	b920      	cbnz	r0, 8006cd4 <_dtoa_r+0x34>
 8006cca:	4ba7      	ldr	r3, [pc, #668]	@ (8006f68 <_dtoa_r+0x2c8>)
 8006ccc:	21ef      	movs	r1, #239	@ 0xef
 8006cce:	48a7      	ldr	r0, [pc, #668]	@ (8006f6c <_dtoa_r+0x2cc>)
 8006cd0:	f001 fc68 	bl	80085a4 <__assert_func>
 8006cd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cd8:	6007      	str	r7, [r0, #0]
 8006cda:	60c7      	str	r7, [r0, #12]
 8006cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce0:	6819      	ldr	r1, [r3, #0]
 8006ce2:	b159      	cbz	r1, 8006cfc <_dtoa_r+0x5c>
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	604a      	str	r2, [r1, #4]
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4093      	lsls	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f000 feda 	bl	8007aa8 <_Bfree>
 8006cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	1e2b      	subs	r3, r5, #0
 8006cfe:	bfb9      	ittee	lt
 8006d00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d04:	9303      	strlt	r3, [sp, #12]
 8006d06:	2300      	movge	r3, #0
 8006d08:	6033      	strge	r3, [r6, #0]
 8006d0a:	9f03      	ldr	r7, [sp, #12]
 8006d0c:	4b98      	ldr	r3, [pc, #608]	@ (8006f70 <_dtoa_r+0x2d0>)
 8006d0e:	bfbc      	itt	lt
 8006d10:	2201      	movlt	r2, #1
 8006d12:	6032      	strlt	r2, [r6, #0]
 8006d14:	43bb      	bics	r3, r7
 8006d16:	d112      	bne.n	8006d3e <_dtoa_r+0x9e>
 8006d18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d24:	4323      	orrs	r3, r4
 8006d26:	f000 854d 	beq.w	80077c4 <_dtoa_r+0xb24>
 8006d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f84 <_dtoa_r+0x2e4>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 854f 	beq.w	80077d4 <_dtoa_r+0xb34>
 8006d36:	f10a 0303 	add.w	r3, sl, #3
 8006d3a:	f000 bd49 	b.w	80077d0 <_dtoa_r+0xb30>
 8006d3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	ec51 0b17 	vmov	r0, r1, d7
 8006d48:	2300      	movs	r3, #0
 8006d4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d4e:	f7f9 fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d52:	4680      	mov	r8, r0
 8006d54:	b158      	cbz	r0, 8006d6e <_dtoa_r+0xce>
 8006d56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d5e:	b113      	cbz	r3, 8006d66 <_dtoa_r+0xc6>
 8006d60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d62:	4b84      	ldr	r3, [pc, #528]	@ (8006f74 <_dtoa_r+0x2d4>)
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f88 <_dtoa_r+0x2e8>
 8006d6a:	f000 bd33 	b.w	80077d4 <_dtoa_r+0xb34>
 8006d6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d72:	aa16      	add	r2, sp, #88	@ 0x58
 8006d74:	a917      	add	r1, sp, #92	@ 0x5c
 8006d76:	4658      	mov	r0, fp
 8006d78:	f001 f980 	bl	800807c <__d2b>
 8006d7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d80:	4681      	mov	r9, r0
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d077      	beq.n	8006e76 <_dtoa_r+0x1d6>
 8006d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006da0:	4619      	mov	r1, r3
 8006da2:	2200      	movs	r2, #0
 8006da4:	4b74      	ldr	r3, [pc, #464]	@ (8006f78 <_dtoa_r+0x2d8>)
 8006da6:	f7f9 fa77 	bl	8000298 <__aeabi_dsub>
 8006daa:	a369      	add	r3, pc, #420	@ (adr r3, 8006f50 <_dtoa_r+0x2b0>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 fc2a 	bl	8000608 <__aeabi_dmul>
 8006db4:	a368      	add	r3, pc, #416	@ (adr r3, 8006f58 <_dtoa_r+0x2b8>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fa6f 	bl	800029c <__adddf3>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	f7f9 fbb6 	bl	8000534 <__aeabi_i2d>
 8006dc8:	a365      	add	r3, pc, #404	@ (adr r3, 8006f60 <_dtoa_r+0x2c0>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f7f9 fc1b 	bl	8000608 <__aeabi_dmul>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fa5f 	bl	800029c <__adddf3>
 8006dde:	4604      	mov	r4, r0
 8006de0:	460d      	mov	r5, r1
 8006de2:	f7f9 fec1 	bl	8000b68 <__aeabi_d2iz>
 8006de6:	2200      	movs	r2, #0
 8006de8:	4607      	mov	r7, r0
 8006dea:	2300      	movs	r3, #0
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7f9 fe7c 	bl	8000aec <__aeabi_dcmplt>
 8006df4:	b140      	cbz	r0, 8006e08 <_dtoa_r+0x168>
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7f9 fb9c 	bl	8000534 <__aeabi_i2d>
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	462b      	mov	r3, r5
 8006e00:	f7f9 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e04:	b900      	cbnz	r0, 8006e08 <_dtoa_r+0x168>
 8006e06:	3f01      	subs	r7, #1
 8006e08:	2f16      	cmp	r7, #22
 8006e0a:	d851      	bhi.n	8006eb0 <_dtoa_r+0x210>
 8006e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8006f7c <_dtoa_r+0x2dc>)
 8006e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1a:	f7f9 fe67 	bl	8000aec <__aeabi_dcmplt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d048      	beq.n	8006eb4 <_dtoa_r+0x214>
 8006e22:	3f01      	subs	r7, #1
 8006e24:	2300      	movs	r3, #0
 8006e26:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e2a:	1b9b      	subs	r3, r3, r6
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	bf44      	itt	mi
 8006e30:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e34:	2300      	movmi	r3, #0
 8006e36:	9208      	str	r2, [sp, #32]
 8006e38:	bf54      	ite	pl
 8006e3a:	f04f 0800 	movpl.w	r8, #0
 8006e3e:	9308      	strmi	r3, [sp, #32]
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	db39      	blt.n	8006eb8 <_dtoa_r+0x218>
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e48:	443b      	add	r3, r7
 8006e4a:	9308      	str	r3, [sp, #32]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d864      	bhi.n	8006f20 <_dtoa_r+0x280>
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	bfc4      	itt	gt
 8006e5a:	3b04      	subgt	r3, #4
 8006e5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e60:	f1a3 0302 	sub.w	r3, r3, #2
 8006e64:	bfcc      	ite	gt
 8006e66:	2400      	movgt	r4, #0
 8006e68:	2401      	movle	r4, #1
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d863      	bhi.n	8006f36 <_dtoa_r+0x296>
 8006e6e:	e8df f003 	tbb	[pc, r3]
 8006e72:	372a      	.short	0x372a
 8006e74:	5535      	.short	0x5535
 8006e76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e7a:	441e      	add	r6, r3
 8006e7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	bfc1      	itttt	gt
 8006e84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e88:	409f      	lslgt	r7, r3
 8006e8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e92:	bfd6      	itet	le
 8006e94:	f1c3 0320 	rsble	r3, r3, #32
 8006e98:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e9c:	fa04 f003 	lslle.w	r0, r4, r3
 8006ea0:	f7f9 fb38 	bl	8000514 <__aeabi_ui2d>
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006eaa:	3e01      	subs	r6, #1
 8006eac:	9214      	str	r2, [sp, #80]	@ 0x50
 8006eae:	e777      	b.n	8006da0 <_dtoa_r+0x100>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e7b8      	b.n	8006e26 <_dtoa_r+0x186>
 8006eb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006eb6:	e7b7      	b.n	8006e28 <_dtoa_r+0x188>
 8006eb8:	427b      	negs	r3, r7
 8006eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	eba8 0807 	sub.w	r8, r8, r7
 8006ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ec4:	e7c4      	b.n	8006e50 <_dtoa_r+0x1b0>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dc35      	bgt.n	8006f3c <_dtoa_r+0x29c>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	9307      	str	r3, [sp, #28]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eda:	e00b      	b.n	8006ef4 <_dtoa_r+0x254>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e7f3      	b.n	8006ec8 <_dtoa_r+0x228>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	bfb8      	it	lt
 8006ef2:	2301      	movlt	r3, #1
 8006ef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	2204      	movs	r2, #4
 8006efc:	f102 0514 	add.w	r5, r2, #20
 8006f00:	429d      	cmp	r5, r3
 8006f02:	d91f      	bls.n	8006f44 <_dtoa_r+0x2a4>
 8006f04:	6041      	str	r1, [r0, #4]
 8006f06:	4658      	mov	r0, fp
 8006f08:	f000 fd8e 	bl	8007a28 <_Balloc>
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d13c      	bne.n	8006f8c <_dtoa_r+0x2ec>
 8006f12:	4b1b      	ldr	r3, [pc, #108]	@ (8006f80 <_dtoa_r+0x2e0>)
 8006f14:	4602      	mov	r2, r0
 8006f16:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f1a:	e6d8      	b.n	8006cce <_dtoa_r+0x2e>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e7e0      	b.n	8006ee2 <_dtoa_r+0x242>
 8006f20:	2401      	movs	r4, #1
 8006f22:	2300      	movs	r3, #0
 8006f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	9307      	str	r3, [sp, #28]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2312      	movs	r3, #18
 8006f34:	e7d0      	b.n	8006ed8 <_dtoa_r+0x238>
 8006f36:	2301      	movs	r3, #1
 8006f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f3a:	e7f5      	b.n	8006f28 <_dtoa_r+0x288>
 8006f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	e7d7      	b.n	8006ef4 <_dtoa_r+0x254>
 8006f44:	3101      	adds	r1, #1
 8006f46:	0052      	lsls	r2, r2, #1
 8006f48:	e7d8      	b.n	8006efc <_dtoa_r+0x25c>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	636f4361 	.word	0x636f4361
 8006f54:	3fd287a7 	.word	0x3fd287a7
 8006f58:	8b60c8b3 	.word	0x8b60c8b3
 8006f5c:	3fc68a28 	.word	0x3fc68a28
 8006f60:	509f79fb 	.word	0x509f79fb
 8006f64:	3fd34413 	.word	0x3fd34413
 8006f68:	08008ea6 	.word	0x08008ea6
 8006f6c:	08008ebd 	.word	0x08008ebd
 8006f70:	7ff00000 	.word	0x7ff00000
 8006f74:	08008e76 	.word	0x08008e76
 8006f78:	3ff80000 	.word	0x3ff80000
 8006f7c:	08008fb8 	.word	0x08008fb8
 8006f80:	08008f15 	.word	0x08008f15
 8006f84:	08008ea2 	.word	0x08008ea2
 8006f88:	08008e75 	.word	0x08008e75
 8006f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f90:	6018      	str	r0, [r3, #0]
 8006f92:	9b07      	ldr	r3, [sp, #28]
 8006f94:	2b0e      	cmp	r3, #14
 8006f96:	f200 80a4 	bhi.w	80070e2 <_dtoa_r+0x442>
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	f000 80a1 	beq.w	80070e2 <_dtoa_r+0x442>
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	dd33      	ble.n	800700c <_dtoa_r+0x36c>
 8006fa4:	4bad      	ldr	r3, [pc, #692]	@ (800725c <_dtoa_r+0x5bc>)
 8006fa6:	f007 020f 	and.w	r2, r7, #15
 8006faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fae:	ed93 7b00 	vldr	d7, [r3]
 8006fb2:	05f8      	lsls	r0, r7, #23
 8006fb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fbc:	d516      	bpl.n	8006fec <_dtoa_r+0x34c>
 8006fbe:	4ba8      	ldr	r3, [pc, #672]	@ (8007260 <_dtoa_r+0x5c0>)
 8006fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fc8:	f7f9 fc48 	bl	800085c <__aeabi_ddiv>
 8006fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd0:	f004 040f 	and.w	r4, r4, #15
 8006fd4:	2603      	movs	r6, #3
 8006fd6:	4da2      	ldr	r5, [pc, #648]	@ (8007260 <_dtoa_r+0x5c0>)
 8006fd8:	b954      	cbnz	r4, 8006ff0 <_dtoa_r+0x350>
 8006fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 fc3b 	bl	800085c <__aeabi_ddiv>
 8006fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fea:	e028      	b.n	800703e <_dtoa_r+0x39e>
 8006fec:	2602      	movs	r6, #2
 8006fee:	e7f2      	b.n	8006fd6 <_dtoa_r+0x336>
 8006ff0:	07e1      	lsls	r1, r4, #31
 8006ff2:	d508      	bpl.n	8007006 <_dtoa_r+0x366>
 8006ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ffc:	f7f9 fb04 	bl	8000608 <__aeabi_dmul>
 8007000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007004:	3601      	adds	r6, #1
 8007006:	1064      	asrs	r4, r4, #1
 8007008:	3508      	adds	r5, #8
 800700a:	e7e5      	b.n	8006fd8 <_dtoa_r+0x338>
 800700c:	f000 80d2 	beq.w	80071b4 <_dtoa_r+0x514>
 8007010:	427c      	negs	r4, r7
 8007012:	4b92      	ldr	r3, [pc, #584]	@ (800725c <_dtoa_r+0x5bc>)
 8007014:	4d92      	ldr	r5, [pc, #584]	@ (8007260 <_dtoa_r+0x5c0>)
 8007016:	f004 020f 	and.w	r2, r4, #15
 800701a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007026:	f7f9 faef 	bl	8000608 <__aeabi_dmul>
 800702a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702e:	1124      	asrs	r4, r4, #4
 8007030:	2300      	movs	r3, #0
 8007032:	2602      	movs	r6, #2
 8007034:	2c00      	cmp	r4, #0
 8007036:	f040 80b2 	bne.w	800719e <_dtoa_r+0x4fe>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1d3      	bne.n	8006fe6 <_dtoa_r+0x346>
 800703e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80b7 	beq.w	80071b8 <_dtoa_r+0x518>
 800704a:	4b86      	ldr	r3, [pc, #536]	@ (8007264 <_dtoa_r+0x5c4>)
 800704c:	2200      	movs	r2, #0
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd4b 	bl	8000aec <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	f000 80ae 	beq.w	80071b8 <_dtoa_r+0x518>
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80aa 	beq.w	80071b8 <_dtoa_r+0x518>
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	dd37      	ble.n	80070da <_dtoa_r+0x43a>
 800706a:	1e7b      	subs	r3, r7, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	4620      	mov	r0, r4
 8007070:	4b7d      	ldr	r3, [pc, #500]	@ (8007268 <_dtoa_r+0x5c8>)
 8007072:	2200      	movs	r2, #0
 8007074:	4629      	mov	r1, r5
 8007076:	f7f9 fac7 	bl	8000608 <__aeabi_dmul>
 800707a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800707e:	9c00      	ldr	r4, [sp, #0]
 8007080:	3601      	adds	r6, #1
 8007082:	4630      	mov	r0, r6
 8007084:	f7f9 fa56 	bl	8000534 <__aeabi_i2d>
 8007088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708c:	f7f9 fabc 	bl	8000608 <__aeabi_dmul>
 8007090:	4b76      	ldr	r3, [pc, #472]	@ (800726c <_dtoa_r+0x5cc>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 f902 	bl	800029c <__adddf3>
 8007098:	4605      	mov	r5, r0
 800709a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800709e:	2c00      	cmp	r4, #0
 80070a0:	f040 808d 	bne.w	80071be <_dtoa_r+0x51e>
 80070a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a8:	4b71      	ldr	r3, [pc, #452]	@ (8007270 <_dtoa_r+0x5d0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7f9 f8f4 	bl	8000298 <__aeabi_dsub>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070b8:	462a      	mov	r2, r5
 80070ba:	4633      	mov	r3, r6
 80070bc:	f7f9 fd34 	bl	8000b28 <__aeabi_dcmpgt>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f040 828b 	bne.w	80075dc <_dtoa_r+0x93c>
 80070c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ca:	462a      	mov	r2, r5
 80070cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070d0:	f7f9 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 8128 	bne.w	800732a <_dtoa_r+0x68a>
 80070da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f2c0 815a 	blt.w	800739e <_dtoa_r+0x6fe>
 80070ea:	2f0e      	cmp	r7, #14
 80070ec:	f300 8157 	bgt.w	800739e <_dtoa_r+0x6fe>
 80070f0:	4b5a      	ldr	r3, [pc, #360]	@ (800725c <_dtoa_r+0x5bc>)
 80070f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070f6:	ed93 7b00 	vldr	d7, [r3]
 80070fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	ed8d 7b00 	vstr	d7, [sp]
 8007102:	da03      	bge.n	800710c <_dtoa_r+0x46c>
 8007104:	9b07      	ldr	r3, [sp, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f340 8101 	ble.w	800730e <_dtoa_r+0x66e>
 800710c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007110:	4656      	mov	r6, sl
 8007112:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fb9f 	bl	800085c <__aeabi_ddiv>
 800711e:	f7f9 fd23 	bl	8000b68 <__aeabi_d2iz>
 8007122:	4680      	mov	r8, r0
 8007124:	f7f9 fa06 	bl	8000534 <__aeabi_i2d>
 8007128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800712c:	f7f9 fa6c 	bl	8000608 <__aeabi_dmul>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800713c:	f7f9 f8ac 	bl	8000298 <__aeabi_dsub>
 8007140:	f806 4b01 	strb.w	r4, [r6], #1
 8007144:	9d07      	ldr	r5, [sp, #28]
 8007146:	eba6 040a 	sub.w	r4, r6, sl
 800714a:	42a5      	cmp	r5, r4
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	f040 8117 	bne.w	8007382 <_dtoa_r+0x6e2>
 8007154:	f7f9 f8a2 	bl	800029c <__adddf3>
 8007158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
 8007160:	f7f9 fce2 	bl	8000b28 <__aeabi_dcmpgt>
 8007164:	2800      	cmp	r0, #0
 8007166:	f040 80f9 	bne.w	800735c <_dtoa_r+0x6bc>
 800716a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007176:	b118      	cbz	r0, 8007180 <_dtoa_r+0x4e0>
 8007178:	f018 0f01 	tst.w	r8, #1
 800717c:	f040 80ee 	bne.w	800735c <_dtoa_r+0x6bc>
 8007180:	4649      	mov	r1, r9
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fc90 	bl	8007aa8 <_Bfree>
 8007188:	2300      	movs	r3, #0
 800718a:	7033      	strb	r3, [r6, #0]
 800718c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800718e:	3701      	adds	r7, #1
 8007190:	601f      	str	r7, [r3, #0]
 8007192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 831d 	beq.w	80077d4 <_dtoa_r+0xb34>
 800719a:	601e      	str	r6, [r3, #0]
 800719c:	e31a      	b.n	80077d4 <_dtoa_r+0xb34>
 800719e:	07e2      	lsls	r2, r4, #31
 80071a0:	d505      	bpl.n	80071ae <_dtoa_r+0x50e>
 80071a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071a6:	f7f9 fa2f 	bl	8000608 <__aeabi_dmul>
 80071aa:	3601      	adds	r6, #1
 80071ac:	2301      	movs	r3, #1
 80071ae:	1064      	asrs	r4, r4, #1
 80071b0:	3508      	adds	r5, #8
 80071b2:	e73f      	b.n	8007034 <_dtoa_r+0x394>
 80071b4:	2602      	movs	r6, #2
 80071b6:	e742      	b.n	800703e <_dtoa_r+0x39e>
 80071b8:	9c07      	ldr	r4, [sp, #28]
 80071ba:	9704      	str	r7, [sp, #16]
 80071bc:	e761      	b.n	8007082 <_dtoa_r+0x3e2>
 80071be:	4b27      	ldr	r3, [pc, #156]	@ (800725c <_dtoa_r+0x5bc>)
 80071c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071ca:	4454      	add	r4, sl
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d053      	beq.n	8007278 <_dtoa_r+0x5d8>
 80071d0:	4928      	ldr	r1, [pc, #160]	@ (8007274 <_dtoa_r+0x5d4>)
 80071d2:	2000      	movs	r0, #0
 80071d4:	f7f9 fb42 	bl	800085c <__aeabi_ddiv>
 80071d8:	4633      	mov	r3, r6
 80071da:	462a      	mov	r2, r5
 80071dc:	f7f9 f85c 	bl	8000298 <__aeabi_dsub>
 80071e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071e4:	4656      	mov	r6, sl
 80071e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ea:	f7f9 fcbd 	bl	8000b68 <__aeabi_d2iz>
 80071ee:	4605      	mov	r5, r0
 80071f0:	f7f9 f9a0 	bl	8000534 <__aeabi_i2d>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fc:	f7f9 f84c 	bl	8000298 <__aeabi_dsub>
 8007200:	3530      	adds	r5, #48	@ 0x30
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800720a:	f806 5b01 	strb.w	r5, [r6], #1
 800720e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007212:	f7f9 fc6b 	bl	8000aec <__aeabi_dcmplt>
 8007216:	2800      	cmp	r0, #0
 8007218:	d171      	bne.n	80072fe <_dtoa_r+0x65e>
 800721a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800721e:	4911      	ldr	r1, [pc, #68]	@ (8007264 <_dtoa_r+0x5c4>)
 8007220:	2000      	movs	r0, #0
 8007222:	f7f9 f839 	bl	8000298 <__aeabi_dsub>
 8007226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800722a:	f7f9 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	f040 8095 	bne.w	800735e <_dtoa_r+0x6be>
 8007234:	42a6      	cmp	r6, r4
 8007236:	f43f af50 	beq.w	80070da <_dtoa_r+0x43a>
 800723a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800723e:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <_dtoa_r+0x5c8>)
 8007240:	2200      	movs	r2, #0
 8007242:	f7f9 f9e1 	bl	8000608 <__aeabi_dmul>
 8007246:	4b08      	ldr	r3, [pc, #32]	@ (8007268 <_dtoa_r+0x5c8>)
 8007248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800724c:	2200      	movs	r2, #0
 800724e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007252:	f7f9 f9d9 	bl	8000608 <__aeabi_dmul>
 8007256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800725a:	e7c4      	b.n	80071e6 <_dtoa_r+0x546>
 800725c:	08008fb8 	.word	0x08008fb8
 8007260:	08008f90 	.word	0x08008f90
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	40240000 	.word	0x40240000
 800726c:	401c0000 	.word	0x401c0000
 8007270:	40140000 	.word	0x40140000
 8007274:	3fe00000 	.word	0x3fe00000
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	f7f9 f9c4 	bl	8000608 <__aeabi_dmul>
 8007280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007284:	9415      	str	r4, [sp, #84]	@ 0x54
 8007286:	4656      	mov	r6, sl
 8007288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728c:	f7f9 fc6c 	bl	8000b68 <__aeabi_d2iz>
 8007290:	4605      	mov	r5, r0
 8007292:	f7f9 f94f 	bl	8000534 <__aeabi_i2d>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729e:	f7f8 fffb 	bl	8000298 <__aeabi_dsub>
 80072a2:	3530      	adds	r5, #48	@ 0x30
 80072a4:	f806 5b01 	strb.w	r5, [r6], #1
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	d124      	bne.n	8007302 <_dtoa_r+0x662>
 80072b8:	4bac      	ldr	r3, [pc, #688]	@ (800756c <_dtoa_r+0x8cc>)
 80072ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072be:	f7f8 ffed 	bl	800029c <__adddf3>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ca:	f7f9 fc2d 	bl	8000b28 <__aeabi_dcmpgt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d145      	bne.n	800735e <_dtoa_r+0x6be>
 80072d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072d6:	49a5      	ldr	r1, [pc, #660]	@ (800756c <_dtoa_r+0x8cc>)
 80072d8:	2000      	movs	r0, #0
 80072da:	f7f8 ffdd 	bl	8000298 <__aeabi_dsub>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e6:	f7f9 fc01 	bl	8000aec <__aeabi_dcmplt>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f43f aef5 	beq.w	80070da <_dtoa_r+0x43a>
 80072f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80072f2:	1e73      	subs	r3, r6, #1
 80072f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80072f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072fa:	2b30      	cmp	r3, #48	@ 0x30
 80072fc:	d0f8      	beq.n	80072f0 <_dtoa_r+0x650>
 80072fe:	9f04      	ldr	r7, [sp, #16]
 8007300:	e73e      	b.n	8007180 <_dtoa_r+0x4e0>
 8007302:	4b9b      	ldr	r3, [pc, #620]	@ (8007570 <_dtoa_r+0x8d0>)
 8007304:	f7f9 f980 	bl	8000608 <__aeabi_dmul>
 8007308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800730c:	e7bc      	b.n	8007288 <_dtoa_r+0x5e8>
 800730e:	d10c      	bne.n	800732a <_dtoa_r+0x68a>
 8007310:	4b98      	ldr	r3, [pc, #608]	@ (8007574 <_dtoa_r+0x8d4>)
 8007312:	2200      	movs	r2, #0
 8007314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007318:	f7f9 f976 	bl	8000608 <__aeabi_dmul>
 800731c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007320:	f7f9 fbf8 	bl	8000b14 <__aeabi_dcmpge>
 8007324:	2800      	cmp	r0, #0
 8007326:	f000 8157 	beq.w	80075d8 <_dtoa_r+0x938>
 800732a:	2400      	movs	r4, #0
 800732c:	4625      	mov	r5, r4
 800732e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007330:	43db      	mvns	r3, r3
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	4656      	mov	r6, sl
 8007336:	2700      	movs	r7, #0
 8007338:	4621      	mov	r1, r4
 800733a:	4658      	mov	r0, fp
 800733c:	f000 fbb4 	bl	8007aa8 <_Bfree>
 8007340:	2d00      	cmp	r5, #0
 8007342:	d0dc      	beq.n	80072fe <_dtoa_r+0x65e>
 8007344:	b12f      	cbz	r7, 8007352 <_dtoa_r+0x6b2>
 8007346:	42af      	cmp	r7, r5
 8007348:	d003      	beq.n	8007352 <_dtoa_r+0x6b2>
 800734a:	4639      	mov	r1, r7
 800734c:	4658      	mov	r0, fp
 800734e:	f000 fbab 	bl	8007aa8 <_Bfree>
 8007352:	4629      	mov	r1, r5
 8007354:	4658      	mov	r0, fp
 8007356:	f000 fba7 	bl	8007aa8 <_Bfree>
 800735a:	e7d0      	b.n	80072fe <_dtoa_r+0x65e>
 800735c:	9704      	str	r7, [sp, #16]
 800735e:	4633      	mov	r3, r6
 8007360:	461e      	mov	r6, r3
 8007362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007366:	2a39      	cmp	r2, #57	@ 0x39
 8007368:	d107      	bne.n	800737a <_dtoa_r+0x6da>
 800736a:	459a      	cmp	sl, r3
 800736c:	d1f8      	bne.n	8007360 <_dtoa_r+0x6c0>
 800736e:	9a04      	ldr	r2, [sp, #16]
 8007370:	3201      	adds	r2, #1
 8007372:	9204      	str	r2, [sp, #16]
 8007374:	2230      	movs	r2, #48	@ 0x30
 8007376:	f88a 2000 	strb.w	r2, [sl]
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	3201      	adds	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e7bd      	b.n	80072fe <_dtoa_r+0x65e>
 8007382:	4b7b      	ldr	r3, [pc, #492]	@ (8007570 <_dtoa_r+0x8d0>)
 8007384:	2200      	movs	r2, #0
 8007386:	f7f9 f93f 	bl	8000608 <__aeabi_dmul>
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	f7f9 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aebb 	beq.w	8007112 <_dtoa_r+0x472>
 800739c:	e6f0      	b.n	8007180 <_dtoa_r+0x4e0>
 800739e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	f000 80db 	beq.w	800755c <_dtoa_r+0x8bc>
 80073a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	f300 80bf 	bgt.w	800752c <_dtoa_r+0x88c>
 80073ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	f000 80b7 	beq.w	8007524 <_dtoa_r+0x884>
 80073b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073bc:	4646      	mov	r6, r8
 80073be:	9a08      	ldr	r2, [sp, #32]
 80073c0:	2101      	movs	r1, #1
 80073c2:	441a      	add	r2, r3
 80073c4:	4658      	mov	r0, fp
 80073c6:	4498      	add	r8, r3
 80073c8:	9208      	str	r2, [sp, #32]
 80073ca:	f000 fc21 	bl	8007c10 <__i2b>
 80073ce:	4605      	mov	r5, r0
 80073d0:	b15e      	cbz	r6, 80073ea <_dtoa_r+0x74a>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dd08      	ble.n	80073ea <_dtoa_r+0x74a>
 80073d8:	42b3      	cmp	r3, r6
 80073da:	9a08      	ldr	r2, [sp, #32]
 80073dc:	bfa8      	it	ge
 80073de:	4633      	movge	r3, r6
 80073e0:	eba8 0803 	sub.w	r8, r8, r3
 80073e4:	1af6      	subs	r6, r6, r3
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ec:	b1f3      	cbz	r3, 800742c <_dtoa_r+0x78c>
 80073ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80b7 	beq.w	8007564 <_dtoa_r+0x8c4>
 80073f6:	b18c      	cbz	r4, 800741c <_dtoa_r+0x77c>
 80073f8:	4629      	mov	r1, r5
 80073fa:	4622      	mov	r2, r4
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fcc7 	bl	8007d90 <__pow5mult>
 8007402:	464a      	mov	r2, r9
 8007404:	4601      	mov	r1, r0
 8007406:	4605      	mov	r5, r0
 8007408:	4658      	mov	r0, fp
 800740a:	f000 fc17 	bl	8007c3c <__multiply>
 800740e:	4649      	mov	r1, r9
 8007410:	9004      	str	r0, [sp, #16]
 8007412:	4658      	mov	r0, fp
 8007414:	f000 fb48 	bl	8007aa8 <_Bfree>
 8007418:	9b04      	ldr	r3, [sp, #16]
 800741a:	4699      	mov	r9, r3
 800741c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800741e:	1b1a      	subs	r2, r3, r4
 8007420:	d004      	beq.n	800742c <_dtoa_r+0x78c>
 8007422:	4649      	mov	r1, r9
 8007424:	4658      	mov	r0, fp
 8007426:	f000 fcb3 	bl	8007d90 <__pow5mult>
 800742a:	4681      	mov	r9, r0
 800742c:	2101      	movs	r1, #1
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fbee 	bl	8007c10 <__i2b>
 8007434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007436:	4604      	mov	r4, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 81cf 	beq.w	80077dc <_dtoa_r+0xb3c>
 800743e:	461a      	mov	r2, r3
 8007440:	4601      	mov	r1, r0
 8007442:	4658      	mov	r0, fp
 8007444:	f000 fca4 	bl	8007d90 <__pow5mult>
 8007448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744a:	2b01      	cmp	r3, #1
 800744c:	4604      	mov	r4, r0
 800744e:	f300 8095 	bgt.w	800757c <_dtoa_r+0x8dc>
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 8087 	bne.w	8007568 <_dtoa_r+0x8c8>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007460:	2b00      	cmp	r3, #0
 8007462:	f040 8089 	bne.w	8007578 <_dtoa_r+0x8d8>
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800746c:	0d1b      	lsrs	r3, r3, #20
 800746e:	051b      	lsls	r3, r3, #20
 8007470:	b12b      	cbz	r3, 800747e <_dtoa_r+0x7de>
 8007472:	9b08      	ldr	r3, [sp, #32]
 8007474:	3301      	adds	r3, #1
 8007476:	9308      	str	r3, [sp, #32]
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	2301      	movs	r3, #1
 800747e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 81b0 	beq.w	80077e8 <_dtoa_r+0xb48>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800748e:	6918      	ldr	r0, [r3, #16]
 8007490:	f000 fb72 	bl	8007b78 <__hi0bits>
 8007494:	f1c0 0020 	rsb	r0, r0, #32
 8007498:	9b08      	ldr	r3, [sp, #32]
 800749a:	4418      	add	r0, r3
 800749c:	f010 001f 	ands.w	r0, r0, #31
 80074a0:	d077      	beq.n	8007592 <_dtoa_r+0x8f2>
 80074a2:	f1c0 0320 	rsb	r3, r0, #32
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	dd6b      	ble.n	8007582 <_dtoa_r+0x8e2>
 80074aa:	9b08      	ldr	r3, [sp, #32]
 80074ac:	f1c0 001c 	rsb	r0, r0, #28
 80074b0:	4403      	add	r3, r0
 80074b2:	4480      	add	r8, r0
 80074b4:	4406      	add	r6, r0
 80074b6:	9308      	str	r3, [sp, #32]
 80074b8:	f1b8 0f00 	cmp.w	r8, #0
 80074bc:	dd05      	ble.n	80074ca <_dtoa_r+0x82a>
 80074be:	4649      	mov	r1, r9
 80074c0:	4642      	mov	r2, r8
 80074c2:	4658      	mov	r0, fp
 80074c4:	f000 fcbe 	bl	8007e44 <__lshift>
 80074c8:	4681      	mov	r9, r0
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd05      	ble.n	80074dc <_dtoa_r+0x83c>
 80074d0:	4621      	mov	r1, r4
 80074d2:	461a      	mov	r2, r3
 80074d4:	4658      	mov	r0, fp
 80074d6:	f000 fcb5 	bl	8007e44 <__lshift>
 80074da:	4604      	mov	r4, r0
 80074dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d059      	beq.n	8007596 <_dtoa_r+0x8f6>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 fd19 	bl	8007f1c <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	da53      	bge.n	8007596 <_dtoa_r+0x8f6>
 80074ee:	1e7b      	subs	r3, r7, #1
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	4649      	mov	r1, r9
 80074f4:	2300      	movs	r3, #0
 80074f6:	220a      	movs	r2, #10
 80074f8:	4658      	mov	r0, fp
 80074fa:	f000 faf7 	bl	8007aec <__multadd>
 80074fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007500:	4681      	mov	r9, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8172 	beq.w	80077ec <_dtoa_r+0xb4c>
 8007508:	2300      	movs	r3, #0
 800750a:	4629      	mov	r1, r5
 800750c:	220a      	movs	r2, #10
 800750e:	4658      	mov	r0, fp
 8007510:	f000 faec 	bl	8007aec <__multadd>
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	4605      	mov	r5, r0
 800751a:	dc67      	bgt.n	80075ec <_dtoa_r+0x94c>
 800751c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751e:	2b02      	cmp	r3, #2
 8007520:	dc41      	bgt.n	80075a6 <_dtoa_r+0x906>
 8007522:	e063      	b.n	80075ec <_dtoa_r+0x94c>
 8007524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800752a:	e746      	b.n	80073ba <_dtoa_r+0x71a>
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	1e5c      	subs	r4, r3, #1
 8007530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007532:	42a3      	cmp	r3, r4
 8007534:	bfbf      	itttt	lt
 8007536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800753a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800753c:	1ae3      	sublt	r3, r4, r3
 800753e:	bfb4      	ite	lt
 8007540:	18d2      	addlt	r2, r2, r3
 8007542:	1b1c      	subge	r4, r3, r4
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	bfbc      	itt	lt
 8007548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800754a:	2400      	movlt	r4, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	bfb5      	itete	lt
 8007550:	eba8 0603 	sublt.w	r6, r8, r3
 8007554:	9b07      	ldrge	r3, [sp, #28]
 8007556:	2300      	movlt	r3, #0
 8007558:	4646      	movge	r6, r8
 800755a:	e730      	b.n	80073be <_dtoa_r+0x71e>
 800755c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800755e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007560:	4646      	mov	r6, r8
 8007562:	e735      	b.n	80073d0 <_dtoa_r+0x730>
 8007564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007566:	e75c      	b.n	8007422 <_dtoa_r+0x782>
 8007568:	2300      	movs	r3, #0
 800756a:	e788      	b.n	800747e <_dtoa_r+0x7de>
 800756c:	3fe00000 	.word	0x3fe00000
 8007570:	40240000 	.word	0x40240000
 8007574:	40140000 	.word	0x40140000
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	e780      	b.n	800747e <_dtoa_r+0x7de>
 800757c:	2300      	movs	r3, #0
 800757e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007580:	e782      	b.n	8007488 <_dtoa_r+0x7e8>
 8007582:	d099      	beq.n	80074b8 <_dtoa_r+0x818>
 8007584:	9a08      	ldr	r2, [sp, #32]
 8007586:	331c      	adds	r3, #28
 8007588:	441a      	add	r2, r3
 800758a:	4498      	add	r8, r3
 800758c:	441e      	add	r6, r3
 800758e:	9208      	str	r2, [sp, #32]
 8007590:	e792      	b.n	80074b8 <_dtoa_r+0x818>
 8007592:	4603      	mov	r3, r0
 8007594:	e7f6      	b.n	8007584 <_dtoa_r+0x8e4>
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	9704      	str	r7, [sp, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc20      	bgt.n	80075e0 <_dtoa_r+0x940>
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	dd1e      	ble.n	80075e4 <_dtoa_r+0x944>
 80075a6:	9b00      	ldr	r3, [sp, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f47f aec0 	bne.w	800732e <_dtoa_r+0x68e>
 80075ae:	4621      	mov	r1, r4
 80075b0:	2205      	movs	r2, #5
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fa9a 	bl	8007aec <__multadd>
 80075b8:	4601      	mov	r1, r0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4648      	mov	r0, r9
 80075be:	f000 fcad 	bl	8007f1c <__mcmp>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f77f aeb3 	ble.w	800732e <_dtoa_r+0x68e>
 80075c8:	4656      	mov	r6, sl
 80075ca:	2331      	movs	r3, #49	@ 0x31
 80075cc:	f806 3b01 	strb.w	r3, [r6], #1
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	3301      	adds	r3, #1
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	e6ae      	b.n	8007336 <_dtoa_r+0x696>
 80075d8:	9c07      	ldr	r4, [sp, #28]
 80075da:	9704      	str	r7, [sp, #16]
 80075dc:	4625      	mov	r5, r4
 80075de:	e7f3      	b.n	80075c8 <_dtoa_r+0x928>
 80075e0:	9b07      	ldr	r3, [sp, #28]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8104 	beq.w	80077f4 <_dtoa_r+0xb54>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	dd05      	ble.n	80075fc <_dtoa_r+0x95c>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4632      	mov	r2, r6
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fc25 	bl	8007e44 <__lshift>
 80075fa:	4605      	mov	r5, r0
 80075fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d05a      	beq.n	80076b8 <_dtoa_r+0xa18>
 8007602:	6869      	ldr	r1, [r5, #4]
 8007604:	4658      	mov	r0, fp
 8007606:	f000 fa0f 	bl	8007a28 <_Balloc>
 800760a:	4606      	mov	r6, r0
 800760c:	b928      	cbnz	r0, 800761a <_dtoa_r+0x97a>
 800760e:	4b84      	ldr	r3, [pc, #528]	@ (8007820 <_dtoa_r+0xb80>)
 8007610:	4602      	mov	r2, r0
 8007612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007616:	f7ff bb5a 	b.w	8006cce <_dtoa_r+0x2e>
 800761a:	692a      	ldr	r2, [r5, #16]
 800761c:	3202      	adds	r2, #2
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	f105 010c 	add.w	r1, r5, #12
 8007624:	300c      	adds	r0, #12
 8007626:	f000 ffaf 	bl	8008588 <memcpy>
 800762a:	2201      	movs	r2, #1
 800762c:	4631      	mov	r1, r6
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fc08 	bl	8007e44 <__lshift>
 8007634:	f10a 0301 	add.w	r3, sl, #1
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	9b00      	ldr	r3, [sp, #0]
 800763c:	4453      	add	r3, sl
 800763e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	462f      	mov	r7, r5
 8007648:	930a      	str	r3, [sp, #40]	@ 0x28
 800764a:	4605      	mov	r5, r0
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	4621      	mov	r1, r4
 8007650:	3b01      	subs	r3, #1
 8007652:	4648      	mov	r0, r9
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f7ff fa98 	bl	8006b8a <quorem>
 800765a:	4639      	mov	r1, r7
 800765c:	9002      	str	r0, [sp, #8]
 800765e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007662:	4648      	mov	r0, r9
 8007664:	f000 fc5a 	bl	8007f1c <__mcmp>
 8007668:	462a      	mov	r2, r5
 800766a:	9008      	str	r0, [sp, #32]
 800766c:	4621      	mov	r1, r4
 800766e:	4658      	mov	r0, fp
 8007670:	f000 fc70 	bl	8007f54 <__mdiff>
 8007674:	68c2      	ldr	r2, [r0, #12]
 8007676:	4606      	mov	r6, r0
 8007678:	bb02      	cbnz	r2, 80076bc <_dtoa_r+0xa1c>
 800767a:	4601      	mov	r1, r0
 800767c:	4648      	mov	r0, r9
 800767e:	f000 fc4d 	bl	8007f1c <__mcmp>
 8007682:	4602      	mov	r2, r0
 8007684:	4631      	mov	r1, r6
 8007686:	4658      	mov	r0, fp
 8007688:	920e      	str	r2, [sp, #56]	@ 0x38
 800768a:	f000 fa0d 	bl	8007aa8 <_Bfree>
 800768e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007692:	9e07      	ldr	r6, [sp, #28]
 8007694:	ea43 0102 	orr.w	r1, r3, r2
 8007698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769a:	4319      	orrs	r1, r3
 800769c:	d110      	bne.n	80076c0 <_dtoa_r+0xa20>
 800769e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076a2:	d029      	beq.n	80076f8 <_dtoa_r+0xa58>
 80076a4:	9b08      	ldr	r3, [sp, #32]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd02      	ble.n	80076b0 <_dtoa_r+0xa10>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076b0:	9b00      	ldr	r3, [sp, #0]
 80076b2:	f883 8000 	strb.w	r8, [r3]
 80076b6:	e63f      	b.n	8007338 <_dtoa_r+0x698>
 80076b8:	4628      	mov	r0, r5
 80076ba:	e7bb      	b.n	8007634 <_dtoa_r+0x994>
 80076bc:	2201      	movs	r2, #1
 80076be:	e7e1      	b.n	8007684 <_dtoa_r+0x9e4>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	db04      	blt.n	80076d0 <_dtoa_r+0xa30>
 80076c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076c8:	430b      	orrs	r3, r1
 80076ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076cc:	430b      	orrs	r3, r1
 80076ce:	d120      	bne.n	8007712 <_dtoa_r+0xa72>
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	dded      	ble.n	80076b0 <_dtoa_r+0xa10>
 80076d4:	4649      	mov	r1, r9
 80076d6:	2201      	movs	r2, #1
 80076d8:	4658      	mov	r0, fp
 80076da:	f000 fbb3 	bl	8007e44 <__lshift>
 80076de:	4621      	mov	r1, r4
 80076e0:	4681      	mov	r9, r0
 80076e2:	f000 fc1b 	bl	8007f1c <__mcmp>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	dc03      	bgt.n	80076f2 <_dtoa_r+0xa52>
 80076ea:	d1e1      	bne.n	80076b0 <_dtoa_r+0xa10>
 80076ec:	f018 0f01 	tst.w	r8, #1
 80076f0:	d0de      	beq.n	80076b0 <_dtoa_r+0xa10>
 80076f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076f6:	d1d8      	bne.n	80076aa <_dtoa_r+0xa0a>
 80076f8:	9a00      	ldr	r2, [sp, #0]
 80076fa:	2339      	movs	r3, #57	@ 0x39
 80076fc:	7013      	strb	r3, [r2, #0]
 80076fe:	4633      	mov	r3, r6
 8007700:	461e      	mov	r6, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007708:	2a39      	cmp	r2, #57	@ 0x39
 800770a:	d052      	beq.n	80077b2 <_dtoa_r+0xb12>
 800770c:	3201      	adds	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e612      	b.n	8007338 <_dtoa_r+0x698>
 8007712:	2a00      	cmp	r2, #0
 8007714:	dd07      	ble.n	8007726 <_dtoa_r+0xa86>
 8007716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800771a:	d0ed      	beq.n	80076f8 <_dtoa_r+0xa58>
 800771c:	9a00      	ldr	r2, [sp, #0]
 800771e:	f108 0301 	add.w	r3, r8, #1
 8007722:	7013      	strb	r3, [r2, #0]
 8007724:	e608      	b.n	8007338 <_dtoa_r+0x698>
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	9a07      	ldr	r2, [sp, #28]
 800772a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800772e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007730:	4293      	cmp	r3, r2
 8007732:	d028      	beq.n	8007786 <_dtoa_r+0xae6>
 8007734:	4649      	mov	r1, r9
 8007736:	2300      	movs	r3, #0
 8007738:	220a      	movs	r2, #10
 800773a:	4658      	mov	r0, fp
 800773c:	f000 f9d6 	bl	8007aec <__multadd>
 8007740:	42af      	cmp	r7, r5
 8007742:	4681      	mov	r9, r0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	f04f 020a 	mov.w	r2, #10
 800774c:	4639      	mov	r1, r7
 800774e:	4658      	mov	r0, fp
 8007750:	d107      	bne.n	8007762 <_dtoa_r+0xac2>
 8007752:	f000 f9cb 	bl	8007aec <__multadd>
 8007756:	4607      	mov	r7, r0
 8007758:	4605      	mov	r5, r0
 800775a:	9b07      	ldr	r3, [sp, #28]
 800775c:	3301      	adds	r3, #1
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	e774      	b.n	800764c <_dtoa_r+0x9ac>
 8007762:	f000 f9c3 	bl	8007aec <__multadd>
 8007766:	4629      	mov	r1, r5
 8007768:	4607      	mov	r7, r0
 800776a:	2300      	movs	r3, #0
 800776c:	220a      	movs	r2, #10
 800776e:	4658      	mov	r0, fp
 8007770:	f000 f9bc 	bl	8007aec <__multadd>
 8007774:	4605      	mov	r5, r0
 8007776:	e7f0      	b.n	800775a <_dtoa_r+0xaba>
 8007778:	9b00      	ldr	r3, [sp, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	bfcc      	ite	gt
 800777e:	461e      	movgt	r6, r3
 8007780:	2601      	movle	r6, #1
 8007782:	4456      	add	r6, sl
 8007784:	2700      	movs	r7, #0
 8007786:	4649      	mov	r1, r9
 8007788:	2201      	movs	r2, #1
 800778a:	4658      	mov	r0, fp
 800778c:	f000 fb5a 	bl	8007e44 <__lshift>
 8007790:	4621      	mov	r1, r4
 8007792:	4681      	mov	r9, r0
 8007794:	f000 fbc2 	bl	8007f1c <__mcmp>
 8007798:	2800      	cmp	r0, #0
 800779a:	dcb0      	bgt.n	80076fe <_dtoa_r+0xa5e>
 800779c:	d102      	bne.n	80077a4 <_dtoa_r+0xb04>
 800779e:	f018 0f01 	tst.w	r8, #1
 80077a2:	d1ac      	bne.n	80076fe <_dtoa_r+0xa5e>
 80077a4:	4633      	mov	r3, r6
 80077a6:	461e      	mov	r6, r3
 80077a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ac:	2a30      	cmp	r2, #48	@ 0x30
 80077ae:	d0fa      	beq.n	80077a6 <_dtoa_r+0xb06>
 80077b0:	e5c2      	b.n	8007338 <_dtoa_r+0x698>
 80077b2:	459a      	cmp	sl, r3
 80077b4:	d1a4      	bne.n	8007700 <_dtoa_r+0xa60>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	3301      	adds	r3, #1
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	2331      	movs	r3, #49	@ 0x31
 80077be:	f88a 3000 	strb.w	r3, [sl]
 80077c2:	e5b9      	b.n	8007338 <_dtoa_r+0x698>
 80077c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007824 <_dtoa_r+0xb84>
 80077ca:	b11b      	cbz	r3, 80077d4 <_dtoa_r+0xb34>
 80077cc:	f10a 0308 	add.w	r3, sl, #8
 80077d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4650      	mov	r0, sl
 80077d6:	b019      	add	sp, #100	@ 0x64
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077de:	2b01      	cmp	r3, #1
 80077e0:	f77f ae37 	ble.w	8007452 <_dtoa_r+0x7b2>
 80077e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077e8:	2001      	movs	r0, #1
 80077ea:	e655      	b.n	8007498 <_dtoa_r+0x7f8>
 80077ec:	9b00      	ldr	r3, [sp, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f77f aed6 	ble.w	80075a0 <_dtoa_r+0x900>
 80077f4:	4656      	mov	r6, sl
 80077f6:	4621      	mov	r1, r4
 80077f8:	4648      	mov	r0, r9
 80077fa:	f7ff f9c6 	bl	8006b8a <quorem>
 80077fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007802:	f806 8b01 	strb.w	r8, [r6], #1
 8007806:	9b00      	ldr	r3, [sp, #0]
 8007808:	eba6 020a 	sub.w	r2, r6, sl
 800780c:	4293      	cmp	r3, r2
 800780e:	ddb3      	ble.n	8007778 <_dtoa_r+0xad8>
 8007810:	4649      	mov	r1, r9
 8007812:	2300      	movs	r3, #0
 8007814:	220a      	movs	r2, #10
 8007816:	4658      	mov	r0, fp
 8007818:	f000 f968 	bl	8007aec <__multadd>
 800781c:	4681      	mov	r9, r0
 800781e:	e7ea      	b.n	80077f6 <_dtoa_r+0xb56>
 8007820:	08008f15 	.word	0x08008f15
 8007824:	08008e99 	.word	0x08008e99

08007828 <_free_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4605      	mov	r5, r0
 800782c:	2900      	cmp	r1, #0
 800782e:	d041      	beq.n	80078b4 <_free_r+0x8c>
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f0c      	subs	r4, r1, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfb8      	it	lt
 800783a:	18e4      	addlt	r4, r4, r3
 800783c:	f000 f8e8 	bl	8007a10 <__malloc_lock>
 8007840:	4a1d      	ldr	r2, [pc, #116]	@ (80078b8 <_free_r+0x90>)
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	b933      	cbnz	r3, 8007854 <_free_r+0x2c>
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	6014      	str	r4, [r2, #0]
 800784a:	4628      	mov	r0, r5
 800784c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007850:	f000 b8e4 	b.w	8007a1c <__malloc_unlock>
 8007854:	42a3      	cmp	r3, r4
 8007856:	d908      	bls.n	800786a <_free_r+0x42>
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	1821      	adds	r1, r4, r0
 800785c:	428b      	cmp	r3, r1
 800785e:	bf01      	itttt	eq
 8007860:	6819      	ldreq	r1, [r3, #0]
 8007862:	685b      	ldreq	r3, [r3, #4]
 8007864:	1809      	addeq	r1, r1, r0
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	e7ed      	b.n	8007846 <_free_r+0x1e>
 800786a:	461a      	mov	r2, r3
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b10b      	cbz	r3, 8007874 <_free_r+0x4c>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d9fa      	bls.n	800786a <_free_r+0x42>
 8007874:	6811      	ldr	r1, [r2, #0]
 8007876:	1850      	adds	r0, r2, r1
 8007878:	42a0      	cmp	r0, r4
 800787a:	d10b      	bne.n	8007894 <_free_r+0x6c>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	4401      	add	r1, r0
 8007880:	1850      	adds	r0, r2, r1
 8007882:	4283      	cmp	r3, r0
 8007884:	6011      	str	r1, [r2, #0]
 8007886:	d1e0      	bne.n	800784a <_free_r+0x22>
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	6053      	str	r3, [r2, #4]
 800788e:	4408      	add	r0, r1
 8007890:	6010      	str	r0, [r2, #0]
 8007892:	e7da      	b.n	800784a <_free_r+0x22>
 8007894:	d902      	bls.n	800789c <_free_r+0x74>
 8007896:	230c      	movs	r3, #12
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	e7d6      	b.n	800784a <_free_r+0x22>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	1821      	adds	r1, r4, r0
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf04      	itt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	bf04      	itt	eq
 80078ac:	1809      	addeq	r1, r1, r0
 80078ae:	6021      	streq	r1, [r4, #0]
 80078b0:	6054      	str	r4, [r2, #4]
 80078b2:	e7ca      	b.n	800784a <_free_r+0x22>
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000558 	.word	0x20000558

080078bc <malloc>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	@ (80078c8 <malloc+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f000 b825 	b.w	8007910 <_malloc_r>
 80078c6:	bf00      	nop
 80078c8:	2000001c 	.word	0x2000001c

080078cc <sbrk_aligned>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4e0f      	ldr	r6, [pc, #60]	@ (800790c <sbrk_aligned+0x40>)
 80078d0:	460c      	mov	r4, r1
 80078d2:	6831      	ldr	r1, [r6, #0]
 80078d4:	4605      	mov	r5, r0
 80078d6:	b911      	cbnz	r1, 80078de <sbrk_aligned+0x12>
 80078d8:	f000 fe46 	bl	8008568 <_sbrk_r>
 80078dc:	6030      	str	r0, [r6, #0]
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 fe41 	bl	8008568 <_sbrk_r>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d103      	bne.n	80078f2 <sbrk_aligned+0x26>
 80078ea:	f04f 34ff 	mov.w	r4, #4294967295
 80078ee:	4620      	mov	r0, r4
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	1cc4      	adds	r4, r0, #3
 80078f4:	f024 0403 	bic.w	r4, r4, #3
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d0f8      	beq.n	80078ee <sbrk_aligned+0x22>
 80078fc:	1a21      	subs	r1, r4, r0
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 fe32 	bl	8008568 <_sbrk_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d1f2      	bne.n	80078ee <sbrk_aligned+0x22>
 8007908:	e7ef      	b.n	80078ea <sbrk_aligned+0x1e>
 800790a:	bf00      	nop
 800790c:	20000554 	.word	0x20000554

08007910 <_malloc_r>:
 8007910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007914:	1ccd      	adds	r5, r1, #3
 8007916:	f025 0503 	bic.w	r5, r5, #3
 800791a:	3508      	adds	r5, #8
 800791c:	2d0c      	cmp	r5, #12
 800791e:	bf38      	it	cc
 8007920:	250c      	movcc	r5, #12
 8007922:	2d00      	cmp	r5, #0
 8007924:	4606      	mov	r6, r0
 8007926:	db01      	blt.n	800792c <_malloc_r+0x1c>
 8007928:	42a9      	cmp	r1, r5
 800792a:	d904      	bls.n	8007936 <_malloc_r+0x26>
 800792c:	230c      	movs	r3, #12
 800792e:	6033      	str	r3, [r6, #0]
 8007930:	2000      	movs	r0, #0
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a0c <_malloc_r+0xfc>
 800793a:	f000 f869 	bl	8007a10 <__malloc_lock>
 800793e:	f8d8 3000 	ldr.w	r3, [r8]
 8007942:	461c      	mov	r4, r3
 8007944:	bb44      	cbnz	r4, 8007998 <_malloc_r+0x88>
 8007946:	4629      	mov	r1, r5
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff ffbf 	bl	80078cc <sbrk_aligned>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	4604      	mov	r4, r0
 8007952:	d158      	bne.n	8007a06 <_malloc_r+0xf6>
 8007954:	f8d8 4000 	ldr.w	r4, [r8]
 8007958:	4627      	mov	r7, r4
 800795a:	2f00      	cmp	r7, #0
 800795c:	d143      	bne.n	80079e6 <_malloc_r+0xd6>
 800795e:	2c00      	cmp	r4, #0
 8007960:	d04b      	beq.n	80079fa <_malloc_r+0xea>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	4639      	mov	r1, r7
 8007966:	4630      	mov	r0, r6
 8007968:	eb04 0903 	add.w	r9, r4, r3
 800796c:	f000 fdfc 	bl	8008568 <_sbrk_r>
 8007970:	4581      	cmp	r9, r0
 8007972:	d142      	bne.n	80079fa <_malloc_r+0xea>
 8007974:	6821      	ldr	r1, [r4, #0]
 8007976:	1a6d      	subs	r5, r5, r1
 8007978:	4629      	mov	r1, r5
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffa6 	bl	80078cc <sbrk_aligned>
 8007980:	3001      	adds	r0, #1
 8007982:	d03a      	beq.n	80079fa <_malloc_r+0xea>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	442b      	add	r3, r5
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	f8d8 3000 	ldr.w	r3, [r8]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	bb62      	cbnz	r2, 80079ec <_malloc_r+0xdc>
 8007992:	f8c8 7000 	str.w	r7, [r8]
 8007996:	e00f      	b.n	80079b8 <_malloc_r+0xa8>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	1b52      	subs	r2, r2, r5
 800799c:	d420      	bmi.n	80079e0 <_malloc_r+0xd0>
 800799e:	2a0b      	cmp	r2, #11
 80079a0:	d917      	bls.n	80079d2 <_malloc_r+0xc2>
 80079a2:	1961      	adds	r1, r4, r5
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	6025      	str	r5, [r4, #0]
 80079a8:	bf18      	it	ne
 80079aa:	6059      	strne	r1, [r3, #4]
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	bf08      	it	eq
 80079b0:	f8c8 1000 	streq.w	r1, [r8]
 80079b4:	5162      	str	r2, [r4, r5]
 80079b6:	604b      	str	r3, [r1, #4]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f82f 	bl	8007a1c <__malloc_unlock>
 80079be:	f104 000b 	add.w	r0, r4, #11
 80079c2:	1d23      	adds	r3, r4, #4
 80079c4:	f020 0007 	bic.w	r0, r0, #7
 80079c8:	1ac2      	subs	r2, r0, r3
 80079ca:	bf1c      	itt	ne
 80079cc:	1a1b      	subne	r3, r3, r0
 80079ce:	50a3      	strne	r3, [r4, r2]
 80079d0:	e7af      	b.n	8007932 <_malloc_r+0x22>
 80079d2:	6862      	ldr	r2, [r4, #4]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	bf0c      	ite	eq
 80079d8:	f8c8 2000 	streq.w	r2, [r8]
 80079dc:	605a      	strne	r2, [r3, #4]
 80079de:	e7eb      	b.n	80079b8 <_malloc_r+0xa8>
 80079e0:	4623      	mov	r3, r4
 80079e2:	6864      	ldr	r4, [r4, #4]
 80079e4:	e7ae      	b.n	8007944 <_malloc_r+0x34>
 80079e6:	463c      	mov	r4, r7
 80079e8:	687f      	ldr	r7, [r7, #4]
 80079ea:	e7b6      	b.n	800795a <_malloc_r+0x4a>
 80079ec:	461a      	mov	r2, r3
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d1fb      	bne.n	80079ec <_malloc_r+0xdc>
 80079f4:	2300      	movs	r3, #0
 80079f6:	6053      	str	r3, [r2, #4]
 80079f8:	e7de      	b.n	80079b8 <_malloc_r+0xa8>
 80079fa:	230c      	movs	r3, #12
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 f80c 	bl	8007a1c <__malloc_unlock>
 8007a04:	e794      	b.n	8007930 <_malloc_r+0x20>
 8007a06:	6005      	str	r5, [r0, #0]
 8007a08:	e7d6      	b.n	80079b8 <_malloc_r+0xa8>
 8007a0a:	bf00      	nop
 8007a0c:	20000558 	.word	0x20000558

08007a10 <__malloc_lock>:
 8007a10:	4801      	ldr	r0, [pc, #4]	@ (8007a18 <__malloc_lock+0x8>)
 8007a12:	f7ff b8b8 	b.w	8006b86 <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	20000550 	.word	0x20000550

08007a1c <__malloc_unlock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__malloc_unlock+0x8>)
 8007a1e:	f7ff b8b3 	b.w	8006b88 <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	20000550 	.word	0x20000550

08007a28 <_Balloc>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	69c6      	ldr	r6, [r0, #28]
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	460d      	mov	r5, r1
 8007a30:	b976      	cbnz	r6, 8007a50 <_Balloc+0x28>
 8007a32:	2010      	movs	r0, #16
 8007a34:	f7ff ff42 	bl	80078bc <malloc>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	61e0      	str	r0, [r4, #28]
 8007a3c:	b920      	cbnz	r0, 8007a48 <_Balloc+0x20>
 8007a3e:	4b18      	ldr	r3, [pc, #96]	@ (8007aa0 <_Balloc+0x78>)
 8007a40:	4818      	ldr	r0, [pc, #96]	@ (8007aa4 <_Balloc+0x7c>)
 8007a42:	216b      	movs	r1, #107	@ 0x6b
 8007a44:	f000 fdae 	bl	80085a4 <__assert_func>
 8007a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a4c:	6006      	str	r6, [r0, #0]
 8007a4e:	60c6      	str	r6, [r0, #12]
 8007a50:	69e6      	ldr	r6, [r4, #28]
 8007a52:	68f3      	ldr	r3, [r6, #12]
 8007a54:	b183      	cbz	r3, 8007a78 <_Balloc+0x50>
 8007a56:	69e3      	ldr	r3, [r4, #28]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a5e:	b9b8      	cbnz	r0, 8007a90 <_Balloc+0x68>
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f605 	lsl.w	r6, r1, r5
 8007a66:	1d72      	adds	r2, r6, #5
 8007a68:	0092      	lsls	r2, r2, #2
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fdb8 	bl	80085e0 <_calloc_r>
 8007a70:	b160      	cbz	r0, 8007a8c <_Balloc+0x64>
 8007a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a76:	e00e      	b.n	8007a96 <_Balloc+0x6e>
 8007a78:	2221      	movs	r2, #33	@ 0x21
 8007a7a:	2104      	movs	r1, #4
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fdaf 	bl	80085e0 <_calloc_r>
 8007a82:	69e3      	ldr	r3, [r4, #28]
 8007a84:	60f0      	str	r0, [r6, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e4      	bne.n	8007a56 <_Balloc+0x2e>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	6802      	ldr	r2, [r0, #0]
 8007a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a96:	2300      	movs	r3, #0
 8007a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a9c:	e7f7      	b.n	8007a8e <_Balloc+0x66>
 8007a9e:	bf00      	nop
 8007aa0:	08008ea6 	.word	0x08008ea6
 8007aa4:	08008f26 	.word	0x08008f26

08007aa8 <_Bfree>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	69c6      	ldr	r6, [r0, #28]
 8007aac:	4605      	mov	r5, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	b976      	cbnz	r6, 8007ad0 <_Bfree+0x28>
 8007ab2:	2010      	movs	r0, #16
 8007ab4:	f7ff ff02 	bl	80078bc <malloc>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	61e8      	str	r0, [r5, #28]
 8007abc:	b920      	cbnz	r0, 8007ac8 <_Bfree+0x20>
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <_Bfree+0x3c>)
 8007ac0:	4809      	ldr	r0, [pc, #36]	@ (8007ae8 <_Bfree+0x40>)
 8007ac2:	218f      	movs	r1, #143	@ 0x8f
 8007ac4:	f000 fd6e 	bl	80085a4 <__assert_func>
 8007ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007acc:	6006      	str	r6, [r0, #0]
 8007ace:	60c6      	str	r6, [r0, #12]
 8007ad0:	b13c      	cbz	r4, 8007ae2 <_Bfree+0x3a>
 8007ad2:	69eb      	ldr	r3, [r5, #28]
 8007ad4:	6862      	ldr	r2, [r4, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007adc:	6021      	str	r1, [r4, #0]
 8007ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	08008ea6 	.word	0x08008ea6
 8007ae8:	08008f26 	.word	0x08008f26

08007aec <__multadd>:
 8007aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	690d      	ldr	r5, [r1, #16]
 8007af2:	4607      	mov	r7, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	461e      	mov	r6, r3
 8007af8:	f101 0c14 	add.w	ip, r1, #20
 8007afc:	2000      	movs	r0, #0
 8007afe:	f8dc 3000 	ldr.w	r3, [ip]
 8007b02:	b299      	uxth	r1, r3
 8007b04:	fb02 6101 	mla	r1, r2, r1, r6
 8007b08:	0c1e      	lsrs	r6, r3, #16
 8007b0a:	0c0b      	lsrs	r3, r1, #16
 8007b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b10:	b289      	uxth	r1, r1
 8007b12:	3001      	adds	r0, #1
 8007b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b18:	4285      	cmp	r5, r0
 8007b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b22:	dcec      	bgt.n	8007afe <__multadd+0x12>
 8007b24:	b30e      	cbz	r6, 8007b6a <__multadd+0x7e>
 8007b26:	68a3      	ldr	r3, [r4, #8]
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	dc19      	bgt.n	8007b60 <__multadd+0x74>
 8007b2c:	6861      	ldr	r1, [r4, #4]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	3101      	adds	r1, #1
 8007b32:	f7ff ff79 	bl	8007a28 <_Balloc>
 8007b36:	4680      	mov	r8, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__multadd+0x5a>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <__multadd+0x84>)
 8007b3e:	480d      	ldr	r0, [pc, #52]	@ (8007b74 <__multadd+0x88>)
 8007b40:	21ba      	movs	r1, #186	@ 0xba
 8007b42:	f000 fd2f 	bl	80085a4 <__assert_func>
 8007b46:	6922      	ldr	r2, [r4, #16]
 8007b48:	3202      	adds	r2, #2
 8007b4a:	f104 010c 	add.w	r1, r4, #12
 8007b4e:	0092      	lsls	r2, r2, #2
 8007b50:	300c      	adds	r0, #12
 8007b52:	f000 fd19 	bl	8008588 <memcpy>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff ffa5 	bl	8007aa8 <_Bfree>
 8007b5e:	4644      	mov	r4, r8
 8007b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b64:	3501      	adds	r5, #1
 8007b66:	615e      	str	r6, [r3, #20]
 8007b68:	6125      	str	r5, [r4, #16]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	08008f15 	.word	0x08008f15
 8007b74:	08008f26 	.word	0x08008f26

08007b78 <__hi0bits>:
 8007b78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	bf36      	itet	cc
 8007b80:	0403      	lslcc	r3, r0, #16
 8007b82:	2000      	movcs	r0, #0
 8007b84:	2010      	movcc	r0, #16
 8007b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b8a:	bf3c      	itt	cc
 8007b8c:	021b      	lslcc	r3, r3, #8
 8007b8e:	3008      	addcc	r0, #8
 8007b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b94:	bf3c      	itt	cc
 8007b96:	011b      	lslcc	r3, r3, #4
 8007b98:	3004      	addcc	r0, #4
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9e:	bf3c      	itt	cc
 8007ba0:	009b      	lslcc	r3, r3, #2
 8007ba2:	3002      	addcc	r0, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	db05      	blt.n	8007bb4 <__hi0bits+0x3c>
 8007ba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bac:	f100 0001 	add.w	r0, r0, #1
 8007bb0:	bf08      	it	eq
 8007bb2:	2020      	moveq	r0, #32
 8007bb4:	4770      	bx	lr

08007bb6 <__lo0bits>:
 8007bb6:	6803      	ldr	r3, [r0, #0]
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f013 0007 	ands.w	r0, r3, #7
 8007bbe:	d00b      	beq.n	8007bd8 <__lo0bits+0x22>
 8007bc0:	07d9      	lsls	r1, r3, #31
 8007bc2:	d421      	bmi.n	8007c08 <__lo0bits+0x52>
 8007bc4:	0798      	lsls	r0, r3, #30
 8007bc6:	bf49      	itett	mi
 8007bc8:	085b      	lsrmi	r3, r3, #1
 8007bca:	089b      	lsrpl	r3, r3, #2
 8007bcc:	2001      	movmi	r0, #1
 8007bce:	6013      	strmi	r3, [r2, #0]
 8007bd0:	bf5c      	itt	pl
 8007bd2:	6013      	strpl	r3, [r2, #0]
 8007bd4:	2002      	movpl	r0, #2
 8007bd6:	4770      	bx	lr
 8007bd8:	b299      	uxth	r1, r3
 8007bda:	b909      	cbnz	r1, 8007be0 <__lo0bits+0x2a>
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	2010      	movs	r0, #16
 8007be0:	b2d9      	uxtb	r1, r3
 8007be2:	b909      	cbnz	r1, 8007be8 <__lo0bits+0x32>
 8007be4:	3008      	adds	r0, #8
 8007be6:	0a1b      	lsrs	r3, r3, #8
 8007be8:	0719      	lsls	r1, r3, #28
 8007bea:	bf04      	itt	eq
 8007bec:	091b      	lsreq	r3, r3, #4
 8007bee:	3004      	addeq	r0, #4
 8007bf0:	0799      	lsls	r1, r3, #30
 8007bf2:	bf04      	itt	eq
 8007bf4:	089b      	lsreq	r3, r3, #2
 8007bf6:	3002      	addeq	r0, #2
 8007bf8:	07d9      	lsls	r1, r3, #31
 8007bfa:	d403      	bmi.n	8007c04 <__lo0bits+0x4e>
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	f100 0001 	add.w	r0, r0, #1
 8007c02:	d003      	beq.n	8007c0c <__lo0bits+0x56>
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4770      	bx	lr
 8007c08:	2000      	movs	r0, #0
 8007c0a:	4770      	bx	lr
 8007c0c:	2020      	movs	r0, #32
 8007c0e:	4770      	bx	lr

08007c10 <__i2b>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	460c      	mov	r4, r1
 8007c14:	2101      	movs	r1, #1
 8007c16:	f7ff ff07 	bl	8007a28 <_Balloc>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	b928      	cbnz	r0, 8007c2a <__i2b+0x1a>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	@ (8007c34 <__i2b+0x24>)
 8007c20:	4805      	ldr	r0, [pc, #20]	@ (8007c38 <__i2b+0x28>)
 8007c22:	f240 1145 	movw	r1, #325	@ 0x145
 8007c26:	f000 fcbd 	bl	80085a4 <__assert_func>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	6144      	str	r4, [r0, #20]
 8007c2e:	6103      	str	r3, [r0, #16]
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	08008f15 	.word	0x08008f15
 8007c38:	08008f26 	.word	0x08008f26

08007c3c <__multiply>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4614      	mov	r4, r2
 8007c42:	690a      	ldr	r2, [r1, #16]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bfa8      	it	ge
 8007c4a:	4623      	movge	r3, r4
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	bfa4      	itt	ge
 8007c50:	460c      	movge	r4, r1
 8007c52:	461f      	movge	r7, r3
 8007c54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	eb0a 0609 	add.w	r6, sl, r9
 8007c64:	42b3      	cmp	r3, r6
 8007c66:	b085      	sub	sp, #20
 8007c68:	bfb8      	it	lt
 8007c6a:	3101      	addlt	r1, #1
 8007c6c:	f7ff fedc 	bl	8007a28 <_Balloc>
 8007c70:	b930      	cbnz	r0, 8007c80 <__multiply+0x44>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4b44      	ldr	r3, [pc, #272]	@ (8007d88 <__multiply+0x14c>)
 8007c76:	4845      	ldr	r0, [pc, #276]	@ (8007d8c <__multiply+0x150>)
 8007c78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c7c:	f000 fc92 	bl	80085a4 <__assert_func>
 8007c80:	f100 0514 	add.w	r5, r0, #20
 8007c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c88:	462b      	mov	r3, r5
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4543      	cmp	r3, r8
 8007c8e:	d321      	bcc.n	8007cd4 <__multiply+0x98>
 8007c90:	f107 0114 	add.w	r1, r7, #20
 8007c94:	f104 0214 	add.w	r2, r4, #20
 8007c98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ca0:	9302      	str	r3, [sp, #8]
 8007ca2:	1b13      	subs	r3, r2, r4
 8007ca4:	3b15      	subs	r3, #21
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	3304      	adds	r3, #4
 8007cac:	f104 0715 	add.w	r7, r4, #21
 8007cb0:	42ba      	cmp	r2, r7
 8007cb2:	bf38      	it	cc
 8007cb4:	2304      	movcc	r3, #4
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	9103      	str	r1, [sp, #12]
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	d80c      	bhi.n	8007cda <__multiply+0x9e>
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	dd03      	ble.n	8007ccc <__multiply+0x90>
 8007cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05b      	beq.n	8007d84 <__multiply+0x148>
 8007ccc:	6106      	str	r6, [r0, #16]
 8007cce:	b005      	add	sp, #20
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	f843 2b04 	str.w	r2, [r3], #4
 8007cd8:	e7d8      	b.n	8007c8c <__multiply+0x50>
 8007cda:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cde:	f1ba 0f00 	cmp.w	sl, #0
 8007ce2:	d024      	beq.n	8007d2e <__multiply+0xf2>
 8007ce4:	f104 0e14 	add.w	lr, r4, #20
 8007ce8:	46a9      	mov	r9, r5
 8007cea:	f04f 0c00 	mov.w	ip, #0
 8007cee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cf2:	f8d9 3000 	ldr.w	r3, [r9]
 8007cf6:	fa1f fb87 	uxth.w	fp, r7
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d04:	f8d9 7000 	ldr.w	r7, [r9]
 8007d08:	4463      	add	r3, ip
 8007d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d1c:	4572      	cmp	r2, lr
 8007d1e:	f849 3b04 	str.w	r3, [r9], #4
 8007d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d26:	d8e2      	bhi.n	8007cee <__multiply+0xb2>
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	f845 c003 	str.w	ip, [r5, r3]
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d34:	3104      	adds	r1, #4
 8007d36:	f1b9 0f00 	cmp.w	r9, #0
 8007d3a:	d021      	beq.n	8007d80 <__multiply+0x144>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	f104 0c14 	add.w	ip, r4, #20
 8007d42:	46ae      	mov	lr, r5
 8007d44:	f04f 0a00 	mov.w	sl, #0
 8007d48:	f8bc b000 	ldrh.w	fp, [ip]
 8007d4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d50:	fb09 770b 	mla	r7, r9, fp, r7
 8007d54:	4457      	add	r7, sl
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d5c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d68:	f8be 3000 	ldrh.w	r3, [lr]
 8007d6c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d74:	4562      	cmp	r2, ip
 8007d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d7a:	d8e5      	bhi.n	8007d48 <__multiply+0x10c>
 8007d7c:	9f01      	ldr	r7, [sp, #4]
 8007d7e:	51eb      	str	r3, [r5, r7]
 8007d80:	3504      	adds	r5, #4
 8007d82:	e799      	b.n	8007cb8 <__multiply+0x7c>
 8007d84:	3e01      	subs	r6, #1
 8007d86:	e79b      	b.n	8007cc0 <__multiply+0x84>
 8007d88:	08008f15 	.word	0x08008f15
 8007d8c:	08008f26 	.word	0x08008f26

08007d90 <__pow5mult>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4615      	mov	r5, r2
 8007d96:	f012 0203 	ands.w	r2, r2, #3
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	460e      	mov	r6, r1
 8007d9e:	d007      	beq.n	8007db0 <__pow5mult+0x20>
 8007da0:	4c25      	ldr	r4, [pc, #148]	@ (8007e38 <__pow5mult+0xa8>)
 8007da2:	3a01      	subs	r2, #1
 8007da4:	2300      	movs	r3, #0
 8007da6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007daa:	f7ff fe9f 	bl	8007aec <__multadd>
 8007dae:	4606      	mov	r6, r0
 8007db0:	10ad      	asrs	r5, r5, #2
 8007db2:	d03d      	beq.n	8007e30 <__pow5mult+0xa0>
 8007db4:	69fc      	ldr	r4, [r7, #28]
 8007db6:	b97c      	cbnz	r4, 8007dd8 <__pow5mult+0x48>
 8007db8:	2010      	movs	r0, #16
 8007dba:	f7ff fd7f 	bl	80078bc <malloc>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	61f8      	str	r0, [r7, #28]
 8007dc2:	b928      	cbnz	r0, 8007dd0 <__pow5mult+0x40>
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <__pow5mult+0xac>)
 8007dc6:	481e      	ldr	r0, [pc, #120]	@ (8007e40 <__pow5mult+0xb0>)
 8007dc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007dcc:	f000 fbea 	bl	80085a4 <__assert_func>
 8007dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dd4:	6004      	str	r4, [r0, #0]
 8007dd6:	60c4      	str	r4, [r0, #12]
 8007dd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de0:	b94c      	cbnz	r4, 8007df6 <__pow5mult+0x66>
 8007de2:	f240 2171 	movw	r1, #625	@ 0x271
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7ff ff12 	bl	8007c10 <__i2b>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007df2:	4604      	mov	r4, r0
 8007df4:	6003      	str	r3, [r0, #0]
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	07eb      	lsls	r3, r5, #31
 8007dfc:	d50a      	bpl.n	8007e14 <__pow5mult+0x84>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4622      	mov	r2, r4
 8007e02:	4638      	mov	r0, r7
 8007e04:	f7ff ff1a 	bl	8007c3c <__multiply>
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff fe4b 	bl	8007aa8 <_Bfree>
 8007e12:	4646      	mov	r6, r8
 8007e14:	106d      	asrs	r5, r5, #1
 8007e16:	d00b      	beq.n	8007e30 <__pow5mult+0xa0>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	b938      	cbnz	r0, 8007e2c <__pow5mult+0x9c>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7ff ff0b 	bl	8007c3c <__multiply>
 8007e26:	6020      	str	r0, [r4, #0]
 8007e28:	f8c0 9000 	str.w	r9, [r0]
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	e7e4      	b.n	8007dfa <__pow5mult+0x6a>
 8007e30:	4630      	mov	r0, r6
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	bf00      	nop
 8007e38:	08008f80 	.word	0x08008f80
 8007e3c:	08008ea6 	.word	0x08008ea6
 8007e40:	08008f26 	.word	0x08008f26

08007e44 <__lshift>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6849      	ldr	r1, [r1, #4]
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	4607      	mov	r7, r0
 8007e56:	4691      	mov	r9, r2
 8007e58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e5c:	f108 0601 	add.w	r6, r8, #1
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	db0b      	blt.n	8007e7c <__lshift+0x38>
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff fddf 	bl	8007a28 <_Balloc>
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b948      	cbnz	r0, 8007e82 <__lshift+0x3e>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <__lshift+0xd0>)
 8007e72:	4829      	ldr	r0, [pc, #164]	@ (8007f18 <__lshift+0xd4>)
 8007e74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e78:	f000 fb94 	bl	80085a4 <__assert_func>
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	e7ee      	b.n	8007e60 <__lshift+0x1c>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f100 0114 	add.w	r1, r0, #20
 8007e88:	f100 0210 	add.w	r2, r0, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	4553      	cmp	r3, sl
 8007e90:	db33      	blt.n	8007efa <__lshift+0xb6>
 8007e92:	6920      	ldr	r0, [r4, #16]
 8007e94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	f019 091f 	ands.w	r9, r9, #31
 8007ea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ea8:	d02b      	beq.n	8007f02 <__lshift+0xbe>
 8007eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8007eae:	468a      	mov	sl, r1
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	fa00 f009 	lsl.w	r0, r0, r9
 8007eb8:	4310      	orrs	r0, r2
 8007eba:	f84a 0b04 	str.w	r0, [sl], #4
 8007ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec2:	459c      	cmp	ip, r3
 8007ec4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ec8:	d8f3      	bhi.n	8007eb2 <__lshift+0x6e>
 8007eca:	ebac 0304 	sub.w	r3, ip, r4
 8007ece:	3b15      	subs	r3, #21
 8007ed0:	f023 0303 	bic.w	r3, r3, #3
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	f104 0015 	add.w	r0, r4, #21
 8007eda:	4584      	cmp	ip, r0
 8007edc:	bf38      	it	cc
 8007ede:	2304      	movcc	r3, #4
 8007ee0:	50ca      	str	r2, [r1, r3]
 8007ee2:	b10a      	cbz	r2, 8007ee8 <__lshift+0xa4>
 8007ee4:	f108 0602 	add.w	r6, r8, #2
 8007ee8:	3e01      	subs	r6, #1
 8007eea:	4638      	mov	r0, r7
 8007eec:	612e      	str	r6, [r5, #16]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	f7ff fdda 	bl	8007aa8 <_Bfree>
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007efe:	3301      	adds	r3, #1
 8007f00:	e7c5      	b.n	8007e8e <__lshift+0x4a>
 8007f02:	3904      	subs	r1, #4
 8007f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f0c:	459c      	cmp	ip, r3
 8007f0e:	d8f9      	bhi.n	8007f04 <__lshift+0xc0>
 8007f10:	e7ea      	b.n	8007ee8 <__lshift+0xa4>
 8007f12:	bf00      	nop
 8007f14:	08008f15 	.word	0x08008f15
 8007f18:	08008f26 	.word	0x08008f26

08007f1c <__mcmp>:
 8007f1c:	690a      	ldr	r2, [r1, #16]
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6900      	ldr	r0, [r0, #16]
 8007f22:	1a80      	subs	r0, r0, r2
 8007f24:	b530      	push	{r4, r5, lr}
 8007f26:	d10e      	bne.n	8007f46 <__mcmp+0x2a>
 8007f28:	3314      	adds	r3, #20
 8007f2a:	3114      	adds	r1, #20
 8007f2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f3c:	4295      	cmp	r5, r2
 8007f3e:	d003      	beq.n	8007f48 <__mcmp+0x2c>
 8007f40:	d205      	bcs.n	8007f4e <__mcmp+0x32>
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	bd30      	pop	{r4, r5, pc}
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d3f3      	bcc.n	8007f34 <__mcmp+0x18>
 8007f4c:	e7fb      	b.n	8007f46 <__mcmp+0x2a>
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7f9      	b.n	8007f46 <__mcmp+0x2a>
	...

08007f54 <__mdiff>:
 8007f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	4689      	mov	r9, r1
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4648      	mov	r0, r9
 8007f60:	4614      	mov	r4, r2
 8007f62:	f7ff ffdb 	bl	8007f1c <__mcmp>
 8007f66:	1e05      	subs	r5, r0, #0
 8007f68:	d112      	bne.n	8007f90 <__mdiff+0x3c>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fd5b 	bl	8007a28 <_Balloc>
 8007f72:	4602      	mov	r2, r0
 8007f74:	b928      	cbnz	r0, 8007f82 <__mdiff+0x2e>
 8007f76:	4b3f      	ldr	r3, [pc, #252]	@ (8008074 <__mdiff+0x120>)
 8007f78:	f240 2137 	movw	r1, #567	@ 0x237
 8007f7c:	483e      	ldr	r0, [pc, #248]	@ (8008078 <__mdiff+0x124>)
 8007f7e:	f000 fb11 	bl	80085a4 <__assert_func>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f88:	4610      	mov	r0, r2
 8007f8a:	b003      	add	sp, #12
 8007f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f90:	bfbc      	itt	lt
 8007f92:	464b      	movlt	r3, r9
 8007f94:	46a1      	movlt	r9, r4
 8007f96:	4630      	mov	r0, r6
 8007f98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f9c:	bfba      	itte	lt
 8007f9e:	461c      	movlt	r4, r3
 8007fa0:	2501      	movlt	r5, #1
 8007fa2:	2500      	movge	r5, #0
 8007fa4:	f7ff fd40 	bl	8007a28 <_Balloc>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	b918      	cbnz	r0, 8007fb4 <__mdiff+0x60>
 8007fac:	4b31      	ldr	r3, [pc, #196]	@ (8008074 <__mdiff+0x120>)
 8007fae:	f240 2145 	movw	r1, #581	@ 0x245
 8007fb2:	e7e3      	b.n	8007f7c <__mdiff+0x28>
 8007fb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fb8:	6926      	ldr	r6, [r4, #16]
 8007fba:	60c5      	str	r5, [r0, #12]
 8007fbc:	f109 0310 	add.w	r3, r9, #16
 8007fc0:	f109 0514 	add.w	r5, r9, #20
 8007fc4:	f104 0e14 	add.w	lr, r4, #20
 8007fc8:	f100 0b14 	add.w	fp, r0, #20
 8007fcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	46d9      	mov	r9, fp
 8007fd8:	f04f 0c00 	mov.w	ip, #0
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	fa1f f38a 	uxth.w	r3, sl
 8007fec:	4619      	mov	r1, r3
 8007fee:	b283      	uxth	r3, r0
 8007ff0:	1acb      	subs	r3, r1, r3
 8007ff2:	0c00      	lsrs	r0, r0, #16
 8007ff4:	4463      	add	r3, ip
 8007ff6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ffa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008004:	4576      	cmp	r6, lr
 8008006:	f849 3b04 	str.w	r3, [r9], #4
 800800a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800800e:	d8e5      	bhi.n	8007fdc <__mdiff+0x88>
 8008010:	1b33      	subs	r3, r6, r4
 8008012:	3b15      	subs	r3, #21
 8008014:	f023 0303 	bic.w	r3, r3, #3
 8008018:	3415      	adds	r4, #21
 800801a:	3304      	adds	r3, #4
 800801c:	42a6      	cmp	r6, r4
 800801e:	bf38      	it	cc
 8008020:	2304      	movcc	r3, #4
 8008022:	441d      	add	r5, r3
 8008024:	445b      	add	r3, fp
 8008026:	461e      	mov	r6, r3
 8008028:	462c      	mov	r4, r5
 800802a:	4544      	cmp	r4, r8
 800802c:	d30e      	bcc.n	800804c <__mdiff+0xf8>
 800802e:	f108 0103 	add.w	r1, r8, #3
 8008032:	1b49      	subs	r1, r1, r5
 8008034:	f021 0103 	bic.w	r1, r1, #3
 8008038:	3d03      	subs	r5, #3
 800803a:	45a8      	cmp	r8, r5
 800803c:	bf38      	it	cc
 800803e:	2100      	movcc	r1, #0
 8008040:	440b      	add	r3, r1
 8008042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008046:	b191      	cbz	r1, 800806e <__mdiff+0x11a>
 8008048:	6117      	str	r7, [r2, #16]
 800804a:	e79d      	b.n	8007f88 <__mdiff+0x34>
 800804c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008050:	46e6      	mov	lr, ip
 8008052:	0c08      	lsrs	r0, r1, #16
 8008054:	fa1c fc81 	uxtah	ip, ip, r1
 8008058:	4471      	add	r1, lr
 800805a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800805e:	b289      	uxth	r1, r1
 8008060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008064:	f846 1b04 	str.w	r1, [r6], #4
 8008068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800806c:	e7dd      	b.n	800802a <__mdiff+0xd6>
 800806e:	3f01      	subs	r7, #1
 8008070:	e7e7      	b.n	8008042 <__mdiff+0xee>
 8008072:	bf00      	nop
 8008074:	08008f15 	.word	0x08008f15
 8008078:	08008f26 	.word	0x08008f26

0800807c <__d2b>:
 800807c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008080:	460f      	mov	r7, r1
 8008082:	2101      	movs	r1, #1
 8008084:	ec59 8b10 	vmov	r8, r9, d0
 8008088:	4616      	mov	r6, r2
 800808a:	f7ff fccd 	bl	8007a28 <_Balloc>
 800808e:	4604      	mov	r4, r0
 8008090:	b930      	cbnz	r0, 80080a0 <__d2b+0x24>
 8008092:	4602      	mov	r2, r0
 8008094:	4b23      	ldr	r3, [pc, #140]	@ (8008124 <__d2b+0xa8>)
 8008096:	4824      	ldr	r0, [pc, #144]	@ (8008128 <__d2b+0xac>)
 8008098:	f240 310f 	movw	r1, #783	@ 0x30f
 800809c:	f000 fa82 	bl	80085a4 <__assert_func>
 80080a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080a8:	b10d      	cbz	r5, 80080ae <__d2b+0x32>
 80080aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	f1b8 0300 	subs.w	r3, r8, #0
 80080b4:	d023      	beq.n	80080fe <__d2b+0x82>
 80080b6:	4668      	mov	r0, sp
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	f7ff fd7c 	bl	8007bb6 <__lo0bits>
 80080be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080c2:	b1d0      	cbz	r0, 80080fa <__d2b+0x7e>
 80080c4:	f1c0 0320 	rsb	r3, r0, #32
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	430b      	orrs	r3, r1
 80080ce:	40c2      	lsrs	r2, r0
 80080d0:	6163      	str	r3, [r4, #20]
 80080d2:	9201      	str	r2, [sp, #4]
 80080d4:	9b01      	ldr	r3, [sp, #4]
 80080d6:	61a3      	str	r3, [r4, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf0c      	ite	eq
 80080dc:	2201      	moveq	r2, #1
 80080de:	2202      	movne	r2, #2
 80080e0:	6122      	str	r2, [r4, #16]
 80080e2:	b1a5      	cbz	r5, 800810e <__d2b+0x92>
 80080e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080e8:	4405      	add	r5, r0
 80080ea:	603d      	str	r5, [r7, #0]
 80080ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	4620      	mov	r0, r4
 80080f4:	b003      	add	sp, #12
 80080f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fa:	6161      	str	r1, [r4, #20]
 80080fc:	e7ea      	b.n	80080d4 <__d2b+0x58>
 80080fe:	a801      	add	r0, sp, #4
 8008100:	f7ff fd59 	bl	8007bb6 <__lo0bits>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	6163      	str	r3, [r4, #20]
 8008108:	3020      	adds	r0, #32
 800810a:	2201      	movs	r2, #1
 800810c:	e7e8      	b.n	80080e0 <__d2b+0x64>
 800810e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008112:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008116:	6038      	str	r0, [r7, #0]
 8008118:	6918      	ldr	r0, [r3, #16]
 800811a:	f7ff fd2d 	bl	8007b78 <__hi0bits>
 800811e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008122:	e7e5      	b.n	80080f0 <__d2b+0x74>
 8008124:	08008f15 	.word	0x08008f15
 8008128:	08008f26 	.word	0x08008f26

0800812c <__ssputs_r>:
 800812c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	688e      	ldr	r6, [r1, #8]
 8008132:	461f      	mov	r7, r3
 8008134:	42be      	cmp	r6, r7
 8008136:	680b      	ldr	r3, [r1, #0]
 8008138:	4682      	mov	sl, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4690      	mov	r8, r2
 800813e:	d82d      	bhi.n	800819c <__ssputs_r+0x70>
 8008140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008144:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008148:	d026      	beq.n	8008198 <__ssputs_r+0x6c>
 800814a:	6965      	ldr	r5, [r4, #20]
 800814c:	6909      	ldr	r1, [r1, #16]
 800814e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008152:	eba3 0901 	sub.w	r9, r3, r1
 8008156:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800815a:	1c7b      	adds	r3, r7, #1
 800815c:	444b      	add	r3, r9
 800815e:	106d      	asrs	r5, r5, #1
 8008160:	429d      	cmp	r5, r3
 8008162:	bf38      	it	cc
 8008164:	461d      	movcc	r5, r3
 8008166:	0553      	lsls	r3, r2, #21
 8008168:	d527      	bpl.n	80081ba <__ssputs_r+0x8e>
 800816a:	4629      	mov	r1, r5
 800816c:	f7ff fbd0 	bl	8007910 <_malloc_r>
 8008170:	4606      	mov	r6, r0
 8008172:	b360      	cbz	r0, 80081ce <__ssputs_r+0xa2>
 8008174:	6921      	ldr	r1, [r4, #16]
 8008176:	464a      	mov	r2, r9
 8008178:	f000 fa06 	bl	8008588 <memcpy>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	6126      	str	r6, [r4, #16]
 800818a:	6165      	str	r5, [r4, #20]
 800818c:	444e      	add	r6, r9
 800818e:	eba5 0509 	sub.w	r5, r5, r9
 8008192:	6026      	str	r6, [r4, #0]
 8008194:	60a5      	str	r5, [r4, #8]
 8008196:	463e      	mov	r6, r7
 8008198:	42be      	cmp	r6, r7
 800819a:	d900      	bls.n	800819e <__ssputs_r+0x72>
 800819c:	463e      	mov	r6, r7
 800819e:	6820      	ldr	r0, [r4, #0]
 80081a0:	4632      	mov	r2, r6
 80081a2:	4641      	mov	r1, r8
 80081a4:	f000 f9c6 	bl	8008534 <memmove>
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	1b9b      	subs	r3, r3, r6
 80081ac:	60a3      	str	r3, [r4, #8]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	4433      	add	r3, r6
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	2000      	movs	r0, #0
 80081b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ba:	462a      	mov	r2, r5
 80081bc:	f000 fa36 	bl	800862c <_realloc_r>
 80081c0:	4606      	mov	r6, r0
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d1e0      	bne.n	8008188 <__ssputs_r+0x5c>
 80081c6:	6921      	ldr	r1, [r4, #16]
 80081c8:	4650      	mov	r0, sl
 80081ca:	f7ff fb2d 	bl	8007828 <_free_r>
 80081ce:	230c      	movs	r3, #12
 80081d0:	f8ca 3000 	str.w	r3, [sl]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	e7e9      	b.n	80081b6 <__ssputs_r+0x8a>
	...

080081e4 <_svfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	4698      	mov	r8, r3
 80081ea:	898b      	ldrh	r3, [r1, #12]
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	b09d      	sub	sp, #116	@ 0x74
 80081f0:	4607      	mov	r7, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	d510      	bpl.n	800821a <_svfiprintf_r+0x36>
 80081f8:	690b      	ldr	r3, [r1, #16]
 80081fa:	b973      	cbnz	r3, 800821a <_svfiprintf_r+0x36>
 80081fc:	2140      	movs	r1, #64	@ 0x40
 80081fe:	f7ff fb87 	bl	8007910 <_malloc_r>
 8008202:	6028      	str	r0, [r5, #0]
 8008204:	6128      	str	r0, [r5, #16]
 8008206:	b930      	cbnz	r0, 8008216 <_svfiprintf_r+0x32>
 8008208:	230c      	movs	r3, #12
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	b01d      	add	sp, #116	@ 0x74
 8008212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008216:	2340      	movs	r3, #64	@ 0x40
 8008218:	616b      	str	r3, [r5, #20]
 800821a:	2300      	movs	r3, #0
 800821c:	9309      	str	r3, [sp, #36]	@ 0x24
 800821e:	2320      	movs	r3, #32
 8008220:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008224:	f8cd 800c 	str.w	r8, [sp, #12]
 8008228:	2330      	movs	r3, #48	@ 0x30
 800822a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083c8 <_svfiprintf_r+0x1e4>
 800822e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008232:	f04f 0901 	mov.w	r9, #1
 8008236:	4623      	mov	r3, r4
 8008238:	469a      	mov	sl, r3
 800823a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823e:	b10a      	cbz	r2, 8008244 <_svfiprintf_r+0x60>
 8008240:	2a25      	cmp	r2, #37	@ 0x25
 8008242:	d1f9      	bne.n	8008238 <_svfiprintf_r+0x54>
 8008244:	ebba 0b04 	subs.w	fp, sl, r4
 8008248:	d00b      	beq.n	8008262 <_svfiprintf_r+0x7e>
 800824a:	465b      	mov	r3, fp
 800824c:	4622      	mov	r2, r4
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff6b 	bl	800812c <__ssputs_r>
 8008256:	3001      	adds	r0, #1
 8008258:	f000 80a7 	beq.w	80083aa <_svfiprintf_r+0x1c6>
 800825c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800825e:	445a      	add	r2, fp
 8008260:	9209      	str	r2, [sp, #36]	@ 0x24
 8008262:	f89a 3000 	ldrb.w	r3, [sl]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 809f 	beq.w	80083aa <_svfiprintf_r+0x1c6>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008276:	f10a 0a01 	add.w	sl, sl, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008282:	931a      	str	r3, [sp, #104]	@ 0x68
 8008284:	4654      	mov	r4, sl
 8008286:	2205      	movs	r2, #5
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	484e      	ldr	r0, [pc, #312]	@ (80083c8 <_svfiprintf_r+0x1e4>)
 800828e:	f7f7 ffa7 	bl	80001e0 <memchr>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	b9d8      	cbnz	r0, 80082ce <_svfiprintf_r+0xea>
 8008296:	06d0      	lsls	r0, r2, #27
 8008298:	bf44      	itt	mi
 800829a:	2320      	movmi	r3, #32
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a0:	0711      	lsls	r1, r2, #28
 80082a2:	bf44      	itt	mi
 80082a4:	232b      	movmi	r3, #43	@ 0x2b
 80082a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082aa:	f89a 3000 	ldrb.w	r3, [sl]
 80082ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b0:	d015      	beq.n	80082de <_svfiprintf_r+0xfa>
 80082b2:	9a07      	ldr	r2, [sp, #28]
 80082b4:	4654      	mov	r4, sl
 80082b6:	2000      	movs	r0, #0
 80082b8:	f04f 0c0a 	mov.w	ip, #10
 80082bc:	4621      	mov	r1, r4
 80082be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c2:	3b30      	subs	r3, #48	@ 0x30
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d94b      	bls.n	8008360 <_svfiprintf_r+0x17c>
 80082c8:	b1b0      	cbz	r0, 80082f8 <_svfiprintf_r+0x114>
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	e014      	b.n	80082f8 <_svfiprintf_r+0x114>
 80082ce:	eba0 0308 	sub.w	r3, r0, r8
 80082d2:	fa09 f303 	lsl.w	r3, r9, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	46a2      	mov	sl, r4
 80082dc:	e7d2      	b.n	8008284 <_svfiprintf_r+0xa0>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	1d19      	adds	r1, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9103      	str	r1, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbb      	ittet	lt
 80082ea:	425b      	neglt	r3, r3
 80082ec:	f042 0202 	orrlt.w	r2, r2, #2
 80082f0:	9307      	strge	r3, [sp, #28]
 80082f2:	9307      	strlt	r3, [sp, #28]
 80082f4:	bfb8      	it	lt
 80082f6:	9204      	strlt	r2, [sp, #16]
 80082f8:	7823      	ldrb	r3, [r4, #0]
 80082fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80082fc:	d10a      	bne.n	8008314 <_svfiprintf_r+0x130>
 80082fe:	7863      	ldrb	r3, [r4, #1]
 8008300:	2b2a      	cmp	r3, #42	@ 0x2a
 8008302:	d132      	bne.n	800836a <_svfiprintf_r+0x186>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	9203      	str	r2, [sp, #12]
 800830c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008310:	3402      	adds	r4, #2
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083d8 <_svfiprintf_r+0x1f4>
 8008318:	7821      	ldrb	r1, [r4, #0]
 800831a:	2203      	movs	r2, #3
 800831c:	4650      	mov	r0, sl
 800831e:	f7f7 ff5f 	bl	80001e0 <memchr>
 8008322:	b138      	cbz	r0, 8008334 <_svfiprintf_r+0x150>
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	eba0 000a 	sub.w	r0, r0, sl
 800832a:	2240      	movs	r2, #64	@ 0x40
 800832c:	4082      	lsls	r2, r0
 800832e:	4313      	orrs	r3, r2
 8008330:	3401      	adds	r4, #1
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008338:	4824      	ldr	r0, [pc, #144]	@ (80083cc <_svfiprintf_r+0x1e8>)
 800833a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800833e:	2206      	movs	r2, #6
 8008340:	f7f7 ff4e 	bl	80001e0 <memchr>
 8008344:	2800      	cmp	r0, #0
 8008346:	d036      	beq.n	80083b6 <_svfiprintf_r+0x1d2>
 8008348:	4b21      	ldr	r3, [pc, #132]	@ (80083d0 <_svfiprintf_r+0x1ec>)
 800834a:	bb1b      	cbnz	r3, 8008394 <_svfiprintf_r+0x1b0>
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	3307      	adds	r3, #7
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	3308      	adds	r3, #8
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835a:	4433      	add	r3, r6
 800835c:	9309      	str	r3, [sp, #36]	@ 0x24
 800835e:	e76a      	b.n	8008236 <_svfiprintf_r+0x52>
 8008360:	fb0c 3202 	mla	r2, ip, r2, r3
 8008364:	460c      	mov	r4, r1
 8008366:	2001      	movs	r0, #1
 8008368:	e7a8      	b.n	80082bc <_svfiprintf_r+0xd8>
 800836a:	2300      	movs	r3, #0
 800836c:	3401      	adds	r4, #1
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	4619      	mov	r1, r3
 8008372:	f04f 0c0a 	mov.w	ip, #10
 8008376:	4620      	mov	r0, r4
 8008378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837c:	3a30      	subs	r2, #48	@ 0x30
 800837e:	2a09      	cmp	r2, #9
 8008380:	d903      	bls.n	800838a <_svfiprintf_r+0x1a6>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0c6      	beq.n	8008314 <_svfiprintf_r+0x130>
 8008386:	9105      	str	r1, [sp, #20]
 8008388:	e7c4      	b.n	8008314 <_svfiprintf_r+0x130>
 800838a:	fb0c 2101 	mla	r1, ip, r1, r2
 800838e:	4604      	mov	r4, r0
 8008390:	2301      	movs	r3, #1
 8008392:	e7f0      	b.n	8008376 <_svfiprintf_r+0x192>
 8008394:	ab03      	add	r3, sp, #12
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	462a      	mov	r2, r5
 800839a:	4b0e      	ldr	r3, [pc, #56]	@ (80083d4 <_svfiprintf_r+0x1f0>)
 800839c:	a904      	add	r1, sp, #16
 800839e:	4638      	mov	r0, r7
 80083a0:	f7fd fe96 	bl	80060d0 <_printf_float>
 80083a4:	1c42      	adds	r2, r0, #1
 80083a6:	4606      	mov	r6, r0
 80083a8:	d1d6      	bne.n	8008358 <_svfiprintf_r+0x174>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	065b      	lsls	r3, r3, #25
 80083ae:	f53f af2d 	bmi.w	800820c <_svfiprintf_r+0x28>
 80083b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083b4:	e72c      	b.n	8008210 <_svfiprintf_r+0x2c>
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	462a      	mov	r2, r5
 80083bc:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <_svfiprintf_r+0x1f0>)
 80083be:	a904      	add	r1, sp, #16
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7fe f91d 	bl	8006600 <_printf_i>
 80083c6:	e7ed      	b.n	80083a4 <_svfiprintf_r+0x1c0>
 80083c8:	08009080 	.word	0x08009080
 80083cc:	0800908a 	.word	0x0800908a
 80083d0:	080060d1 	.word	0x080060d1
 80083d4:	0800812d 	.word	0x0800812d
 80083d8:	08009086 	.word	0x08009086

080083dc <__sflush_r>:
 80083dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	0716      	lsls	r6, r2, #28
 80083e6:	4605      	mov	r5, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	d454      	bmi.n	8008496 <__sflush_r+0xba>
 80083ec:	684b      	ldr	r3, [r1, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x1c>
 80083f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd48      	ble.n	800848a <__sflush_r+0xae>
 80083f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d045      	beq.n	800848a <__sflush_r+0xae>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	6a21      	ldr	r1, [r4, #32]
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	d030      	beq.n	800846e <__sflush_r+0x92>
 800840c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	0759      	lsls	r1, r3, #29
 8008412:	d505      	bpl.n	8008420 <__sflush_r+0x44>
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800841a:	b10b      	cbz	r3, 8008420 <__sflush_r+0x44>
 800841c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	2300      	movs	r3, #0
 8008422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	d106      	bne.n	800843e <__sflush_r+0x62>
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	291d      	cmp	r1, #29
 8008434:	d82b      	bhi.n	800848e <__sflush_r+0xb2>
 8008436:	4a2a      	ldr	r2, [pc, #168]	@ (80084e0 <__sflush_r+0x104>)
 8008438:	410a      	asrs	r2, r1
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d427      	bmi.n	800848e <__sflush_r+0xb2>
 800843e:	2200      	movs	r2, #0
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	d504      	bpl.n	8008454 <__sflush_r+0x78>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	d101      	bne.n	8008452 <__sflush_r+0x76>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b903      	cbnz	r3, 8008454 <__sflush_r+0x78>
 8008452:	6560      	str	r0, [r4, #84]	@ 0x54
 8008454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008456:	602f      	str	r7, [r5, #0]
 8008458:	b1b9      	cbz	r1, 800848a <__sflush_r+0xae>
 800845a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800845e:	4299      	cmp	r1, r3
 8008460:	d002      	beq.n	8008468 <__sflush_r+0x8c>
 8008462:	4628      	mov	r0, r5
 8008464:	f7ff f9e0 	bl	8007828 <_free_r>
 8008468:	2300      	movs	r3, #0
 800846a:	6363      	str	r3, [r4, #52]	@ 0x34
 800846c:	e00d      	b.n	800848a <__sflush_r+0xae>
 800846e:	2301      	movs	r3, #1
 8008470:	4628      	mov	r0, r5
 8008472:	47b0      	blx	r6
 8008474:	4602      	mov	r2, r0
 8008476:	1c50      	adds	r0, r2, #1
 8008478:	d1c9      	bne.n	800840e <__sflush_r+0x32>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0c6      	beq.n	800840e <__sflush_r+0x32>
 8008480:	2b1d      	cmp	r3, #29
 8008482:	d001      	beq.n	8008488 <__sflush_r+0xac>
 8008484:	2b16      	cmp	r3, #22
 8008486:	d11e      	bne.n	80084c6 <__sflush_r+0xea>
 8008488:	602f      	str	r7, [r5, #0]
 800848a:	2000      	movs	r0, #0
 800848c:	e022      	b.n	80084d4 <__sflush_r+0xf8>
 800848e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008492:	b21b      	sxth	r3, r3
 8008494:	e01b      	b.n	80084ce <__sflush_r+0xf2>
 8008496:	690f      	ldr	r7, [r1, #16]
 8008498:	2f00      	cmp	r7, #0
 800849a:	d0f6      	beq.n	800848a <__sflush_r+0xae>
 800849c:	0793      	lsls	r3, r2, #30
 800849e:	680e      	ldr	r6, [r1, #0]
 80084a0:	bf08      	it	eq
 80084a2:	694b      	ldreq	r3, [r1, #20]
 80084a4:	600f      	str	r7, [r1, #0]
 80084a6:	bf18      	it	ne
 80084a8:	2300      	movne	r3, #0
 80084aa:	eba6 0807 	sub.w	r8, r6, r7
 80084ae:	608b      	str	r3, [r1, #8]
 80084b0:	f1b8 0f00 	cmp.w	r8, #0
 80084b4:	dde9      	ble.n	800848a <__sflush_r+0xae>
 80084b6:	6a21      	ldr	r1, [r4, #32]
 80084b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084ba:	4643      	mov	r3, r8
 80084bc:	463a      	mov	r2, r7
 80084be:	4628      	mov	r0, r5
 80084c0:	47b0      	blx	r6
 80084c2:	2800      	cmp	r0, #0
 80084c4:	dc08      	bgt.n	80084d8 <__sflush_r+0xfc>
 80084c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d8:	4407      	add	r7, r0
 80084da:	eba8 0800 	sub.w	r8, r8, r0
 80084de:	e7e7      	b.n	80084b0 <__sflush_r+0xd4>
 80084e0:	dfbffffe 	.word	0xdfbffffe

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6a03      	ldr	r3, [r0, #32]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f7fe fa2d 	bl	8006958 <__sinit>
 80084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f3      	beq.n	80084ee <_fflush_r+0xa>
 8008506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008508:	07d0      	lsls	r0, r2, #31
 800850a:	d404      	bmi.n	8008516 <_fflush_r+0x32>
 800850c:	0599      	lsls	r1, r3, #22
 800850e:	d402      	bmi.n	8008516 <_fflush_r+0x32>
 8008510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008512:	f7fe fb38 	bl	8006b86 <__retarget_lock_acquire_recursive>
 8008516:	4628      	mov	r0, r5
 8008518:	4621      	mov	r1, r4
 800851a:	f7ff ff5f 	bl	80083dc <__sflush_r>
 800851e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008520:	07da      	lsls	r2, r3, #31
 8008522:	4605      	mov	r5, r0
 8008524:	d4e4      	bmi.n	80084f0 <_fflush_r+0xc>
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	059b      	lsls	r3, r3, #22
 800852a:	d4e1      	bmi.n	80084f0 <_fflush_r+0xc>
 800852c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852e:	f7fe fb2b 	bl	8006b88 <__retarget_lock_release_recursive>
 8008532:	e7dd      	b.n	80084f0 <_fflush_r+0xc>

08008534 <memmove>:
 8008534:	4288      	cmp	r0, r1
 8008536:	b510      	push	{r4, lr}
 8008538:	eb01 0402 	add.w	r4, r1, r2
 800853c:	d902      	bls.n	8008544 <memmove+0x10>
 800853e:	4284      	cmp	r4, r0
 8008540:	4623      	mov	r3, r4
 8008542:	d807      	bhi.n	8008554 <memmove+0x20>
 8008544:	1e43      	subs	r3, r0, #1
 8008546:	42a1      	cmp	r1, r4
 8008548:	d008      	beq.n	800855c <memmove+0x28>
 800854a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800854e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008552:	e7f8      	b.n	8008546 <memmove+0x12>
 8008554:	4402      	add	r2, r0
 8008556:	4601      	mov	r1, r0
 8008558:	428a      	cmp	r2, r1
 800855a:	d100      	bne.n	800855e <memmove+0x2a>
 800855c:	bd10      	pop	{r4, pc}
 800855e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008566:	e7f7      	b.n	8008558 <memmove+0x24>

08008568 <_sbrk_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d06      	ldr	r5, [pc, #24]	@ (8008584 <_sbrk_r+0x1c>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f9 f81c 	bl	80015b0 <_sbrk>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_sbrk_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_sbrk_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	2000054c 	.word	0x2000054c

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800859e:	4291      	cmp	r1, r2
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <__assert_func>:
 80085a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085a6:	4614      	mov	r4, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4b09      	ldr	r3, [pc, #36]	@ (80085d0 <__assert_func+0x2c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4605      	mov	r5, r0
 80085b0:	68d8      	ldr	r0, [r3, #12]
 80085b2:	b954      	cbnz	r4, 80085ca <__assert_func+0x26>
 80085b4:	4b07      	ldr	r3, [pc, #28]	@ (80085d4 <__assert_func+0x30>)
 80085b6:	461c      	mov	r4, r3
 80085b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085bc:	9100      	str	r1, [sp, #0]
 80085be:	462b      	mov	r3, r5
 80085c0:	4905      	ldr	r1, [pc, #20]	@ (80085d8 <__assert_func+0x34>)
 80085c2:	f000 f86f 	bl	80086a4 <fiprintf>
 80085c6:	f000 f87f 	bl	80086c8 <abort>
 80085ca:	4b04      	ldr	r3, [pc, #16]	@ (80085dc <__assert_func+0x38>)
 80085cc:	e7f4      	b.n	80085b8 <__assert_func+0x14>
 80085ce:	bf00      	nop
 80085d0:	2000001c 	.word	0x2000001c
 80085d4:	080090d6 	.word	0x080090d6
 80085d8:	080090a8 	.word	0x080090a8
 80085dc:	0800909b 	.word	0x0800909b

080085e0 <_calloc_r>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	fba1 5402 	umull	r5, r4, r1, r2
 80085e6:	b93c      	cbnz	r4, 80085f8 <_calloc_r+0x18>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7ff f991 	bl	8007910 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b928      	cbnz	r0, 80085fe <_calloc_r+0x1e>
 80085f2:	2600      	movs	r6, #0
 80085f4:	4630      	mov	r0, r6
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	220c      	movs	r2, #12
 80085fa:	6002      	str	r2, [r0, #0]
 80085fc:	e7f9      	b.n	80085f2 <_calloc_r+0x12>
 80085fe:	462a      	mov	r2, r5
 8008600:	4621      	mov	r1, r4
 8008602:	f7fe fa42 	bl	8006a8a <memset>
 8008606:	e7f5      	b.n	80085f4 <_calloc_r+0x14>

08008608 <__ascii_mbtowc>:
 8008608:	b082      	sub	sp, #8
 800860a:	b901      	cbnz	r1, 800860e <__ascii_mbtowc+0x6>
 800860c:	a901      	add	r1, sp, #4
 800860e:	b142      	cbz	r2, 8008622 <__ascii_mbtowc+0x1a>
 8008610:	b14b      	cbz	r3, 8008626 <__ascii_mbtowc+0x1e>
 8008612:	7813      	ldrb	r3, [r2, #0]
 8008614:	600b      	str	r3, [r1, #0]
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	1e10      	subs	r0, r2, #0
 800861a:	bf18      	it	ne
 800861c:	2001      	movne	r0, #1
 800861e:	b002      	add	sp, #8
 8008620:	4770      	bx	lr
 8008622:	4610      	mov	r0, r2
 8008624:	e7fb      	b.n	800861e <__ascii_mbtowc+0x16>
 8008626:	f06f 0001 	mvn.w	r0, #1
 800862a:	e7f8      	b.n	800861e <__ascii_mbtowc+0x16>

0800862c <_realloc_r>:
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	4680      	mov	r8, r0
 8008632:	4615      	mov	r5, r2
 8008634:	460c      	mov	r4, r1
 8008636:	b921      	cbnz	r1, 8008642 <_realloc_r+0x16>
 8008638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	4611      	mov	r1, r2
 800863e:	f7ff b967 	b.w	8007910 <_malloc_r>
 8008642:	b92a      	cbnz	r2, 8008650 <_realloc_r+0x24>
 8008644:	f7ff f8f0 	bl	8007828 <_free_r>
 8008648:	2400      	movs	r4, #0
 800864a:	4620      	mov	r0, r4
 800864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008650:	f000 f841 	bl	80086d6 <_malloc_usable_size_r>
 8008654:	4285      	cmp	r5, r0
 8008656:	4606      	mov	r6, r0
 8008658:	d802      	bhi.n	8008660 <_realloc_r+0x34>
 800865a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800865e:	d8f4      	bhi.n	800864a <_realloc_r+0x1e>
 8008660:	4629      	mov	r1, r5
 8008662:	4640      	mov	r0, r8
 8008664:	f7ff f954 	bl	8007910 <_malloc_r>
 8008668:	4607      	mov	r7, r0
 800866a:	2800      	cmp	r0, #0
 800866c:	d0ec      	beq.n	8008648 <_realloc_r+0x1c>
 800866e:	42b5      	cmp	r5, r6
 8008670:	462a      	mov	r2, r5
 8008672:	4621      	mov	r1, r4
 8008674:	bf28      	it	cs
 8008676:	4632      	movcs	r2, r6
 8008678:	f7ff ff86 	bl	8008588 <memcpy>
 800867c:	4621      	mov	r1, r4
 800867e:	4640      	mov	r0, r8
 8008680:	f7ff f8d2 	bl	8007828 <_free_r>
 8008684:	463c      	mov	r4, r7
 8008686:	e7e0      	b.n	800864a <_realloc_r+0x1e>

08008688 <__ascii_wctomb>:
 8008688:	4603      	mov	r3, r0
 800868a:	4608      	mov	r0, r1
 800868c:	b141      	cbz	r1, 80086a0 <__ascii_wctomb+0x18>
 800868e:	2aff      	cmp	r2, #255	@ 0xff
 8008690:	d904      	bls.n	800869c <__ascii_wctomb+0x14>
 8008692:	228a      	movs	r2, #138	@ 0x8a
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	4770      	bx	lr
 800869c:	700a      	strb	r2, [r1, #0]
 800869e:	2001      	movs	r0, #1
 80086a0:	4770      	bx	lr
	...

080086a4 <fiprintf>:
 80086a4:	b40e      	push	{r1, r2, r3}
 80086a6:	b503      	push	{r0, r1, lr}
 80086a8:	4601      	mov	r1, r0
 80086aa:	ab03      	add	r3, sp, #12
 80086ac:	4805      	ldr	r0, [pc, #20]	@ (80086c4 <fiprintf+0x20>)
 80086ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b2:	6800      	ldr	r0, [r0, #0]
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	f000 f83f 	bl	8008738 <_vfiprintf_r>
 80086ba:	b002      	add	sp, #8
 80086bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c0:	b003      	add	sp, #12
 80086c2:	4770      	bx	lr
 80086c4:	2000001c 	.word	0x2000001c

080086c8 <abort>:
 80086c8:	b508      	push	{r3, lr}
 80086ca:	2006      	movs	r0, #6
 80086cc:	f000 fa08 	bl	8008ae0 <raise>
 80086d0:	2001      	movs	r0, #1
 80086d2:	f7f8 fef5 	bl	80014c0 <_exit>

080086d6 <_malloc_usable_size_r>:
 80086d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086da:	1f18      	subs	r0, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfbc      	itt	lt
 80086e0:	580b      	ldrlt	r3, [r1, r0]
 80086e2:	18c0      	addlt	r0, r0, r3
 80086e4:	4770      	bx	lr

080086e6 <__sfputc_r>:
 80086e6:	6893      	ldr	r3, [r2, #8]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	b410      	push	{r4}
 80086ee:	6093      	str	r3, [r2, #8]
 80086f0:	da08      	bge.n	8008704 <__sfputc_r+0x1e>
 80086f2:	6994      	ldr	r4, [r2, #24]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	db01      	blt.n	80086fc <__sfputc_r+0x16>
 80086f8:	290a      	cmp	r1, #10
 80086fa:	d103      	bne.n	8008704 <__sfputc_r+0x1e>
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	f000 b932 	b.w	8008968 <__swbuf_r>
 8008704:	6813      	ldr	r3, [r2, #0]
 8008706:	1c58      	adds	r0, r3, #1
 8008708:	6010      	str	r0, [r2, #0]
 800870a:	7019      	strb	r1, [r3, #0]
 800870c:	4608      	mov	r0, r1
 800870e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008712:	4770      	bx	lr

08008714 <__sfputs_r>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	4606      	mov	r6, r0
 8008718:	460f      	mov	r7, r1
 800871a:	4614      	mov	r4, r2
 800871c:	18d5      	adds	r5, r2, r3
 800871e:	42ac      	cmp	r4, r5
 8008720:	d101      	bne.n	8008726 <__sfputs_r+0x12>
 8008722:	2000      	movs	r0, #0
 8008724:	e007      	b.n	8008736 <__sfputs_r+0x22>
 8008726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872a:	463a      	mov	r2, r7
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff ffda 	bl	80086e6 <__sfputc_r>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d1f3      	bne.n	800871e <__sfputs_r+0xa>
 8008736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008738 <_vfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460d      	mov	r5, r1
 800873e:	b09d      	sub	sp, #116	@ 0x74
 8008740:	4614      	mov	r4, r2
 8008742:	4698      	mov	r8, r3
 8008744:	4606      	mov	r6, r0
 8008746:	b118      	cbz	r0, 8008750 <_vfiprintf_r+0x18>
 8008748:	6a03      	ldr	r3, [r0, #32]
 800874a:	b90b      	cbnz	r3, 8008750 <_vfiprintf_r+0x18>
 800874c:	f7fe f904 	bl	8006958 <__sinit>
 8008750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008752:	07d9      	lsls	r1, r3, #31
 8008754:	d405      	bmi.n	8008762 <_vfiprintf_r+0x2a>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	059a      	lsls	r2, r3, #22
 800875a:	d402      	bmi.n	8008762 <_vfiprintf_r+0x2a>
 800875c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800875e:	f7fe fa12 	bl	8006b86 <__retarget_lock_acquire_recursive>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	071b      	lsls	r3, r3, #28
 8008766:	d501      	bpl.n	800876c <_vfiprintf_r+0x34>
 8008768:	692b      	ldr	r3, [r5, #16]
 800876a:	b99b      	cbnz	r3, 8008794 <_vfiprintf_r+0x5c>
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f938 	bl	80089e4 <__swsetup_r>
 8008774:	b170      	cbz	r0, 8008794 <_vfiprintf_r+0x5c>
 8008776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008778:	07dc      	lsls	r4, r3, #31
 800877a:	d504      	bpl.n	8008786 <_vfiprintf_r+0x4e>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	b01d      	add	sp, #116	@ 0x74
 8008782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	0598      	lsls	r0, r3, #22
 800878a:	d4f7      	bmi.n	800877c <_vfiprintf_r+0x44>
 800878c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800878e:	f7fe f9fb 	bl	8006b88 <__retarget_lock_release_recursive>
 8008792:	e7f3      	b.n	800877c <_vfiprintf_r+0x44>
 8008794:	2300      	movs	r3, #0
 8008796:	9309      	str	r3, [sp, #36]	@ 0x24
 8008798:	2320      	movs	r3, #32
 800879a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800879e:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a2:	2330      	movs	r3, #48	@ 0x30
 80087a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008954 <_vfiprintf_r+0x21c>
 80087a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ac:	f04f 0901 	mov.w	r9, #1
 80087b0:	4623      	mov	r3, r4
 80087b2:	469a      	mov	sl, r3
 80087b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b8:	b10a      	cbz	r2, 80087be <_vfiprintf_r+0x86>
 80087ba:	2a25      	cmp	r2, #37	@ 0x25
 80087bc:	d1f9      	bne.n	80087b2 <_vfiprintf_r+0x7a>
 80087be:	ebba 0b04 	subs.w	fp, sl, r4
 80087c2:	d00b      	beq.n	80087dc <_vfiprintf_r+0xa4>
 80087c4:	465b      	mov	r3, fp
 80087c6:	4622      	mov	r2, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ffa2 	bl	8008714 <__sfputs_r>
 80087d0:	3001      	adds	r0, #1
 80087d2:	f000 80a7 	beq.w	8008924 <_vfiprintf_r+0x1ec>
 80087d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d8:	445a      	add	r2, fp
 80087da:	9209      	str	r2, [sp, #36]	@ 0x24
 80087dc:	f89a 3000 	ldrb.w	r3, [sl]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 809f 	beq.w	8008924 <_vfiprintf_r+0x1ec>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f0:	f10a 0a01 	add.w	sl, sl, #1
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9307      	str	r3, [sp, #28]
 80087f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087fe:	4654      	mov	r4, sl
 8008800:	2205      	movs	r2, #5
 8008802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008806:	4853      	ldr	r0, [pc, #332]	@ (8008954 <_vfiprintf_r+0x21c>)
 8008808:	f7f7 fcea 	bl	80001e0 <memchr>
 800880c:	9a04      	ldr	r2, [sp, #16]
 800880e:	b9d8      	cbnz	r0, 8008848 <_vfiprintf_r+0x110>
 8008810:	06d1      	lsls	r1, r2, #27
 8008812:	bf44      	itt	mi
 8008814:	2320      	movmi	r3, #32
 8008816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800881a:	0713      	lsls	r3, r2, #28
 800881c:	bf44      	itt	mi
 800881e:	232b      	movmi	r3, #43	@ 0x2b
 8008820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b2a      	cmp	r3, #42	@ 0x2a
 800882a:	d015      	beq.n	8008858 <_vfiprintf_r+0x120>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	4654      	mov	r4, sl
 8008830:	2000      	movs	r0, #0
 8008832:	f04f 0c0a 	mov.w	ip, #10
 8008836:	4621      	mov	r1, r4
 8008838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883c:	3b30      	subs	r3, #48	@ 0x30
 800883e:	2b09      	cmp	r3, #9
 8008840:	d94b      	bls.n	80088da <_vfiprintf_r+0x1a2>
 8008842:	b1b0      	cbz	r0, 8008872 <_vfiprintf_r+0x13a>
 8008844:	9207      	str	r2, [sp, #28]
 8008846:	e014      	b.n	8008872 <_vfiprintf_r+0x13a>
 8008848:	eba0 0308 	sub.w	r3, r0, r8
 800884c:	fa09 f303 	lsl.w	r3, r9, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	46a2      	mov	sl, r4
 8008856:	e7d2      	b.n	80087fe <_vfiprintf_r+0xc6>
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	1d19      	adds	r1, r3, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	9103      	str	r1, [sp, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfbb      	ittet	lt
 8008864:	425b      	neglt	r3, r3
 8008866:	f042 0202 	orrlt.w	r2, r2, #2
 800886a:	9307      	strge	r3, [sp, #28]
 800886c:	9307      	strlt	r3, [sp, #28]
 800886e:	bfb8      	it	lt
 8008870:	9204      	strlt	r2, [sp, #16]
 8008872:	7823      	ldrb	r3, [r4, #0]
 8008874:	2b2e      	cmp	r3, #46	@ 0x2e
 8008876:	d10a      	bne.n	800888e <_vfiprintf_r+0x156>
 8008878:	7863      	ldrb	r3, [r4, #1]
 800887a:	2b2a      	cmp	r3, #42	@ 0x2a
 800887c:	d132      	bne.n	80088e4 <_vfiprintf_r+0x1ac>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9203      	str	r2, [sp, #12]
 8008886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800888a:	3402      	adds	r4, #2
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008964 <_vfiprintf_r+0x22c>
 8008892:	7821      	ldrb	r1, [r4, #0]
 8008894:	2203      	movs	r2, #3
 8008896:	4650      	mov	r0, sl
 8008898:	f7f7 fca2 	bl	80001e0 <memchr>
 800889c:	b138      	cbz	r0, 80088ae <_vfiprintf_r+0x176>
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	eba0 000a 	sub.w	r0, r0, sl
 80088a4:	2240      	movs	r2, #64	@ 0x40
 80088a6:	4082      	lsls	r2, r0
 80088a8:	4313      	orrs	r3, r2
 80088aa:	3401      	adds	r4, #1
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b2:	4829      	ldr	r0, [pc, #164]	@ (8008958 <_vfiprintf_r+0x220>)
 80088b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088b8:	2206      	movs	r2, #6
 80088ba:	f7f7 fc91 	bl	80001e0 <memchr>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d03f      	beq.n	8008942 <_vfiprintf_r+0x20a>
 80088c2:	4b26      	ldr	r3, [pc, #152]	@ (800895c <_vfiprintf_r+0x224>)
 80088c4:	bb1b      	cbnz	r3, 800890e <_vfiprintf_r+0x1d6>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	3307      	adds	r3, #7
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	3308      	adds	r3, #8
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d4:	443b      	add	r3, r7
 80088d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d8:	e76a      	b.n	80087b0 <_vfiprintf_r+0x78>
 80088da:	fb0c 3202 	mla	r2, ip, r2, r3
 80088de:	460c      	mov	r4, r1
 80088e0:	2001      	movs	r0, #1
 80088e2:	e7a8      	b.n	8008836 <_vfiprintf_r+0xfe>
 80088e4:	2300      	movs	r3, #0
 80088e6:	3401      	adds	r4, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	4619      	mov	r1, r3
 80088ec:	f04f 0c0a 	mov.w	ip, #10
 80088f0:	4620      	mov	r0, r4
 80088f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f6:	3a30      	subs	r2, #48	@ 0x30
 80088f8:	2a09      	cmp	r2, #9
 80088fa:	d903      	bls.n	8008904 <_vfiprintf_r+0x1cc>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0c6      	beq.n	800888e <_vfiprintf_r+0x156>
 8008900:	9105      	str	r1, [sp, #20]
 8008902:	e7c4      	b.n	800888e <_vfiprintf_r+0x156>
 8008904:	fb0c 2101 	mla	r1, ip, r1, r2
 8008908:	4604      	mov	r4, r0
 800890a:	2301      	movs	r3, #1
 800890c:	e7f0      	b.n	80088f0 <_vfiprintf_r+0x1b8>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b12      	ldr	r3, [pc, #72]	@ (8008960 <_vfiprintf_r+0x228>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4630      	mov	r0, r6
 800891a:	f7fd fbd9 	bl	80060d0 <_printf_float>
 800891e:	4607      	mov	r7, r0
 8008920:	1c78      	adds	r0, r7, #1
 8008922:	d1d6      	bne.n	80088d2 <_vfiprintf_r+0x19a>
 8008924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008926:	07d9      	lsls	r1, r3, #31
 8008928:	d405      	bmi.n	8008936 <_vfiprintf_r+0x1fe>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	059a      	lsls	r2, r3, #22
 800892e:	d402      	bmi.n	8008936 <_vfiprintf_r+0x1fe>
 8008930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008932:	f7fe f929 	bl	8006b88 <__retarget_lock_release_recursive>
 8008936:	89ab      	ldrh	r3, [r5, #12]
 8008938:	065b      	lsls	r3, r3, #25
 800893a:	f53f af1f 	bmi.w	800877c <_vfiprintf_r+0x44>
 800893e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008940:	e71e      	b.n	8008780 <_vfiprintf_r+0x48>
 8008942:	ab03      	add	r3, sp, #12
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	462a      	mov	r2, r5
 8008948:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <_vfiprintf_r+0x228>)
 800894a:	a904      	add	r1, sp, #16
 800894c:	4630      	mov	r0, r6
 800894e:	f7fd fe57 	bl	8006600 <_printf_i>
 8008952:	e7e4      	b.n	800891e <_vfiprintf_r+0x1e6>
 8008954:	08009080 	.word	0x08009080
 8008958:	0800908a 	.word	0x0800908a
 800895c:	080060d1 	.word	0x080060d1
 8008960:	08008715 	.word	0x08008715
 8008964:	08009086 	.word	0x08009086

08008968 <__swbuf_r>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	460e      	mov	r6, r1
 800896c:	4614      	mov	r4, r2
 800896e:	4605      	mov	r5, r0
 8008970:	b118      	cbz	r0, 800897a <__swbuf_r+0x12>
 8008972:	6a03      	ldr	r3, [r0, #32]
 8008974:	b90b      	cbnz	r3, 800897a <__swbuf_r+0x12>
 8008976:	f7fd ffef 	bl	8006958 <__sinit>
 800897a:	69a3      	ldr	r3, [r4, #24]
 800897c:	60a3      	str	r3, [r4, #8]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	071a      	lsls	r2, r3, #28
 8008982:	d501      	bpl.n	8008988 <__swbuf_r+0x20>
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	b943      	cbnz	r3, 800899a <__swbuf_r+0x32>
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f82a 	bl	80089e4 <__swsetup_r>
 8008990:	b118      	cbz	r0, 800899a <__swbuf_r+0x32>
 8008992:	f04f 37ff 	mov.w	r7, #4294967295
 8008996:	4638      	mov	r0, r7
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	1a98      	subs	r0, r3, r2
 80089a0:	6963      	ldr	r3, [r4, #20]
 80089a2:	b2f6      	uxtb	r6, r6
 80089a4:	4283      	cmp	r3, r0
 80089a6:	4637      	mov	r7, r6
 80089a8:	dc05      	bgt.n	80089b6 <__swbuf_r+0x4e>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	f7ff fd99 	bl	80084e4 <_fflush_r>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1ed      	bne.n	8008992 <__swbuf_r+0x2a>
 80089b6:	68a3      	ldr	r3, [r4, #8]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	60a3      	str	r3, [r4, #8]
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	701e      	strb	r6, [r3, #0]
 80089c4:	6962      	ldr	r2, [r4, #20]
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d004      	beq.n	80089d6 <__swbuf_r+0x6e>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	07db      	lsls	r3, r3, #31
 80089d0:	d5e1      	bpl.n	8008996 <__swbuf_r+0x2e>
 80089d2:	2e0a      	cmp	r6, #10
 80089d4:	d1df      	bne.n	8008996 <__swbuf_r+0x2e>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff fd83 	bl	80084e4 <_fflush_r>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d0d9      	beq.n	8008996 <__swbuf_r+0x2e>
 80089e2:	e7d6      	b.n	8008992 <__swbuf_r+0x2a>

080089e4 <__swsetup_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4b29      	ldr	r3, [pc, #164]	@ (8008a8c <__swsetup_r+0xa8>)
 80089e8:	4605      	mov	r5, r0
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	460c      	mov	r4, r1
 80089ee:	b118      	cbz	r0, 80089f8 <__swsetup_r+0x14>
 80089f0:	6a03      	ldr	r3, [r0, #32]
 80089f2:	b90b      	cbnz	r3, 80089f8 <__swsetup_r+0x14>
 80089f4:	f7fd ffb0 	bl	8006958 <__sinit>
 80089f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fc:	0719      	lsls	r1, r3, #28
 80089fe:	d422      	bmi.n	8008a46 <__swsetup_r+0x62>
 8008a00:	06da      	lsls	r2, r3, #27
 8008a02:	d407      	bmi.n	8008a14 <__swsetup_r+0x30>
 8008a04:	2209      	movs	r2, #9
 8008a06:	602a      	str	r2, [r5, #0]
 8008a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a12:	e033      	b.n	8008a7c <__swsetup_r+0x98>
 8008a14:	0758      	lsls	r0, r3, #29
 8008a16:	d512      	bpl.n	8008a3e <__swsetup_r+0x5a>
 8008a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a1a:	b141      	cbz	r1, 8008a2e <__swsetup_r+0x4a>
 8008a1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <__swsetup_r+0x46>
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7fe feff 	bl	8007828 <_free_r>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0308 	orr.w	r3, r3, #8
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	b94b      	cbnz	r3, 8008a5e <__swsetup_r+0x7a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a54:	d003      	beq.n	8008a5e <__swsetup_r+0x7a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f883 	bl	8008b64 <__smakebuf_r>
 8008a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a62:	f013 0201 	ands.w	r2, r3, #1
 8008a66:	d00a      	beq.n	8008a7e <__swsetup_r+0x9a>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	60a2      	str	r2, [r4, #8]
 8008a6c:	6962      	ldr	r2, [r4, #20]
 8008a6e:	4252      	negs	r2, r2
 8008a70:	61a2      	str	r2, [r4, #24]
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	b942      	cbnz	r2, 8008a88 <__swsetup_r+0xa4>
 8008a76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a7a:	d1c5      	bne.n	8008a08 <__swsetup_r+0x24>
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	0799      	lsls	r1, r3, #30
 8008a80:	bf58      	it	pl
 8008a82:	6962      	ldrpl	r2, [r4, #20]
 8008a84:	60a2      	str	r2, [r4, #8]
 8008a86:	e7f4      	b.n	8008a72 <__swsetup_r+0x8e>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7f7      	b.n	8008a7c <__swsetup_r+0x98>
 8008a8c:	2000001c 	.word	0x2000001c

08008a90 <_raise_r>:
 8008a90:	291f      	cmp	r1, #31
 8008a92:	b538      	push	{r3, r4, r5, lr}
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	d904      	bls.n	8008aa4 <_raise_r+0x14>
 8008a9a:	2316      	movs	r3, #22
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008aa6:	b112      	cbz	r2, 8008aae <_raise_r+0x1e>
 8008aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008aac:	b94b      	cbnz	r3, 8008ac2 <_raise_r+0x32>
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f000 f830 	bl	8008b14 <_getpid_r>
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008abe:	f000 b817 	b.w	8008af0 <_kill_r>
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d00a      	beq.n	8008adc <_raise_r+0x4c>
 8008ac6:	1c59      	adds	r1, r3, #1
 8008ac8:	d103      	bne.n	8008ad2 <_raise_r+0x42>
 8008aca:	2316      	movs	r3, #22
 8008acc:	6003      	str	r3, [r0, #0]
 8008ace:	2001      	movs	r0, #1
 8008ad0:	e7e7      	b.n	8008aa2 <_raise_r+0x12>
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4798      	blx	r3
 8008adc:	2000      	movs	r0, #0
 8008ade:	e7e0      	b.n	8008aa2 <_raise_r+0x12>

08008ae0 <raise>:
 8008ae0:	4b02      	ldr	r3, [pc, #8]	@ (8008aec <raise+0xc>)
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	f7ff bfd3 	b.w	8008a90 <_raise_r>
 8008aea:	bf00      	nop
 8008aec:	2000001c 	.word	0x2000001c

08008af0 <_kill_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d07      	ldr	r5, [pc, #28]	@ (8008b10 <_kill_r+0x20>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f7f8 fccf 	bl	80014a0 <_kill>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d102      	bne.n	8008b0c <_kill_r+0x1c>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	b103      	cbz	r3, 8008b0c <_kill_r+0x1c>
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	2000054c 	.word	0x2000054c

08008b14 <_getpid_r>:
 8008b14:	f7f8 bcbc 	b.w	8001490 <_getpid>

08008b18 <__swhatbuf_r>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	b096      	sub	sp, #88	@ 0x58
 8008b24:	4615      	mov	r5, r2
 8008b26:	461e      	mov	r6, r3
 8008b28:	da0d      	bge.n	8008b46 <__swhatbuf_r+0x2e>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b30:	f04f 0100 	mov.w	r1, #0
 8008b34:	bf14      	ite	ne
 8008b36:	2340      	movne	r3, #64	@ 0x40
 8008b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	b016      	add	sp, #88	@ 0x58
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
 8008b46:	466a      	mov	r2, sp
 8008b48:	f000 f848 	bl	8008bdc <_fstat_r>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	dbec      	blt.n	8008b2a <__swhatbuf_r+0x12>
 8008b50:	9901      	ldr	r1, [sp, #4]
 8008b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b5a:	4259      	negs	r1, r3
 8008b5c:	4159      	adcs	r1, r3
 8008b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b62:	e7eb      	b.n	8008b3c <__swhatbuf_r+0x24>

08008b64 <__smakebuf_r>:
 8008b64:	898b      	ldrh	r3, [r1, #12]
 8008b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b68:	079d      	lsls	r5, r3, #30
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	d507      	bpl.n	8008b80 <__smakebuf_r+0x1c>
 8008b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	6163      	str	r3, [r4, #20]
 8008b7c:	b003      	add	sp, #12
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	ab01      	add	r3, sp, #4
 8008b82:	466a      	mov	r2, sp
 8008b84:	f7ff ffc8 	bl	8008b18 <__swhatbuf_r>
 8008b88:	9f00      	ldr	r7, [sp, #0]
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7fe febe 	bl	8007910 <_malloc_r>
 8008b94:	b948      	cbnz	r0, 8008baa <__smakebuf_r+0x46>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	059a      	lsls	r2, r3, #22
 8008b9c:	d4ee      	bmi.n	8008b7c <__smakebuf_r+0x18>
 8008b9e:	f023 0303 	bic.w	r3, r3, #3
 8008ba2:	f043 0302 	orr.w	r3, r3, #2
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	e7e2      	b.n	8008b70 <__smakebuf_r+0xc>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	6020      	str	r0, [r4, #0]
 8008bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bba:	b15b      	cbz	r3, 8008bd4 <__smakebuf_r+0x70>
 8008bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 f81d 	bl	8008c00 <_isatty_r>
 8008bc6:	b128      	cbz	r0, 8008bd4 <__smakebuf_r+0x70>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	431d      	orrs	r5, r3
 8008bd8:	81a5      	strh	r5, [r4, #12]
 8008bda:	e7cf      	b.n	8008b7c <__smakebuf_r+0x18>

08008bdc <_fstat_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d07      	ldr	r5, [pc, #28]	@ (8008bfc <_fstat_r+0x20>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f7f8 fcb9 	bl	8001560 <_fstat>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d102      	bne.n	8008bf8 <_fstat_r+0x1c>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b103      	cbz	r3, 8008bf8 <_fstat_r+0x1c>
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2000054c 	.word	0x2000054c

08008c00 <_isatty_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d06      	ldr	r5, [pc, #24]	@ (8008c1c <_isatty_r+0x1c>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	f7f8 fcb8 	bl	8001580 <_isatty>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_isatty_r+0x1a>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_isatty_r+0x1a>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	2000054c 	.word	0x2000054c

08008c20 <_init>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr

08008c2c <_fini>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	bf00      	nop
 8008c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c32:	bc08      	pop	{r3}
 8008c34:	469e      	mov	lr, r3
 8008c36:	4770      	bx	lr
